%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: Assignment4.dvi
%%CreationDate: Wed Jul 13 11:54:10 2016
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi CMSY10
%%+ StandardSymL NimbusMonL-Regu NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o Assignment4.ps Assignment4.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.07.13:1153
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B74377CB02190B5A90769F2EDD5437EE
E3C7FCED238E4B22800705E9E86CA9BA63F869EF383BDBBF27066BF33164BFD7
E0747745A81F5C730A244D4424C26B9F11A27790A7847F88919FCAF40749ABC8
880521FF3C1151214C2C204D8D0EC8AB2AB23D244FB5AEF277024F7A0FA422D3
C9B3F98541C5E6704C90D2DEB61A59B82E0E407DC950C01E31D915C6626F6E42
1543DC775175F29F181789FDFD66939DCC18BDEB94FE8B9E0995231827D743E8
9BB609034EAF37E97C820EBD8FDDEC35700215F60737ECDD6C87E2764C59C2EF
F013B044E5D336C31BA0F189C36F9D48CABEB786F948C566CF1D783EC7B15B43
30A37FC9C1BF23CE45EF112406E81524DAD37599C3EC2057242EA8A7DA911650
788DB113A3E347B57978DBC344FF1C817A7836AFDA0975A2DD250FBD151440F4
C5CD454FC67C6D401A3ED3C4C7E735A3ACCB6B40E2A292104D656F6B16DC1F68
3FE6FEB1DB4D034DB5A047B8D574769188C0653D01FEFF21E9AE53A0E8334E3F
5324DE4D7FDBAC3C9BAAB27E0C853EBD237F5FDBB582FBE603D54C4AA17CE7B0
B568F3EBAD15B1E0E2853C4A1A9EEF8CA3700221AF7D1CA940090DB58920B921
9284D91DA3BD49B79D93C41B6028FC2870E4E57BA1B4773094EA19545F449BBA
27465BCD7F113C9C1B931168DE5DECF913C3597EE5FD1996F8AAE791FF65FB53
F78C6F639F50B4B745459A36D8F643413CD4B4125AEE2C4A30C930B21DFF39D1
558AFA51A6FDABF03BB3E3B0FE32175F3064DDF27841AF31E9B33EF2389DAF68
2A41B1161910495E7F26989BF6328610AED78D0AC8A6526EA1433BAACD2FB45F
5ADA40B0A35C687AEBD47B97E254311F4B943D89D63966FC98D9CA32B9793384
2A14BDCFBEA8A854FD0C91A958445E95683B0C3A934884BAA241EA08F1487CB6
87830972BF3014A73904A0E398B4FB469D4FDF87E8831CF5633CFB5DF462A15D
B5FB2F7E7C166946406D45E731C73000C10E53EA6DBC37FB09CCD195C9E3A24E
1077BE94200FF31D5A065998337D3A4A743782EF0A3418F5369691B67BE094CE
9C96C9A0EB7FC9CA9F4871AFDD2B3791D3E11B88FA8C6A73EA0539CBFEFF0B63
3643403EC4C62D25B1ED563C248ECE78A971F4AC9BD5E9AE3C91030D7E1AC115
C39AA10546522A5801B0452CF57917D25EBF495AD981F81CC9C41EEB1B460733
D2E983D0893A31E41E4CFA7986FF94A46C46F1C3EC64543291A490B1DD241070
94FB0DF0D9E564C4BE8251FA5E70D809B157755E51EB778031FF76B3A90375C9
9B9B3D913F5AB6DC39A2A6EF0241887E4F6C1693057096FA1FDE44E51543E22B
EE6F0D455CDA26BE9CBE9158A32E84EDFA17F082FC1681758998F1B9E3D42F28
DF57F108E0980656A43783E62E65934DE406A7F4462FEA63BD490E1E23A1F020
8DB9C7CE5414E5FEA261EB93401959C04A9E2A88D8EB1E5F9217FB0ED537ABAB
6E23DCCF2DAAAD831000E24FEC935A241984FE90A2B0C1326131CE9280FF2221
FFB992131BC5DDDC41EFE2B2E91D98DE0099737DDABEA6E2431A635187FA344E
376F327D2D6E3C57BAFA81C73A5AAF2FA889B7F0837287DEB3E4BB2F19D73036
086F47931354AD2C8716CE9AB3E2314047FD284ECF25B6240F8912E6B8DA8C73
7FE574A2B8DFEFDA12D59DE5A8E2A2AFD63B328775E3B44F8242D76A759A08D6
C227C3182E3AD32BB1121234B9C055BBDFA80B44E7B86A5F864C31CEB2ABD660
D2B06904D1CE34CCCF4CFC655DB5818840D39D041B26E4CB8AA4496B318283B8
0AC61EDF21B109D7DC8DDB89375C7335F1B602CF8A5D6BB3E21369276C1B1A19
61A32B3EA98F5ADA485A644A34CD0F70B5ADA7DCC9E4C08F8CF3B41AFFB66DB1
83109EAA0BEA3074AD5A6F8A74F657E6CE1CBBA31DD5B6A2A51DFB6604687AE3
21A20180B51CE82D5A1DF12056703A2473030FDB60CF072D79559B35A5C3EC09
2CE2BB881BC3306EC173EB74E243886DFBB8393FC7DDE90BF9A9FF456994D27C
885FC2CDB5C498FA9D55076F8C361712E0FF0F03792679845AD7420719DF4714
DCABAA33F289C79984D73734362A4D112A3CF3C1E01CC26F268CB463ED6DDE50
9CC7308E3B6C8AAC4A74715CFC76B104D4235D5768AD88C35BC72782BED87591
4A28D32D6B26CEC73264E9462266276641950937B90ADBE1F9152AE2331499BE
A20F2CFE79462CB611DB9F7082FA3EA1333A2387FBB5CB7A8AB185DB976E3F6F
548540D06A330A4DBFF5F1662197B4B26CB17AFFD47146F71471A4BFC66F768B
585F9215CF30B97C99D51ED0EA966F55EB917960057A6F9E98A5BA01C1EC32CE
EF968360B90F56F483E403C6E80C06B0DBEFD8F89C0D55712422BB0B70B8DA22
B43FF2A7A697C3F18F402EBF6C56CBC4B24764D050C43A375DB5675E54C76D75
31F8D41028432E91C7ADB3A70166D91855CC803FAAB932CABE462536722E95F9
6134D6205BE2434118077B908451C4ED8341D28937499B2DFFD98E311BF3DB0D
2F8103C51CB9F50407BB0FE358C322B2896A8BB113136337F88C41B0FEEE9B2C
178F405B52C4D828BC4629665F1C31F622A6C376D6C3AF77098424004666BA84
35FE10EC622EBE16E32224ED65F147D6F231B461AF422355101AC49658B2E32A
6F24680D64EA62CEF40AF1784CBDE230812D7EF302824142EE7DB8A8D7F3E1C5
6DAC5E9FEEA4F41976945501F3A17F61AAB2377EC7F48FCBF9E5C850205DBA79
C103C803C5B59737BBD6C22ED8AEFE46889D2AE2B31D0F1C092367EFD9F771DD
998C3748067212058FADC299B81EC760B21B539A72C4649E6CF2DDCA2DD800A7
F77946855A023A29ED930D4372257E2350B82659A5B44DB9D80FFFBF5F9C5B7E
182EB012ABACEED049852904D4035E35D537AD4FB8A14494C1B7414CF21091F2
40CC15C68EFC27247F06FA933A05E40E6FB92C581FE41A954554F5A2CC5C8830
24B70B6EABB92E1FACB1F8FF18CE58E114060C458F1E5BA761980EF28161D5DD
43E16865810297FA41D1E12B0691CBD49F4CA398D12D633CFAF4907DDE965A39
59752BED492B8DC2BFD1FCEDB32E261F8BAE46654CF523D136CCE8B52E8D943E
609F9F4E94FBD66E7C1E56B18A51C229D309130BAA3F11E907177CA545CFC056
8B9C0A2670BB3F4261A2A8E591C7AA3445D0F86AF773B960B1F5B7604639800A
47BC4CC6B35EE6EEB1428D26EEAD4D6AF20C77DB1355CCF8E3E54C3BB8D661E4
DEF3D5B062FFB88478B4A1B2D58C58442527FD1B230401A550980BF2F75548CF
E3266DB0E088F48DBD44C379EFCF03E92AA97CD7BBF2244E10185F6D79C4D91D
269C6E4A2F65B49A3D2CF06DE88A7776E7401409D1DD8F2063EAF0A556D3CB40
62A0131EE8196600DAF4DBFEC49C4BD39C1EA9FD8FD240463F1A7D0DB3CC6395
217A08454E84A56B2DD3F25D5A9F620224A0A463B7BC2C470BB6EE22A540F581
EC9293DBB7A4F493722E61DB62F5D8C8465C0AD128085AE31D620480D82B5151
EABE73599DA6FFA0C2AEBFAC9216FB646FACC2ACCF79363994762F352CA74B5D
AFA70C389BA8798B3CB383E42497BED323D3C90009A4366F34513C6FDB2A0232
D1BAF31DB18BEF7A4D2DADA9C2961A75BF513FCCD45751AC64F8D9DF3E4AFB32
361ACAB13BACD3E465D094B642A1D1DBAC25E723FF843C952911FE17FEC2FF13
B69A6FDBB5B03576BE188F8A87EDCC0E550DB1D88A78A3169E9537CE44D5D84E
9A18DAF2A99D8EE950A877F08AF889200505C07E64B2D4509D1270CDBEFF01A0
25035EA5A9E1CAA5E94B0856CE64E50BDF59815F41991F38BCAC0A5E098E19FC
70CAF6FFBEB70AE878B9F7AE5E994A095D9EE5FB336746BBA506603279BFA919
87FF5EF9428B6B265A63F45B5C9B3AD235005859329FB0FFFF2646E94179D30E
BDF73A25B991A8B7203B599ACB80B0D6348FD52552EFA531F6F7A78A0E6A3F7B
F999FE0159797AF521C06B9CA7915AC36C9EE08A1F7642D8C77E55B9E967CD05
7C1AEB9E463700DEEBA3A4678B9658F8649182BA4DD7D16E5DC259E3F50835A6
A637DB1F4C5BEF5A589847B993C18E41D0CDEF4032AD94DD4B5C705375EF9C87
627A1CFEA2A6707D6B09ACBA2125C767B37870CB666228744DB62F32588C5AA6
C52D5907D576098471DD83E6B44824FB1A4E23545846FB739CC4CE1AF752E3A7
B6DDE7BDFFD0954AD15D9D2084950F2231D7AF3FB95A99A9211EFF3438249816
0E4B54D39E7D9F84D91F1EC16E2709D65948C738D5F12B1D845078DA39E1D47F
152AF583CAE41F7F7FE0AA3F1F7DDD6D144A010CABC53339E8CDF172B872311C
783A8F2BE809901A047119B40830A39909494E86AEE21694223DF75C2D6B3467
D9AC4A08FD88BBF11EF3B6A9B45DD69A8C8231B4CFD3C77A50DFC84CAAFD32AA
716301301AF68F43F441FAB4B93F604A39107E9AB6EFC28D52BAE71F989D32C9
717D85D4C4E2E941026C25847C739B6EEAD71C8C482948011A3C3271F01ADF07
174DAFCB0F18A3BAEAC36B6097540C5C81A8CF53AD64448E9130C01AB94B016D
7C4F215197AD48A99FAE289841BCBB0CD595AE0C7DFBB881228C7336E07F172C
97B328F91EF111C1F3EDFD1E6B4A0CB80459EC562604D5A0A7C8327B567DA70D
25CD27005D3BAA9F3107DA232FE1FB92CE932280C09236493D1F97EBAB7FD90E
2A9A4EB4690B6AAD4D2A6B40EF8129335C181ACB3CC65F8D47855A32BED8D10F
9E798D02102F63C580E964B61A0CBFD08FA0800DCC05EE0EA3A3C25BEE0A827C
FB0B1114798C312AFD4462C25F03D402296A8464457475BCF732AE7590244B1E
FACD4708DB15AC974A1835C29E98731FED0DCDC4789191CDAA57F6F5B3EB679C
F51B58904D906A0C38C26985732B09051C82329E2F638F39BCBDAF1A3A1E97A8
71953A750CEC66B95A71C3A7B225F6AB9301FE03B75123D2289BB61D82525349
EC1DB0FCA4AF9FC777065DD5653C091F958D6D954B34C69C09F6B2A5FD58037D
23055702D82796844E11066FC4B15D651FA8B72057F5CADA421DB61E94F19089
28FA612F5CEBC159AA42FFAC1019EEBEF54054F7663FF9A07764412D451CD539
1394D9256DC6402D9C28E07048D6C6F639F46C1A0BC5C368915ADECEEA267A7C
D0C60972A30E922987A2DF552BC81585E4191D97B6F0CE9D20BDD955846E0F88
F2F36F35938C00DCBDD9113AC29F7BD5021CB8AA81ECD8DC7BBE72E09048DF82
C3AD477227637D7DB9C5B997A491F8A79121E5B437175718A41624ADB73AFDA4
91585195214D89521D509E582DF0DC455AD65621DA6FB5F5FB4FEAA10871CC90
6802EAC1B91260167043A82547D9FE5CCAD917381670D8D943139E4402AE1742
E24E741A3DD9230A4867EF7C900EE689463D4C939967DC1AB375125F775262AF
D6CBE3A6096D3BA407395447A5400D7B0F3ADDFC747AD023433F23C434F1FEF1
2A6ADB959AD04A1BD5ECA3BD5E2ED9E63F086B461A838517B4A6C7CB75282C63
C7EFC9E6F6B5DD33253E63EC174B62EC95CCB4A0387CBAD18C40F90940862768
F229D4AA675CD24361D1E17F00B608C73698F37436E284078050B57E8478FA81
69F00B31AA88A3896640C8C2CAA9E9F1CACAF338F46A19719679C653646AF346
FBD5F50796449406577E0409C2E25C4E51748D3A5C51627595F52E6B2B1E6D71
8D50CE1883635EC1D43E4629D40F5F6EE127C0156C3327533B10E0B0F0A5E450
8A586EBAB8A4DEEDC35DAE6D792C515C1DA50480DED1CD2E9A4610FB74AA3113
EAD32AFE296F0AAE4AF56D2349F0E9B4AB8EC9BCFCBD95D8632A1FD922379A8E
EB18A8810C15503FA2EDAEDF6892CC2BFC1E043FB4B3EE5754B286705C5CB9A3
4C5805932BF5E681F2C30ECF2CD6618319807301100D0C862164B4C3871A2DD3
0D3E196812DE43F1FC2B17D91ADE5147B6699FB4C7C9F2290AA53FE53BE44CFD
5EE4CA5681BFA0EF9BBED9C08271DCDC3908202F0F6174BED2CA91F9771A535A
1378AD99331F77F37511F18ED059613F1880D27C0F7D73703FCBA03DD9810147
053712B7B0714798AC51AFBBF8FB68DD36FB937C068BC0ECFF8997C8A64E67B9
B38F3FD76D7E54CD4243190EEC9EFE17D29E622A530E3DD44CA35610FF1E3E24
788485A4C39D886175F5DF7E80A0415D5A177A298D1098317C6FEC4179DD98C9
9276A4B061D658C628E8B483FBA86CB0AAA151DCBEAED3D61EC3B5549C252C59
F9B35A25930AABC93301DB3DE40173030B53E11C35BAF19BAB62B662B8DDF0CD
885A658E9C1B6EAA5138B7C0A21EE68CD1D8451E8194D244E25E4BABA9C7632E
6A228605E32A528EF76D3439BD5739F67DCA2117C41891DECACE167B4021E820
0F7ADFD98591D382085EE206C402E3E337572BE639F31C23B04EE90FCBBEF777
4303C46457901406B79105CD1368EBEEA10DA116954E267069510843A3EF5177
38ED8B2541B80E66EB2E7753FF4FC7FC55AA49D316055F12C80A057D614E6519
A212D19F275C9F0E6C280CF6F179B5899609A7A20D9D0C84D8E28CFD2FF693EC
18A3FE16B57B0DEC5D9ADA13F08CAE81B6EAB895BA613875802D4E826E4E8975
EB5E5E8E71EB4EB1B51DD9E3E41F660A5A81C9009775DA5584BD767C16C77F37
640F76F82AD927DFB254D17C0926AFF3F2386781B5B5BF7C93F1B7E1330FA33C
82E7DC1A05E82FFAE34A223B2859E0C78F1F1FD5B1E17FA348F9AEDF7FFA1CA2
532879B7385759091ADDCD306A2C3597B5FCA771878C68A0E96C27933DAF45EF
3829DF0702C88DD8822F984E5D80BD75B6D7AC048BFF7FD766540B56CC2C504D
D5B72776A9129C4880
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB34184AA89FC5E02
DF2419D6F7A616F84C4CD160E676E300BC338232B48A8FE9A9281E4CFB01D867
563247DC1B5DE76E7DB866A2DB1B079A80C28F77F6E80DEAE0F25598F242C987
7EDD26B9DC641195E35E246D4C8C41D27CD3E7503C513BB19334A90124CF4ED0
E151DCDC6BA63055C20B037EB4C97E39AED3868528E67D5DBD10E3358D818992
B09915FCE4DA65A5EA0C4E664B5068382C766444AE8164E11A121448D1CE7FAF
15472855FC65734B48F6F344296AAE767226D89F9DF1BCB2677B82B49A6C4507
41DAED0F23BD69FD67E75250065D68CAA77D1904460E62030455BF64E68F1FB9
860C923245DE04380323F4A92B5A67FAACED1BAE2F1CFC133D751551E4487157
4015D490A70F55BE1A6C135C1123CB216D71396A9E0C75F5F4AF235A76B190B7
C820DD8F5FD0E726E9FEB0B277D73B3383ABDD138A2812AC5E215668D9FB215F
AAFFCD09DEC9B740E2A860554861E7CB83385CDDA42BC4773F93E7A53AE89EF3
89AAAED5239DD8F4C884C4FCFF3AE39EBA1AF456752CA35589CA7D1FC1A124D3
C9624699D76D7351A4A78FC2B63EBAACA5F6565B966BF65083A9120FC2606A90
25D3D8FDC7B5E92735B8A7D7C32900BD6D133FE50034DB8A2F1DE6369D13F15D
202F8467293B7FFC72B6D9F730735BF1C5976FB22AEF42D03E33DA209123B6E2
B7EF9984270692E476E281AC6E7837E2BF45A9DA7EF4199C594986C30DCAB511
686A2C699385B3CD763CA38BB57B67071A8CFBB6CAC323167D9D96DBE2AB542E
2587CF6CE66357C4904B79B704C799AE090C2E12AE089074F56DBFC2992CBBF2
D3BE43FC7E8CE14C9FF7CEEFD6B629FA661440C361DDE7817154052436A36812
694C65D2484218CB438C2B9FB81757802E694B776D4E64AB2F9488EA7B134432
9A6DE47FD59BF4A29E16C362A56B696080FA9F6C289D3C21F2BAE3647177A99F
D325C398E049FC951F28A391F664BCE4148D31D273829512761986351742BDE0
67A69959FCFE317D62A9903DD9C28A08103957BBFD269B2CE9C17B631C1A6302
5D2261A987048B8DAC71B17769AAB13BF63405B2B36057E00EEBBCF206EF6A7B
729380BEF8AAE744F5343A0CE0D06EB59CD75260255563C88D594B9386F1CA56
55EB64342E5FB6E18F2149FCF4C0F743AA1A0D83A41379B0ECFF59CE398BBCF7
9F56450208CB65FF7C7FEC0715F84FA77D3B65D73DB6493FE38E02D7A7C041B0
6172198B32F99D58E21B0A78302026FA3227FC15EA2278A65E36711C686089F8
B11AC1E8BE9ECC45C5E7929E55AF96F3CECC0F5BB44A99443CB300C72E5ECCB7
5954A12C5675D662BC49B0530205FB6B383643A22E77E501FD013940ADC6620C
BC878078281D2261433F50BF60C6047783E14D64F293CF46D124BE0F8664FEA6
713D4D0616EEEE3B431261B9CA2E4FD8A303BAE14060E1394571392C3AB4BD86
1801D55698E3D6ECE62CE5CC9FE34A8AAB8E3871D22426F200FB8824E27D3B1F
736466EF878BCA44F255211FDDD21A92C01BD539EAC70582BC3F615529397E74
A1FCD21E5789A95CD7C2B2DD6A02320C975CB8E0E6CFE66CE1B4C401B6E1BF9E
9308107E3B1013069C0B0ABC6B5C2A2B08E8F5AE4C1E037041529D276557952E
53E9B9A49E49DF90A6AAE92EB1B2F3A7280A5C9A1C1B39778132988F62AF56BB
1C140022F01FDD913ABEE28BFA1EE081811FEA1AE3C2AA46C5AEB118C470914C
F1D522123E627D00097377258E81CBA83F50FFF083740C18191F515E47FDD5BA
FB1ACF90DE0DCDBD7CBBF0BF03BE50426089EC7071143F517082823662372FE8
43423B04039E704058DEB846AA6EC0468ED1F1CFDDD540B560C2E1AB253A9BC1
F8A010A7C644167DD226CFBA55A4284E7744248CB03A8DF714182DF2C1578EDB
C1CF0A0533D68478875669581477FBFD6134877FD0F3A708BA3D3DF14C987803
03B4EBBA5C743CA53E8C64D1E208C798CC9E2C9F57EF88E1B9A6644C0BBC4CEC
1D676CAA78685587F976668C3EE9BEDCD568561E84F565210E021892364EF2FF
1374B71D8BAC474571F94A5A161365BFC3C0431BE43535CEA8E026BCC92707FE
F78CB9BE4DFA06DB3E8996508D600B72CC083AE705727CC7FCFED7568DD41BB1
3E89FEAA677F62C6BE5485771F401635422CBCE2482B63B1DABA4BBA5C7D36AE
1CC7BF0CDFF4CB7167DD61ED35C907951409B0E69BB7A42782412C22EC0C64A7
150D6C43B9A09A43832B2899C898AA9CC6516DC7A0660CC2B0B3C78EA9652D67
84079C11F12C5F8A59DAB86CE7477658A608CB758F210AE4B2EE1E29A43806C0
4DB5DCA0F56AB93E3A62FB2026698FDE18C678282C0ABF7EBFAA85F3F57B143B
5BC6276EA61AA9465BBB3A56AAC8D14E62B83EF68EB42E357A9FAF092F7C3D4B
36042FEFA70953AB89F716CE17F036C10A982D3D5A26CAB55D1F43B9F5C8668D
C46327C16278EBDA432267B7341E9AFD5F6E12D4F8A3D467865B963C6CB6C2BA
C0238F0A2AB3DA276F67722BAF78DE86A40ED5DBDE8B5E537B68A693ADD1CA8C
5F6AA9C7698A1E383942D0C6CE6F6240554BD98D1E70814B1258131811877B96
009E065BF3653113D555D19501FEBAC3C44768AEAFA6146BED5C7A82F35E746C
DC1EC49ED6114400F4724ECFF05FE0BED478A8A1AA4CD3E9908B59DB3B357012
9C8FA73E4F4EEB8191B625292F0E834CED6FA36F289992A7DAAA193CE2C2718E
7C82EC6EB1EF704617B9E843163D82267279A95F558EB0B95D7B348E22882BAC
405187200C363937BD592771404A3954FC5AF2E69E97140F215A1D3F3379FCC8
2E638A058E234468B01F6ED9AB7178040FDC905F596BA986D105FBB0482F2921
3C33ED0D2B561696EBA4034DCFBBD160A4E0C63C8EA70FC942F3E77D0E602CC1
DBB28B3747300E55811EED46D4A8B7297AB15924E4174DB9B6A15504B5547650
ABDCA6DE09009FCAA9759F55EA0225EB29107CC191C804696AA1150BF2C2D81E
7F0FBA3720959CE5DDEF83C555A7E2D829BF50D17BD02D3246619D151BA43654
53173D7DF58576F1B8CCCB4C1E7696D16531A5EED36C30AA15C66D51390A3AF6
193C3039196238404C70ADF03B54407D48B800E8E56243E31E69A8781036D46D
AE8DB4F9D93D5859FFF6B335C54700A78C7C9605BFB0F0379CCDC085E5F991DD
3782849CD9E6D50ECC4420AD219033A2DF2332DA1C884762EEB3EF660DADA9C0
4B5EBD29A9D024F053A56FE4CD666050B4554CCED753DB52D6A12A798FE75217
B016F08681880D9EA02154A8F5639E7FD44D2220BD4EF12017FACD410123C239
F97E12BF2DF03045ABC9A5E9FE04F0D6F9EFAD10B421AB29D6BBFDB477010C1E
685F759A9F3F1B4B2CC627C779A0E5BAE950FFDE5D53ADB1DD728C02742D0E51
D69C79B0D57A16FCFB51D3FBC0B1E1925EE1764C0FDDB042D34BD0A7A1833B19
CB43DEB2538341FA4D65A0A88E141F18BF75E71B5B6E7022B99AA55C94130C7A
4AF4E1A6B535FC4DB5D4AC148F5011054948A10FA9CA75A8F0BE1DF49EBDC17F
49804D6F4DEAE129B9433D1B6A189D7071D76B34DBB962DC572299A25C2C92C8
E401703644FFF77455ACC6744D74BE4485748E67DFE2DE5168B4EE11447C4607
F516362370849DB4BD07E98462152E462B0D36E4BE9BD0B5AC1B8A39605C9B89
22EAC2AE7ABF4B1251F8D7E4B17930F75515093B732EE5CCC0ECD9151B8114E8
65F16B9F09DA1BC0F9E0CC2BEA26EE8E974027A89695D0010E7BAC5E00A7BA79
332089472B9D44FB7F2FAB7D73EF7288330A22873EB4F7CDE57AA7490C7E6774
F8B7BB50540BCDE8BDB0D5420AA2FAEBBD7D8B06F3F0D3E9AB278C84661E8D47
0C8FCE7D08ACB186E6E46325AB19C998AA63A3C9CE4DACD30836B0D72B727BDF
16EBC871E07FAF2F53FEF19FEE993A87897DC9836F38EFF0490664C4321EFB62
4CD3B79D73A0D26C827F8512944009A45E1DAD4C432A32719ECB88DE756259EB
842649D156E6F1977393298A5D7A09F49F0D666BA9F121A12E20FC0B249362BF
1999B6EB81DCFCDA69E68F2A60A848FBCA76EA74AD464CD041B7CBB8892F2DBA
833118B8393E2D5D8E98C0B0F8D853A6ABFBFBB997ECD88D5F46E601909A94EF
9F26DBD3FD7A32B2FA2B7AD77F1645EFCF7BCDD1C2C2C066776D7D38E78D6BC2
A4B93C1CFF0DD0BADC44415187E94EC2FE58A415BAAFDEA442B1035158D158A1
68DEEDA18315319610FF08C64D9FAF38A7EE274BF3020F7CFB2CAB7DE898AE98
94C99F49FF680F36DDAF7AF86407766AD28F7DC3CE39BA66C3DB5DEBD271270A
478AED9640392137548DA792D10E5C4B5F74D3455BE977C234673E53BEC86851
09E0B368492FEC6A122D532233D18D088E387D5D7D631CB91919AF3C96D8B886
441B1B129C103CE971961454C164AE4CBDA518D132087207CE9B22291F5811A8
9F3F185687330EBB47AFB14105E20E1132918CD7C1106937256DAAE3D51594B4
72EBD68B46C87FFB5A530833A191BD41F45E891EA1EAF0F87013AF4CE74DD05B
327128E40FB90906803E50513AA7C034A8AD0032707774DB00EB920C2B22787C
49C0D493133C1342D7AD67C1DDA9A97931DA01492095E0C27CCAA30E0DB63F02
F11DC0CE8A94BE43869FC15B4225045A6DCBDC95B500904E75272718DD4BD3CB
187CF449C0179421B19BCDBE26871A09D6ECAED6F3B148249BA0749B52E45BF6
6BEFF3FBE0BF8CACF99B1749CE5F5CE802B6B1CB3D6F250353074E1B4C48129E
8EA2E61C327C3286092FEB52944FF26D8EBBCF87E2327C929872809491B662E8
88625739FCE99B64D110B70D19487454D57F3670A114D76FC757DDC43020BC54
5394D6A11ED6FC485A2AEA55611671C2CC66422B224D4E70B69FD185D52AE6E5
C8C32ACC881ABE4868E6ED01E0EE2FD7242263FEC87BBDAD15D86401FD759B4F
B23ADC3A124E43054E877282C99C105887897BC5CDB4354A8BC790443F39CD04
98E0865DBD2ED048E28494E48DCDFB073CE79B97D79FFFFB5130B7BC946C3EB8
0285FC5C39FCABA7BADA1A8420EF654A1A32E34A5F25017973B3B0C45734D917
371815E3E2F9DC81FB21742D15F8156E079E663932EA165B0244A86963115F1A
4B4CED1C34BDE76F91B692191E79049D2846051AF94BE57F93103B37F133B522
55A61514D5885729DECCE1B675353FD8455E5EE829A7F83C04E4F95846020270
1424A6D49E4B0D107878F218E82FDFB74799A272873190E50503912ACF814CA1
75A861BB5FF8B74EE2D94BDE2E58AB9AAE2E41D835CAAD682B251DF56295CD5E
FDE30433EF517BD0FD043461E5C6F88FAE6EE008A9E655FE177168F15FCE020A
581B1384039664D49F3047B26A8DD1001A12502B9BAA8C3A81621B66624CF1E5
226ABE08FBA908AEBB645D5521BD4B5766F40C6DB28B34A64D424D53806D2C9D
CA789596BCC99CA2F847C90A53926B6F66E029783444DE29A3A5514B5294B95A
CFE243C77442F6FCC85CBD236A7E230F3F2F595EE5813D956928ACBAA379D7DF
30922B99FBBA9D68F366561D1D97CA64B75C375DCF494DF398123CB24B6AC09B
605D57426D595B965B238F233D732103C9A21E68F88B62C8FEA8EDEEAE653416
9B7858C8BFA77E1CB657775130EE04D238E25B4F2686AB50BB1D5BD99A6533B6
869256C5781C90EA4F11F7487FD9CF2D20576964C0A7C9B4AD6038675963CACE
8CCDABA49DD38BE2A3F0196A78369C27052A3261BF4DDC3D4E3242D9A481E6F4
6D76D5CDE0830034E3BDC2EDA5AB4B0FD9F3E9CBE1242F5ED495501262317FEF
59FF2CC06304B7125A57A4192AACC234987FE1A8FF450305CE78F247BEA3DEBE
7D1A7EFA0107C3D1D629B477018D51502F4DF9DF404A8AFE19078D46BFF1CC0A
EEB6FB8F3A140434CCF7C59B508AC9404B71839F9A64534F20D3E6AA02F37B2F
668AD008CBE4E086013AEF36288E1A1CC5A10AFD1E697ADF100C9C203674DC4C
2BABC0AD542A28C09546E77308791CD736DAF2942AD30421107C582BBF1689F9
98C3D5B178F767FEF876167652AE20D8D9007ACBD11ED2A808B8D2C4D51084FC
653EAE2E37B764F069C0754BAD59DF4558228AC8CCDF4B0EDE49AE2BE3EEA4C2
AB69381C9B2A9AD109A063B8AFF561681D2E5567E8510F2D9BB8E3E09279960B
4347A09074F63389DB6186741918E5A96D3AC2AB58138058B4C66D724A45AC20
E8ABE674702C0EF322CE32544C038DA3EDF041343267590F76012B630C71F573
DA3856B3009F82683572D7B2ADBBA63608C96DCA646EBADF4486711513D1CAB2
E430870F7106959594A1F15B3C9A0E5B54637D369CECAA15E2701BAD9095E2B9
68D80E19F1F69F478CB633DBECDFB1034D0314F44164667B8993158E72300A2E
029981DCE423ED67D8077EC4429E9F6FE39D6CC4DB92AFE7130317CD559F65B1
728DFEAD854794DC81AFE69BB9369C9EB24BB2F33508A9303A1CB17C4A6F7424
9E9F5EB7ECE86CC46D0E3444471B46BFE5B3023876913D66351EE8DA4E8EFF38
6D50C901AEBA738949D88C9436C4B016E13AD3715F578A00E3D9ECAC6F4922CC
21BD9218E0C18FBB6E93044CBB83EF48BFB08463FF8967E35851AA53D2995F02
0A0BC9F8959C4ABDF4FE7C245CA0CEDBF50B39F2C388F118806FAEF0361E5A30
DA786E599D93E78F837C6B8E6B2AEC3E55402533D2B8E7897EDDAD9E7386C7F6
17FB824FC072B203F4F59BE1AD936670184381EB380DE2F1E100FE7121DC203A
89648C906439AD57F69BBAC7C1663075E687A185645A2A6D34FB4594316BB167
209418ECE7B6C3D02F92CE75A5DBCA388B710C601C41C74CAECABF8616AD95FD
9ED3B11C918BB38D16516A811726E41351E349B6167CA5058EE84D1258EFC60D
1BE108B826DE9F26DF59B2995B000E5AE2CE32B6DDFAF476360AE364B05486B6
A1E5378A10FB3CFE695C7E714505318C251DDC89D151D76CE55800D3D730F0AA
170781E85AEADA1D290708A8224C649D3021CBAB14E586598BC7C43D907C1DB5
CA65E297305033E947A69E382C20D140273761A898F69A36F9587B37EEB4C6BA
A6825975EA06A0F58FEDA6176DE665AE039A41DB1D1E6AFBDAD2E73F72E3F501
0A91412A3229540A44FD646A378F8F585C86001755135EEC17A1974EFE655EA2
6B11D567EECE1E42FE0CB2016DFE9C60915CB4EE76F51A88D09FE4D1FCC0B7A5
026779D9CE0C778599803EE49EBCAF6C6E111EDC956123E99ED07FD2550CE2A9
6156EB5EE9F9A9A99551478C23BB85A417BD2D7204CB6ED99662794202DE1BE4
7B116CED1441166D7781D4D80C42DF15FA0C223FEB058A7E0939602F0B1F0FEE
EA7EE276418D27F5CAD8E57393A541E837087FE7179E9020062622DE064EC142
4A36508781823662372FE843423B04039E704058DEB846AA6A8F4B62EADEF7E2
62E32940DB52D0635323E8E33DDA861B0564CC53EAD28CE88289207B582DD185
08705EBF42EAEE6968B878036C6EC2CD975545CA4ED25EB096A30615DDF093D0
2FB419CDEAA8924DD923B74F252664C67F7E18B906D915352458CFD5817DAC15
7E3885B8EBDC35B74252F257E3733A7CAB1F0C21D28BF894334254229D4D2493
E959A12F6B06B8223991B3B026AB632EF0B413144DC04B567DF3008C7C00ED5B
17DE359DA187810E231816D0657F334B648E11C3659BA4BCBEB1705BE4FBADC1
919A908C55DAB865A938B6970AA96DF78F480444A0BC0B30A59B8FC8BF6ADF87
1A58857A13521FD677E8E57D3BD2407FAF554270CEBDF6B29A4DB9A3855AED1B
8438F1D8DCD05D678E426BA23874369197CF185D2381E5170851A9FB0B95AACD
AF4B648382FABAC70F441134243FEBAC6BD4F64A2456F6232A8282CE634513CB
B2E85485CEF030D760ECCF87F6ED2944F9F08BED38CD64A2DD0D34A23DDD94A5
1C68370B2FEA765B68E59E28865652E8FDA07D773CF8398495813807FA047866
E237994F7CE145D3B0D70C6EA483FF99290E13574EB802422BD86EFE2394DF01
96EA4BCB09F019123AB92002863D00FFD47FC0287AD45948B2225F0183BD481A
526F5680F6A5B765BFB3CAD4DA410E69C542CAC64B65F6B829C08A4B0C287012
2634D5A247EE4D8672339B1D90113137D4F9B68C72DE13BF53666948ED6D06A2
6DA57159B87DF03AD88933D269E90877555B1E9AF694D44B85295968D0CB149D
58F0CF991AF88820F1237A88AD72D8953E25AD54A1AD75E2C0CCCF6E0F27E1B5
E783A55301CF59F9E7DEDA0C2591E896938B584450D9E008CDD0202DB1B3CECF
D13CCA6BC0754BAD59DF4558D2D608FAF16668DAEAC6B2249D1E95EEF85AB528
E8CD2DA99E33C7EF0EE9DF6946DFB3ED5A0DA71350E6329E4F082C00FBD73BC0
6D874C7AF740B91CEEDB54EB08384809CF652F1E602E7F27C2DAC8170187CDF7
80CAF45A8E0C2D394A26B50F8BE2ED83602FCD0BE17CCE683723129385D16A4D
FA72DDC32BD4B92BE80F76FAF0533551DDAC4DB24D06FB832C5F1DF94C51DBCB
B0C9234255F26B3D26D7F5BA3D3B172AB1E37A56D2674EF11A74730F04443B8A
580BD45C8BDBDE9A8C6EED14FD6A58590CABBCD610DBDA14114FAD3B7507A1F2
E69489EF60C9F55ACAE4D1CF451FFDEF67FA97D58086B1BB39BB1AF6C0BB751C
6EC83AFCFCF697DCC8808A931CB62997E29B687E0F3E71D22426F200FB8824E2
7D3B1F736466EF878BCF4779EDFD36B63A9E05D8F4BD13318C16396253CDCB9E
1EEE0DDAE88E34ECAF5F6E49A777D15DA87D810AC3FFE9A84B5982B409F49232
A61A6549D974FBFA88369D08839CC4CDA3C2AC3A46DAD7BA069CF80E2A626FBA
2FB4B424D6DA9BA0FFB366D19D8C69701D7E8ECBEA88569556E4F793CC26242D
918F052AA2F06CF2178D997C4BA8B7F6CC4FF93EEE934F661B73BFC5BB9BA339
A01EE6FFE4413C6A9C8B367230C16751E103E2845FB38FB2C1500D197644585B
5B5737FE783708345E70A4DBD6C5BC697555387FF65A63CF2A927E5F2D7313EA
2C5610209DAB5C180CD8B11D5CD83479FE9D7246A47C25CD7BBCC85852595002
FE74B02B3D0C6B9B201C3AC5CD3117B29102A20D60D93E9099CD8C0CE8B3BF58
E971F0775CE085DE74254F64AB620EE152ADFFF6FB35CB22667E746FCA5A279B
95A2B515DA86A293CD507153759C247901EBA8C4D6F9EB2468F64173AA1D106C
D4CDAB8BAABDDA2CDD9686F1C1F4DD1ECCE568355352DA5C2B8EA3689D75AF3B
30F788A7B9511EBD13E6A5D59129C253883E9D7A837C9548F69D4B2FECD2AD83
B5C9FD6E3364175D8C20994382E9E09AC61BC2C8C582E13D39634BF37685483F
86D1F47469AFA591816E90A4E899E0B7AD32E22A432EE212F87AF6799A7D0D3F
CF1DD66A83FDA1094245139346C89EE07578D42C495F3A0157E54C5133C1136D
E2492BC07C0F2C3FC203AE45CFE7B03662E043AC2782BED875914A2FB782896B
537462AB0B27E20C9D3CF8D27B81A55DE3F2E6822CE89A2FA7CAE9AC02990882
F3E81B9090CF23C71D47216D4AC5F199ED0192910E15539B07CFA88C80D6E3F4
A4AE92B580F02FF2494CFF98E6ED9A01DC44BF10509D4977534D0E466F1FB5EF
678E92F2BECE388E84634CF77B4EF64B20C24ADEAAB40D5907656CAE0CA0780A
7B300BFF2C61922E062712EE9865390B19A9E68082426BD1B64DFD240A527264
178991EBBB9338766F05519941546840440E36581874A117F879FF9662B29E51
6AA62A3662251D029F7F2F3CAFC7DD736BB0C4879624730577CDE39B2AA47BDB
66816F5C2444346F2C6CB57E619AC8C5B70BCD5F437BF4593B1BCCFCEDA9577F
B496F375478EC7C1256916C49537FFC33E9E616DDC025B272C59D66DEDB224E4
872057819EDDD00F9AAA3AE7A71846D905AC465F4CE315F47484186415BF76E0
45E8814A4A22181FBFED15954F01DB19D0B2DDEF52EA7D7762F68FE039EC829D
62D360FA5EFAE4289F637B4493EEB0DE4770A31BA726636B1169DBF0557D1D63
6BB92091257FDEDE7D2AD99BEF2560081EAF510506856C1ED130F192EBD5EEE1
F505A50BD00F43B715F340BF7D754C68027F3704FD5FBE49193410CD55D50BA9
79A5ABF10AC86411343D10587A9644D5E11EC38B9B73A1FBF4C9A94047570FE8
906909ACAFEA24F605D2ED80D150579B4A3F152859A00579EAB05185F23606B5
5BE8EACAE9B4783B9850B34343F12C10E7CBE20309E9E09F59A099138057A56C
D8F04A7D2BAEE2E8AD737BFF43FF4ADFCB2CCBF427DAA083510674B9AC180261
092DB8C5BFD39E6DB00E0E6E21D01B8D6EF6E4D39CDC69359BF779E6CBEB9804
1B197FAC42C613179CF50E4689A0E4DFDA9DF6B019BD5FA7313A31B7842DB4E0
77A781C06D10B97D8DBB73F2F80BE12CFBBE62FC81A8307A8FC50D5B81C56B5E
044252207B677EDDFF09A727EE02A5A68BEAB08D6A189357FDF2D45FE301CA27
AA6216ECD84A067501C7190CAF1634DBB67A921ED6F1BDAE0B2C4D214F3F7A00
621CD802D7B584771199CB163783D737261A35448A76DB9ADF7D60F914A1D5AA
9D47027DBCE94F2DC9B21D84B0DE33440778497F92BCCB9A2B6374EA4220E4EA
42DA27246A4EBEF436E9EDA93610B5D3051B2DECFC0B9A47632A65A05D02111F
32EAEDA0EB684B86061A73148A13C4A5A6122E6A7CC79B142A345FCE339A708B
1572B95F876CF97C18B326C5A7BCA4AC338A28CCD3D97441E044DE1ED14B1D23
90B36E5A8B62DC6CF3E7DE9399968C41116470765BBF8ACB5DA9DF9F1D2D4174
9A9428807C4BF3F08BFFD2391900A1FC1CDE602980D48DF8C360AE83DE11FFF1
D03C99B04ECFB16888CB82867B210F565BB85F2186F9AD5A2E80C937643EFD19
E1C5149E8206EC936CCEC6BB6DA39D68F6008A0B05F5E5E3D9F9632085499954
600F6B21114EDA6115A8832B06E17D35CB46DC4D8F40C4B6C6B10D2EC8F1920B
F56ECD65EB04C4849D5CA2B9DA0EEB3ABB6E07AE3BF95C4A3A8932F77B825AE7
642181F2B3016C2992D7E73B1649B3278BF062FA279BABA8F1BBE01DB39DAB07
11D7D516C2BE385ADE44C5DAB10D7942444B13B230A9518709833E2E34D18D6A
571225B38096E603A3865D392686137EA26FEB07208DA2F7D89095B31CED3185
E4C53C46A7CFF73542A9066D16824E97BFB3873047377F1154BD9C89380F3AC5
F38FF3CA71199B91140B74CD13A71396C8D4AC194E5F662AFD0F012B8E0F9A7A
B6E20E8993417A6D061C4C709B52021D7E9E8D26E6998558ED2B16BDBA18ED59
1231BE6393730E013B9730A46AA0DA87E3EC27284029621781BD57C93FF19E47
08FB3C14CB6C3C65F035749CDE967A6D542CA2AD084F78EF8D6BCFE12A8C39BB
3EC94ECC83E87B7440EC4CCBB67B4DD00271B5C11B4B6798685DF9CDCEACD1EF
856B2C316AB23BE8CC9CD647510E7033F3F426BA29BC3CF0027FE3997D6DC772
0B90A9BF87A8FC09CBAA77880C1A58AE5389CE3988685012EEC6524D86EA9EA0
3BB616D6D675544577571D54E9FE68136D876928F0BBE87C2CE1B99C62D14B6A
10F8AC385BFF32A0087236DBA1903C88B1D539129BBB494944398D834E527914
CE930BA33988148254534D74084E028A6592B2F5A90E023B88222494C18D3AE3
D2EB7A3C1CE3C0A5F399E341D20155E3C8BA18888A0F735BA0468954528BC93F
4E8CC17749992E47517B71FDF26833C4E92B89AAE9964AFCC4FF4BC074379FF2
58138B62454B2DC6E87362E4558F3997150427A141AEAE49B748348329BC7055
4D70268E2C183F8F3381E02EC3570A027330B8D3EEA08951CE11227BFBCEB1DA
5083F1831D53D91D20428E5410A3F8590B4C599FB4DDC964B573DC14F04B5ADA
E11AD552CD252FEA650206B350AAA620438CC949360AEA852EA72E5C66B242D3
D475DC23CCEFC2D96B0C66DA0E64653A311A8CAD20C684E3AE0FD14D8A588731
90DC579B14C35BA9D7B664BEA7E7D3C073CCEB24D7EC0B3F6B6C7F3DDADAA62F
9B396437B65592E73C61A2DC1FBC3C0CE148AE0888F20E9B075B477482925515
2FAA7D8A122780B141F2E169D27D21D96AC49FEBEAD8A95932DE7556477EEBAD
E34933F1F76C00C5A8FE4A682144C5B44D341E60DB5D0A853FFD8100E107D327
73596743C7B681D7A60153CE19007CD69E4CA2EF608943682FD61E6D07DA5D37
F709AE0AED5D7CF6311FD4D70820C0BF06FBB06A3C83B4F8030EA2DFE59CC5C5
621D3CF806C898BCDDE7CB06F30A4BA0DBFD55C1F5BD0B0AC42042D8A010F70E
F9FC2EF9BADE61F198DA7158FC8596147A04018A1320769B22F6C184A49E63C0
A59A6C316D1BFC71CC81B1FA6AB762A2731FF03B04D73B691BC9D80BC1D987B1
3C15DC22965527B94DA6AA517D773B72013BCB449560FDBF0ACD1A76DBCA8C8C
7E75950DC6503FCDFEEBBEA50C47272D8F146AD9852B402FF116641CA787915B
504B28401F6EC080729E080924CD496630E2B695A7B6FAAE182304CE179D3E2B
4764650B0A20508D4BFBE4523AAB6A4E76672EF78E87EFF3CAD3100D539628A6
AE2FF58305D78FD60A179929360F17F612A6BD1F941D04ED3B361B7EAD2850F4
26EC526F7D0637FE8D3B4AEBFEE2A839FB365DE440A826776842B427B6E4D952
88460631A6C1D09DC429725E1A20CCF52BF2677817E77333AF099355156A230C
5696ADED28FE6B6162E25A81DF4823AB839EDF815D2C7D7EB78E58EE552FD3CA
913B4C15DF4A4BC51653FA4E3F9C9200C283DAF19CCF88F4FAF6240EFCC6FF5F
41AEC5C26FF89227D03C1A7A13B882BF317FF8EB14771A96BA73EE105972CD0F
DC47D1ED219582AC04D3F3D2F4A40B866AED470AFC13BA180F3EF63FC5316400
732E4F271CDFC5E65E605DB4A4E80BFBAB0B1D796BE3124F5860B94F50E8AA78
871E74D7DF4D28C6904DAC0A0982236A1DC4BF297B75E73D446B75B005377A61
3AC0357458066BD8399E3D5B69045212D84963AA74235DB5AB5B2CD3D6B52EEB
236A47A36D71EE212FAFDA5203FA0A90956333D43A9D5F73CE2AC03EEA721596
6F4BB865D2A154B461AFFC177451593856BF22FF3FD8D9C5851786BDEEC18CCF
2FF7FD0116D85D5AF706F0A30AB0453A8B7B376329CF77E536DBE03D444C44FC
0A5AFA6F45228CDD68DC92F9090A610A9A421D3B464571D1EE84A022D85B0152
5F6925556A474054FBF4A1768C823F0942B3EE11DEC02787A9118A2275A577DF
357291A846B6B64FB0EB23CAFE9264F2BE0705339B0B711C95FB86399FA7606A
97942A18FB29067DC01E8AC09D7308BD3BB3906B56D309B11FB1ED17E422E895
5682A3C239F22C6BAD109EB5F47426EA5E2A4704BDB56A60D914E98B8F9D67C2
97F01293E60D7093E17A74E61DC4869046B43D277498B0B192FFFD12B0DA6C31
75F02B494AC9830E928A55771A5907B49EAC5D07A76A2167348781339CE83902
B5D41FBDED8FEBE4D6336D0A0C01DC985AC6F714E7AF4FA0EB3DFBF98668F9AC
3918B5025F12C07A9076C2100D85DAD4BDE4248598672ACB124FBED658CE4C95
F7A62A75D5A53E92857A6D1C0473675F7B97BCEEFAB15F19AE5AF99DA0A86C4B
A408AD4C0A345DD3E9E4F267B31230EB2D4A4A1A6B98EBB9A594585D65AF33A9
D3A8F6CA991EEB2C02086AE73CFD0838CBCAD14084C429FB26FF3616B49819EE
57B026A27FC1BD1C132B1E9BD8BBC15D09DF072A05B84DD25429F124A4AF8CD5
A07945BE36DC8D2C95B808C48BF569E0ABF0167C0AAD688AEEA705B6A6205DF6
DA2ACF286DD255969804A9A730241EC95DC738641941F9EF3C38D2005CCDDFE7
EACB87BB4149A884333C28BFEB13CE892CB93724C17DA735B128EE2DE29C9B19
F47DE30B773E4F7BB4C326499034675E643C05E42535CB9D712A68305CDA595B
FFB0B3DCAAC50DE8974D826D307965D35D6835BAAEDAF239FCC5351AF9159F65
95DEBEF4C312CC4E4FE8991FC76FD4E1F8CB8D32F93EA117CD23C766EAF3AB9C
ED373CF5339BFCD8A5570EE38C21BA34C4E3C19061DDCDDC76AF2B01B5EE19B7
8EF44054D7C69572FEDCF920F748C18B1279BCD93E8659121B705DD16BF70526
4172D74F47D7FCAD3225049FFB3754E3FD50D511F514CC14ED33F79B2F5B7584
CF7A3EA7E6C61E8960790F270D045C0854BB692F16C9B703A41B53902F5CC0FA
C077E42FF2DBC9182DF6FBB8720EE2B3EEA44229A8EF9212FE620EEA14F0CB2F
15BF9961B4D782FC0CD430DC0EBE840ACF7B85ADD1DAF90DB74E6016B6794557
D4A716574711CDFFD299C1F8FF9D0276309A5DA04BCDBDB417B41C56D6EA519A
E0065B0601EE55C305D84A7DE93CE69CEBDCAB1A30A2C2AA6548D53E814DABD7
87251B7B54684F82E2781ADEFED4E70F3ACB453DF29B9A6194F9A6BE4AF9CB1D
BC92183BF4B62BBFCB80B13F24A4BCC0A034921BA338C7B7249C7CCCE2E79597
A02CF5C9CBFBFB5FD584531E7A5F04F296FF252D28EE5459AA49ACF402283839
B97D62DFEC4ADBE9EEC86D440F086F06FE3649A392C098E47F4FE3F239ECF235
5935040FACCB3D7E4869D7540D91F67A749A4E3811D03AB814A96DDE75A46194
00DC4894F5B2A556137CAACA3CD10A5A582564C98E67540749C378F9C294AE90
6C4A4F5D5041A17A306DE08754D8ACF514F839C54C1C058F039A11D063500563
3027FD3FF4B8A91E7095712F2C90AD5A5B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDB75C4BBA5F472DCE1072D4D4BC870
4125BDB8485E39CC98CBF7840DEAB2CD93811DE4F0374833E2C4E3EC14C44814
7EA1144A970FD831641F48AEB0B2ABB1F875BE95385CFF06365DF060A4894A4D
9B431A471FEA922D0027DAD918A30005C31F1778163305AA0E74F6493292AEA4
D375BD8D36F3DE102A78417651AE4C0573F12D04798071551896F2BFDEDCFDC7
6E1E815A6D94820D0CB36EE86BE050E3371B1BC6AEB6EFB588E3559E2E7184A2
A793584498E8696BD72D26FB63C5C9CE69033550EAE16A28B415A8F7488B99C6
C48D05C85FC96027B4CA4A100A8F92EC8497798A967943B973C769B339E0A25D
789991A9D22B455C1C5807EE2DA4D174310A8627A5356470BDEA1C47094617BB
0EF98074CE6116ACEF6302E40AD3194A97EABB75E62FBF30074B701B39665F4B
F41F78CE95F86EB0E0B34512888B67CE482A44888ADBCB212FF2983C3FFA0E90
45AB023E047EAB43652643F7B208519979ED23271B6AF2288430995CF657C94C
20DF80DB1BF5E73B33A29B7B447820B08DFDE19DF3C7965E5E2A1303E1863D49
79A4D16E807CF8648E8E6D21C498D274ADC1D97A103530EFB969DD821155C08D
026D6D6CAB0A90A6891CC6A139CEBFDD92309A2AF053A2A7CDAD63A0DB6D5016
6C927D3D083E2F6FFBEA9914BB1EB4AD55DF687B4C7F124920F46186D0F5FFF3
E574A8B3C5BBEC36409B7C691225359FAE9F0E8CB234A10836AB34663A141DA6
9B46D41A04EDBA48E0B81970D0F14165FDEF1C660FD8960763ABD872DA411842
0E3BD641F7E6910BE9DE38D6007085FE7FAC9B2935E66E18A783F8733EA3C7B0
84B4B4CCA9DFAE27B27A17C510E809BFE3CA8970E194489B1FD064B240C74077
4C344EB7C7E31BAEC05ACDB2C02467E1085524D86D5A9C8C2C12E4E92B62B452
06CE2BA7B16E5964E5F0533D24BCD7866F22E5998E2B5677F02D79A8BDB0B7AA
7D04474E75C7241742D44AC5BABC7227197CB865FB042E6D67F58831114FC6E0
CFBAF4692BF336AAFA0B7A5AE74FFE69202355474BC1A2BCFC54BB196129821F
84B02AEC078CCEEB604BF5F39840266A3ECAF568F8AF8CFA76772D207D868306
6FD5D51EDEB31497CAE80D5FF538EB10A6199B33F3C1173535E17C888449FC3E
579C96D321F56326AFECF8E97444753F21C1F6007FA4217D853967AF5E3659D9
628533AE56E65738D6755257F03DF774EBF4D0C46F9C2DCC30A54D6DD671D598
11D25FDA43865CAB8E8A20A9326D2B50BA210355E991C525AE6E8CCDE226F490
2BF46D68C5D1A8386267503CD64DB373B72BDEB2AA31AF46279B227BCF94D46E
085D6B51FD3EDDA3EBD21CB5B571D21B11723F5341538CC03D63132E388A6F34
EC2C5212EC73EC6AD482DA0DF439C56DF1724D566DB0C15641C0563F906E7484
6306E52E324E00D300A78B984ADD82BDCF69858CFD235685341F0D95B27ECA06
AEA1C214E0B628606711423149D9F393F5EC7F62C273D4A018471418D3F7BEB8
183EA2211316C0CAAF127E30074CC24DF06341FC891C28C943B570A7A38C595E
077078B206497B40B6CE001EB5EE7A9F636F046CC24897AA402C46B74A9FBFBD
CBCFCF477A2C30A72EC227B20F7286C43DF1DB154A97C0CC38585047A032B327
CD213FCCA62C7535209C546D9201261AA71B05F2E629B087B93D76EDF6D0CA24
D36D578A8786980F7B2F5F3F15BE9B78D0F4DD3B3B23D69A58E2C82C1981EB8E
1F1D5F799840538DFC9B186642C1FA978B5AE27333356150BF28ECC41A6A0A5E
8978DCB334435B815D0AF22790EF007BFA2F130478C2A046980E9969918916E8
7FEB129CF2D1DAED8F29F582ED86C5F081605417DA88F96BD9BD179DDD48B1DD
8E5FA37ECEABC0AF8E5A1C304D5FD0585C0F31EBAA9FB441525882FC92BBB6DF
C459584DF61BC90EB32C9ED1980C4CB7A3F17BB87F2FF82DE2060102A1F4D0E3
DBC02DC2135283D839A965FD57B0F9A0AAE6AFAE1F38113D31032AC8A1BB77AD
17A07D32C698CCA64B69FEF0725CA01F2DA8A5556CFC8F5A94CDDE0DFD0A5AE4
9C1E6806428FC66CAE8E25B3398A1DC030F706A08920118B520178A7942D4741
1ADA022C58240C6F48D1ADEC2AEA555B203EC73BE3FEC249EEF4ACDFA6E4EC67
D5BDE3B74AA5F9DFD39DE91FD2F19B0B6FA5C4B624B88E016D81DEBE289A024E
1A8813C1FE39478EC7368FD7313232BA442E9EA8241A3BAE2F74439FC4247399
A3857D05B94215EE8315035DEE578A459B8DCE76CBD076C08562D3AA0A42719A
779ADF8B26C5C3BA7A2BBE190CE20C346C9863091ED094BF23702980DC3D91B6
65050A477651C2F4EDEA0CB1005D9C330B8F176342E702B2C1CC79EC6FC62E6E
928065D0CD6F5DBE1E138618E9DCE7FAB82D3A5247CD38F0C8DFC61D9996A8FB
F914209AE12B6FD4E65585DD5741BF8FA5615C67DCE3740E009C01C4CDC1212D
0C80BE2F454A7D8613D0CF64AC5BCC7FF58F9E167389023CEBD2F0E3EB90F50F
D11EAB33A8C129938FA16F33A24555973303D8CF202979524864E4BC8AD94AB8
06E96E4BE81DD662C6717E289BAA748D769265C03C0A3CBEE6240C0DE90646E7
AB730E5A33E964DF6C072EF4701514195A43A81826D8B89CC1EA0F13A589F452
936A798BADF461C448C5480CA1D5CC3FB1ACFA385D9CAC57566163FCCEC2157A
FC8FDDBDDA13E340864F2D181B83DCAEF214F5FB004EAD6D163CADFF36A58BB7
60E6EF9DA2B8DBB44BF54B6B810CD09ACABB0532B101D2206EA79309A7F87B1F
805688CDD07FCC210033B0316FC13A50F6D110323B8E21034D0440D13DCA3AB0
CD17E5DAE88D33AC9465A5B60B7EAFA1BA4C17BF640D2AF1E0F406AC8B4ABBB0
48A0A1DCECCEEAFB3D82AA6E37829725369DA8C0B520D6F7E7DF23D3D30D7DF7
4507591F8500339B7E4E42802CD6A52B8964C01070A680E01903202A5413E03A
DA6A5BFA30410D7097785D120A3221EC7B65733295C5061ABC2908E0093C0B39
432A4AE827864CD1D0B7FCC77CB741433632A244D2CE60DC25C333A133A31134
F4B1EAA5683DFEC0732A013ED26E39860622B36A2AB5F41BAF1D86AF280D161D
335BE2A9F5CD00F892B074E83ECDAC531DF2DCCD1BEF4A575CEC192D9566130F
1EEFB1108BF23E74D687D52C209F186812054A69392294D1CC679C9E07C16F7D
1A10652FFF73DB49B67C3AAE7E2636D14219C8239C94A3058730D0C96393FBE6
D7DDCFA9CB0A2B5087DE290EB61B9E1F54B4389C7B5D8200202749A20DE38E02
0AD309762FA13615F4E68DB6BD293F44B8CCEB98F747AA922692D461AEB09452
41080867C595E97D394EA8112939EE96313A1FFE697DB855EA3AC238288C127B
BEA082DE33FA87A83DAB9E233065E1AE01528C75262EF6C5B60BD81D2770945D
3D6827DF49D5A06F34DE2335626096EA26D57B94A928EC9402FDFB55C550FD3B
67A0094913958D22575E85F3E667EE46E0FA73157A7D2B86A0885D0DE7B71FA9
8983AC8E83986EB56A641FCE4DB386E16B322AAF0485ED668F9B6380CAE5E75D
F3B8B749E7052BFF9D02DA7D0C3635D75B805B4F3426C6C6E12E081339CDBD49
AE7A9BCEF469E030F44776078DAA51D2E55EE4325E2F726BDED2B572EAF23F87
D1B4E33DCD967D167E90C7CCEF5353BCA7EF8CE6151D158AA7D6F4DBE64EF8DF
DE6664E363591C86F9882372BF002C07632B519C1E5939BB511D14C6F5A1FE46
E885881F02EEE710EC9398BDBD3164E8FDF9AE09FACAE17EFC8C1E9BC73F13BF
FCA244816CB6ECBE72B39A04D306436AE4944965559A53BFC7CC1CBDAE2D8231
BB7CD198E97C7598CC211F81404A39FDB273B64ED685BB2F05E6532BB40A5316
05C233BD19F3DDC54F3DA89A38A4C935C8DA10949012E5C307F7C8B4778CD3F1
9AC7CD4C926321303A6E550D7779D1096790EB7D8991E2D2BB4E21A11C930A8F
DA648B919EB362171B822111DB57BCF53EE59AE386DFB06DC6B8F2BD793657A2
E0B1E46EC96B6FC51965FA70CBD682E7D9A8DAC08CD86B897F7AC9189F5AC7C5
B138BC5CAC9AB8948EA92A571CAB6DABDC2EC9F457A65F9E24F39CBEB6EF2934
98978898DB53E9E1653DD01511DD52EF8C39E8AC5133861783867EAA78355962
D1941C5C839010BBC365F61BC0E605A1D0942ACAF1E546CC807493FFA2A96BE6
84A4B6BAE6E475853C105574DA8BA6CAFC9D3BFF745E907CDB693B176FA2E858
31888CBFFE1793141991E1BA043FCF977D972911EE168C08DDDE4D72C2EFB6E2
424A2B46F6BCC0AF48607A5046746E9511B4BD0303136572CA5390F9933DF14A
CA15022BBC000F4D38152D98672DE7C6876E2E1C0EB34672AA7DAEE90159AA49
D316055F12C89AF17686542CC2D5F3EA80DB24410EB8C957B60AE08DA639FAD6
277B8DD67B449A90A62FEEEE9495FDFBA62DA30CA07AFFDB3C238C5F02254E2A
F4B5C489B6BBA87B3AAB2ACDC44269FD4E9F6F577FA392509FDB53F821E82C25
A36A28C4D8C59AE03F9AC74F14157AEF988E9A9F73E32CBEFC55C8592B910E62
E8185E82F00F8563FE73B8AB1BAE9222ADC19E78E5CEAB610A4F643DD143AFCC
2C6592F46AAA58D46BECFF50C01BD4F4EF77F2783FBEE4A0333AD0D3897B1A83
AE9A76A5445306BF76789C3599D4D5EF3F237B44AA82F3294B66ADA467433653
168F52F1745F898651649002EAF0A9F22B4F6B519FB73BA25718D820F198E5DE
D22087FFC22F98D3741DB0628FA575A5981D05BEC38A664D4ADEDF7B74129766
32DE7ACDC61704346B5B885308D391A1718A982AAAF45866D8D637C573B8A715
40EB627BBA3D2C058488C29EE75AC3FFE9617975C3D2EDC2E7C26BB3AAA25C00
C2C7494B58B7AB04FBCA4ED25EB096A306124E92D29122FB81EB16C19B13D42B
A30DD13079BE71182A6C8CF8D257B94A5DF998A44E7240195C96D90AC51474F6
19AA726531442D669A86D345763C5668EBE64D65519F28AF29A59318CCB6C58E
B5F9F77C0068C484C67B3F572FB851351F39B7EDA53A6A864547190DA445DBAA
C581C07C9C83452E60A29DDF1BF178C3FDD747C2EC0344740F53E1C1AB5F600A
A983DB5E8C1313C6D8CF59C91749C5C00B6F22473C8A133238F6D23480566E36
545DAB1BB0423C34755F88AD2487840141FD4C57C95F8F304E10ACEC91E65F8C
929000F8C0C20600F6DDB23ECBA603CE654F8B27897C053C6E42B10A7CB8ABBD
6939CCD80529F2B79B46FB9CF7A9F685F2DF499AA4436D5686115456D71E2F05
6EB3B3C06534B506C5042EE886A326B18A32DF6C0F26CF8CCF9A857A8A456798
1F634B78205B123733610842E471B5C2206A3073230FB9529CD1C09300DA4C33
A238CA19B67D701C071BAF5F03DA7BF2601C0E7045B930267F0E6A00A52C0015
FF75ED181FAC007EA6932E1CB09843818E01189DB691F4A70B95334C2C9D2C44
69FF17C1160646CCA6832366F53A51508B5D2E4B9FFD268B87AB50116B04C25A
4E5B7DD582787F6371AF9F9B49AEB06A762860EB79CE02209E14A11BA6A5BC7D
A73E9ABA58240E537E6F1933CA6F937C288A46F84C547DBDE0BA1898BA7DED0C
938D576BE452F77CDA41D293F8D09A624423C0C9B03DBAE49C623CD3DF5083CA
985CA1452D796ACA7D162EB092DB1EBA0C1DDF6E61AF5723C132EC4E633CD693
043071C1EA7A870EB6FDD7C82CF7B576F5A29F1837282AEF228FD4E56B4B14EF
1E1A850398DB9311F103D327AE71972444B55C0912E5641428336BB88F36A7EB
3915060A0D29AC436AF3BDDD8CDACEE2A8E7DD60D93627FEE057B1351BF5739D
B35F2F15B66592D3B1BA80063E35A6FCF88BEE96C8F1ECE92CE852BCE40A7F24
F397DE449645DA24A8335348336820E2303DDC7A17C70AB6FDBD39887F21D70E
1B28E083095845CE528155400106300A30CD7AB167F8259FCEC503AC5A3F9D96
2D80099DBF658A042551B0799A76C6AE571BF3B062858CE39CA57371D49583EB
7FE30C4F72FFC0C1937BCECA239F908D46C2DF0B777189A401107C02C8ED0588
268EB01419A55C250C84A7ED5BEC4DD7153C286E8D35EDE40CAC78C1DC9B8581
E1862E2FCA2F579EB744CC23E12D95C899855E613A9089386BC73FCADCCE5943
608EDC6B8248D497B872D5958BE56286B130CB2FF075BA5361FF848E766DB59B
9516754B21851B2169EF25D6478314CB0F64CF3B66BD21B7103E314470BD7E64
EC7A62D5AC49CE1706A33CCB741E9140F6423DD9E78BBA7D4F26FCCD76B7EB90
C3EBB3655EE602C1CFEB0E7ADFF7DBE2AD88CA428B76F0715DA5A712CE90B589
0DD8A8C8EE19A054C05829F72A80A3380AA884E7CB26A2C381BF76128709DD26
31276FCBFE0F4541F5A6B7ED80D17E41FB72715838A270FFEE873737AFAF7E80
F2E4F940D6CF9749CF4B5BE79083EA52643EF37AEDEB09DFB0B956C4A8172BC7
E515967D1492D0A90FF8EBFFFFBB7464003E57BCE16F800ACB43B263711950E0
AB2E9C5730281D8F548D52F85056CAA782B3B2BA8A733421D5B94E0C5EF66E5F
42314F93957AEFC370453C489109211B9E654C937AFBD042DDEC1EBC79EBC68F
F97E5BA3D5C7F97D874C67EAFDDAF5227187E0257F9AF26A06B278BFDA59E1AA
FF3F8C79C5B6C1CE61BDED6D181856BA7BD5A80B66799DA4FAE9851025FAD337
9D7D0E7AE25618FD9DF0AD3961A75F6ADC17B9914294E56D82DC6FB560F84F1C
BF91674886E90F307AAECA7BED77DC6C8671801C700B3F0FA41EF305898D9C82
5B428C950DBA5198D8FA91B0B3D9C71EEDC355A227FE07FB3B6C5DECE1559D03
557D07AFEEA63565018C51299E860EBF0AD679F717E6E7FFF7B1BFE2E98D8725
73C86536F65E65AE0A142F28AF2D8FEFC29FE8E006C330F4FE27CE72DDE15FF6
E530F79D29D5AB7DC23CFC1ECF1ACD4867E59B58C6D9BAD09FFF98C3F10A4344
CDDDA40191AFE634714A7611E70D7B0369590C3F12856D61EC35EFDD86687535
0D6E06EEB91ED34795BC92B16F691A18D8B28A692F787CBCE267B89884F0C293
390317C895E6F1AD94B59B03F1D02F31C064A3C4B0448B94000FCD0D07E0634D
699E6CA9F05BC79E7A0910E22AE17230EAD6B05AD28D408686352A24FD5180F7
5EEF61BEF21C6CA5452FDED9262F880AC266DEF8CA03BA84311B1859B42E7E41
E8E2A6FD5638A4476EF954CE4CD52F5A6BE457CAF1DC2CF5EBB825558AF48AB7
C4CA6301A87474DBDDC7CCC6004ECE60A33FC36CF6AE864A217029655B592584
65987196192FAACB98CA54459E1E9A82E658049ABF6DAA1783D7C7CCD90D693B
2BC6DC7635571BB2212973644C0E08658079D3D7368EF3785B655A2A09E7DE1D
B1482B12DF2E3474CE5B955A21272891B69D5427B111F7A1A3FEB80A1D8F1F05
DDD1F3E09C83933DF86D37BE2B9B80161C3E30EAA15A541942790EBDF1361716
658BB281D5E506C3401F545C9AE69E81F3709F7523E4941D0AF0D2C6DF29BDC4
EDDACCC1DDB5DE8AFFF7F51FF6D421195FB50BC27AF8E382771D51A63C044D70
B5366304119E9B5C534D272E5AB2E23004DECCC1BD318BE138B47F7523025758
0ECFC1C693799023DC3060C4B5BB16E8750513A27095E1B831ACC2F2EDBF7D7E
C9EFFA9D1F1C102EE3CC999F212EA44272A4F94A45ED2ABCC1C0E692D48738C8
2B03F69D1F86373F6D4069680884BFDF082ECDC628E57928267D5EBE3B642805
A63808AEB18F2D522ED193C8623E340A55A5EAD36FDFD810CBF197D55CE63F12
950167935869EC0E7CC3CEE3356119D1E4BD658E9EB5C64396D14E541FDA2EE6
0499B0CC5EA988A2944C7FC65D53B5A106F63E9DAA0D2E6001E9305D4D6C4390
6892A62E27D5B5C693F734786BEC52715E496F7050A16A6C62D6F124DE122BA6
34B338AFE4F1EAFDBE9FA317C2D84655C143C4F74DA06BEE8DF199C29064CBC0
503FA4BCED3641265F815F8E6CC43705EC5910846946C8345AC821A323AC9147
4BA2A236D34FC43006C79ED4C963C7A02A7F3DE13338F52F2C933EA2B649DD1D
242FAFB7D2DB31CE40B7477B87FACFA5875511493E68C762C83A6DA63D6CEA62
1C8FEF38348CAF2D755CE6C3090F5AA6AFC93CBBDAA93953F0A5AD05CA41D637
5466FA0272B67393DCBD86FE4CD039BB409E76B451FBB44FF8C272FC1493F1A9
9DDB2E1FFE7A614CBFC8C8DBEF05911B631E9EE13317E8FBB485151A4540F7C2
FCCD16E95C9143AF929A15D06D5FC36307D8A4372B8B81071A62AE7E7856ABEC
91B8CD1DC24AC1E0C6E89A633C312BAEB63990C31F1EB7DA809BE9F612EC5379
008377117E712D0EAE7E591BD4E62977E1755181834B202EB6CD7A4A50AEED28
24980D3B052BA6ED7645C89497DBAD092BB709FCF1D2F42F6F1D7FAAE03EA53C
B0EE03DE2CE8DF75159DAA52981EE2729390C6BB9610DA72E41FF192AF561E7A
FB4C6710520C895701EC10BF079C1162285C527828E5E203F328AD955AB43398
7B22953313CE17F036C10A982D3D5A26CAB55D1F43B9F5C861873B306C2558B7
FF166C507B492A24F9FA58BD9F61F670F64202C675ECB0DE30D83E096C107AB7
E3A91418DEE48319D2B7DDF089AED3863ECA961B1EA3EA711CE9FD9DA629FCC1
5DEC2AEA8C19835FDACEE155CCB543F2B1F8FA0121CF0BAF170F20B33BA72215
D28551A854FDD2DFB87F22914AEA20CEB8E9088E8842BC3990D9B0583ACEC6FD
5C6EE6FFA12DAA8E115F0879C6E88AF09C8E66A6F20ED07E09DED5E9879DD154
77611E8C80D6A698DB73DDAC0762468E45861C2213B9DA0C6C6DDE7E4D373833
7A45FB11AA25A42DC3FB28A1B628F3A90177800098C10A2AFC10FA33D5F39264
ED6688BEE5337F0AAD05D52EB69E633D3B39588A6F1143DAF25E8734CD9F9227
FAE260AB5109DB94123ACAC4F056FAAC12645671725C1EC2AAB2E46F2AD0D6D0
BE07680225415ACA1630F08D708FCFF8FC86B955E7936A451696F160E5990BFD
EF78BD5B80F9D71CFC394C928ED8A136C05A58EB50F89E296BCB7AE60C952F88
2E4F28562D02350B98BB42BAD91B49E489CE28996E5F8E091D37B602762DDBE3
6149406B96E86705E3EA6DFCF30C19F49EBDC17F49804DEA3F9B9B490C42D8B2
A27D0F7DE20774EAE841EB8C4560A696AE042E1545BEDEF20F7DE790C33A3341
9D4F15251F09576C023ED491D55B15E4C84AE6E32B58AB6B54B9C4A4FD963B2D
3882EBD7BD73611BAA072F4BEAA26108D73EBB377A555721D258DB8C4D375B41
4719D1FFF75131688C3E647F155FF998337432A326ECCE7D869D56A195BFF01F
B5C81D720637D353DC262411D4F9EEF4A3A38257C973C7F02AA72C1136354165
D651D2236F883F8170364E1DE1FEC96183EECB2F1A41105DAEB9AC7E77DDDF49
5B707445E43F11298F2B2836FC9F145DC459ADFD781E8858440D82194CDB01A2
CFC41133C69AD75946DBF882555AD63F2CA0FF6BE3B8CC09301BEF5ACCDD50E3
2725508D3091C99DD2D487D033EE9A75B7ED9E43439B6C76FEF94A66186C1775
01453CD3FE3582073DD86F044618111EF64D57F39DA7E5CA0A68D62BF6FC7054
68B2FC9E5E3A1819CB2732460837EDC62035D7D232AD000EDC44D724F30C7E7C
01CED707EE94B2DC85BC6194F40580A528AA31EB86B25B6F4766BB606E873315
1D3FDA0B3BB18FD23AE9AEBBE0D0D3F6724561ACB8D1BB8CC8938AF776B78472
DF419022F6B4D7B1E210382DB0321D08C9D9FCF0AA33B2561867A9E967A54ADA
3F4EC9DBEC4060C598B35F62D185F051EC5EA7FE37F49D7B9A7192A22C5FA5C4
DBC2B2F72F6D19FA0C4EFE4E73FE9669F35AA8D35914047555BDBE590514A8AE
02B0A9DB3AD7B7D5386B9A4CA4DB6E0CC76939E99373CEBD7DF217D01146BA5B
CD2B1EEC07707515C98EBDC2768107C74AB503E5520890838E18321583B42DE5
E0F9DA0BEFA2319193ECC98FB43A323F319D95D79BEA4279D69F34F2B385D51E
598AE056AD972F7DFAAAB50AD166D8965D0473EC67F68450BF5CAC4771C8D490
E60FDF64C03D668BB381B835E59D536EBB7A5094FEF8941E37C8F8F06A6DFD81
BA2A880F479A9D6A9765A3A818D08949856F5EEC7A19C267710C26505AA5DC42
324D47064A40D75F20829946383F8B8A25557A6C4E62112F34BB6E36B23DE7D7
4361F2D2092A39BB395672D70023341111A827A3E27200EAF1E520E0F0F50C28
E5CA0C01FDF932656746AE7EF3052DBCFCF5B5B5892B5517D9ACA0526AAAA48D
EBFE73376736E587660CE28A4222B650362BC8153869EF2B04A98643F5BB2431
D3002ACBFC33ABE4F81E46A30FFC216F41F37F6748B63B0C6D536D5A36D575F3
5E8764F50BB16457FB4A29BB1F25F7C40444E5891308703AB01D692D5A3D62C9
4D058BF4970304987897576F3A7E7351E90C119ED198CB08CF9921AC5A2CDEB5
7A6FE8E289A2601DD55E87D2DF8B25AD0EBFE1BF9C7DF8A97B2915000B8454E8
61574C95DE6FDEC0B3E1E6533038BD2423316874130464D8993F0588BAEE88C0
26659B1CD5E42AD423FBDCB21519153EF5967FEEE5D291FFBF5A27D370F0EEB2
33ACA91A749D776CCFDF6B966BB727F24E63C698C9ED95D5CBB76399B481C5E2
AB2C7535209C546D92C034121DD494E79A1A08420694F2BD3C477B2C7881E740
3DDCAB8837EB69AA67A13168F555B78D3A5AA7E26769D157D56CD9D23FB6FAB2
17AC5A76CF469DB9C1492801C643156BFB71684A506603F057F562B182CE1CCA
E769F29678C9F7FFE59924A6448204540C34DFF679A5F9C733B7A31F49A4B705
DCA453B73E28D0BAC18FDC1633377B463768F06C6FBA07A8934950BCDFDEB291
13B2639659123C5B049ABCD621143ADB5870BBEADFF4366CF42C11B48AC88796
C9EE93E11FD23D4973C4053F6840C949737890B34B90B0CA430CF1DBF89C950F
9E4CCE9C540E292F66C8100C47DE84CCC7A493DD29984942CE3E5A8531850D4C
0362476DDD1A40AC55C9E56968F918C05CB052E67AA37B4B1A2563227D0BAA26
E67E3C0637A86136073FE64C27464E08489D289913EA9062672D8C5966D4EB78
5EDA66526AF31E75D057307A358B2EC0B12C7C3C0C60C984A0B683C11466AFE3
323A0F86A72F587BA9CD604A4FAD2925C0A56E5D54DB08890D9C423F78674340
D9CF4A20522124F8B7DE31E3355D2543CAAA7FD6FD9C5D8378BBDBC0333BC119
A487D2CE70225144EF903D729437709383B34F931A7188F73D4E146B8AA9EB15
949F1C3976768C95CAD8A502195948C6CA4FFAD936CCF10168EF4220985777B2
C188A08822F3AFB4B2134D47B8902C5C67F0BCADD4FAC687B2DCD789D4EEB759
2014313F08309F5C80D077D3F6269B9374327326C807BB5DF025F9FC0DE8183D
FA941E33DFC1257BA543DFB124A3F4F747F1E909DDC25528903B243879861393
C63354DCAB909051F252C0A5D622C1B459D50B3E086C33CE367A71BE7A02A416
3FF3616EA5D86AE4BCFC80F9AB59EC231C47C174F179BDDE00BB1613D193A3BC
7B6EC649617E5858013EA7BA00B48594C568AC72264D7002EFFB9566DC8F4229
E8154DD6BD015C128847E64A71314D7D80292A6673AD827C914B34742744143A
2E677C974535D8409FE7FBA6BF1F247FB433C2DCAC929CA2C8F8E689B6EC2544
0E5C51AFCAC49FA3EF76B2685C9B20E3DC4F6C45810A83E123862DAE092D3F94
7C6BDC62A89E8F7228FBBF4441DF19D3924D68E53B593601A3325C7F49DAB490
676EF35DC8F9E8CBF7DB0CC6A09312AD65EEE43881BBAD6F632BF98AE77C859E
56AB1B10509B489EFE93ACB3C0CEEF2E7D9204178A623486AB1D2D1A624F58B3
5678E5C555B10516DA349E7141505B191880975416AD3F27A27EBFA924A38256
AFFC155444698A797AF4AAC12B0111834B6938CD5D6ECC91C53ADDD85AF53C31
055EEEB04F04F947C2F51ADE8E5642E895A4B17B6391C78F04F54DC7AE73C7CD
9D7E7C61EA0223AA575EC268E1BE192F7C3A6DDCDDFDCE8ECC3F08B56E856444
3A94BC301716C7A5893563D4D50F115D648C81F3A60020A4472457FA2FA236F9
EB494853601549BFDDD610CEF64CCEFF669E79ABF77ED5E76D3E211698962394
46335F867F921E5F5877DE9D4821907B910B9D67F1011207A64A1115E474D5ED
70CABFB2F9714E8C7ECE7C6A4D9ED2AB250685175ED959EA3CE0854A1CBA8B2A
710AD48223560A852C730C7918E34CEE28E294D2AD3090B84EEC56FBA702EFDE
9A10EB65109EDD23F05092D5EE905D1E904B4E7997D3F599AEE6F4630FCB7B17
ACBC25D7F9B3CBACB69FF2A67F5DDC2FCE95972CDC25736454C7D49477C1BDF9
D2C9677A83ECAF13BA6A923642F8D67968E24DC9F0DDEFC2A18393FD532C505B
6397414BFDF9F84AC4B9390019D01EABCF9B9437BE0EA52C7C680B69C720E9CE
9117EB5FE97C3170004C947A2C1B513056CF5C7E4FEE2524D47FB747F68D9B44
9F91F909EC1C19286FF1606E830C4B7456D7C51CB85638C2F4BD8AFCAEE453A7
A930F517A2A0B85883F1D168EED921BC1E7FD2845247E920ED7BC28CD0C9BDE0
3FE6FE71C9F0C1C93B1C6072E7330687F527E1B158545D6E5541516F246A8B67
79BD5918293B42C3BB7F601D180B7D6CA12D2BEBB44A71F79E683BB29BA1B005
778D69C4BD17FD8F199B60A3A0FBFABE167427F9F33368D595F870D7A040F0F6
76273AF94A1AE793DEFFF12E00E03C7513878ED970F9C3932EE9E03D9F157D9B
F7145927CF9C3029B50100A175124EB06EE738037104B38E06D6D9C11A8A3439
0BF62BAC26B19ADDA9F9311CEA25506BEE7DCFECEDF7DF2B3FEA080DE2A49AB1
FA33CDF1F2DB42B992F003D6E17212977A0A0EF73898001DB6B40B52489EB1FC
5A91FE145FF8C436B79A693C9BDC4AB506D60686DD54950E5532DACF4B1D9988
2CCE227CB9E1598A26FEC05366E9D43C267BEDB6259C0062187C3CA4DFBF598A
13257E2415A5822D1B96A3AD227ACC1D294A7F45BED806664EB8DF7B8973A5C7
697631D0CC5F992D3B94C73385416951B5B52CCBE9202F9AC6FA331BB5B82ACB
7BB09B06EB5D92610942463D881352645F8F7284E4F400D175EE7C79BB34A010
5375FD778C8C56917B72A00A61535B3C11912C2FCC22E75319AC6E7F57BC1DB6
9E1242C7B4827E4130D6D474D4975033899E535B9A924BA6697F91E603F12241
E2EB8A7E6A7EC55B6E6AB63C14EF13D65314ACA79E1669F382F6A706BF2D4311
A68A4CF3089AB48B0F825ED288DBC2934BA4A35FA3818FC1DE17D7454E7670B3
243EFF2BBF296A9B2734047BD63096D721CB4DD3222BACDD193A30A85EC3CB04
6D34603393EF1D6D5E001B17A8D8975936B5539C0AB0B628C3F63F4D274A226C
27FEEA10509BB6DEDAB46E57F95442853A24BA00BCB0B2F9B4BD6F0B70B560A7
88788C5EC972DB111BBB0FCA7819645BEB3BF1723B23D6D4DBCAAC03927F9F06
1A89A9E7F84540738726437F10359C16B0D910B9EEAF5C10EC704A6803CDB9BA
59B5AFABC0E659756ACEBA4A64DFABCB8D00552276BE249C66C6C77955B6AB97
A5871398FD3E32490186FE953293AD5002310787E3CFEA364E2D99942AFF89A3
C62199790095A0973776E2289D0AE02AE13C0A870D6D102246564EDE02E759C3
7C6BC4D8E7FFCEEE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585F432571654308D4F946C6DADB
C749697BAB2D5F893EE00D414E8DFF8A120E06EB945666270DE4F9E3D89D6DA1
14F05DDEBFE49BE6CCC36B4864EA2D6C769FF65FC3872A9C8392F13CDA64C769
32E4D6079BB0CA2E1A287BED894C08F359CB4473250995CB01305E24E6CA388B
D1905DBD0FDE48DB7E771BDD4DC3ADA917B1EC39BBF248770A3620A6D21921F8
463A93D29C3D8BE4F0C494DCA605DF9FDCCB72867CCD540458C2C89F7AF7DAD5
3387F100CB76F77E97AFA3E446C65DF05BE32C87D547D7AE952F92AAA1924C0A
FC64225692A6559CB3706CD60FEC7FF8C03DECB0F80A56FB511C538D01EC9423
AB332926FE60D241B660B370DFB93A00576F77D4DA319B068FFB6060AAF40EB5
40CD540174737903DE67E775663B85B3BEDF0AD31AD80035725506113918E5F2
9C3C662800E45BF5E62E6503FC87B005448A17FF1AA5117AE241375DBC823878
1BE2F98C8C73A33DAA0A97C4C4DBA825B0E4D347A04E25BE0127D82D914E3583
1C4DAC2B64393313814857AFF7B9A1E820720EC4993EC419CC471B55FD80073D
3B8D6DDC59C6DA3DB9B063A7C548C58576081BF82367569CC2354D7B725C2E2B
38D20E81C0700BFFBAD29E73A85071558A0F760B41AB559982262323161F994C
31A54DDC94C9A8E8625557BFA0C123C0DBC2E86BA465DAC7EC07F731E0BB8C7C
8ED352E0A1E6DC93E52AF793A4937CFC9E9ACC236CE307310AA50B88FB72AF04
F2704D9367231B1B8C4102A58FD6661206180415ED106D34CD0D4E15BC7C544B
48AD9D4C1D6980F5AEED12CA0A3B389CE279DD6A04BEC1A37AC300FCBB1C06B9
6F6B9BEB03CBB714C14F836C721D7D05ADA50E7AA9F5E63EB42DCACCEB2D1D51
2CE82BF4C7BACFBF5CDDB57DC37B8F4B616CE814F5FE677F1C43FD44B04EF8FD
DDE8BB62048120C71DD9796FF15DC108C49FA095EC0343EE5D779117ED8FD7FE
7735F42FEAE9CAD1F4303B40C2CEB041BA2CF596FD49BBB75F8829643C98362E
5DFF8D686C4C38E3197D40FD7E0263C5E12C84989D53EB4ADAB7DBC6A98B5349
27893682DFA31AF1544E5A4C47C2840A81E8B6583FD578DA521760CDF11B243F
84934CABF36510FAB855E4BDA6A34B1BDC6BC1C6F285F9BD614A00DE9A3CD2AA
76CDDD1615A97492080417282319232BAC16723F6AB14FF28B55E34DD20F2361
EC01A768662EF811CDCF4EE95F5041605D5F8BBCF6E99BA6F80C5A83CB861946
98E1E30CB9F072CD9F501887DF4F3876A8DFB28EB1B788EB351D5B3181FD452E
D1B23206999277DCF4094F14AB83244F2CFBD983F58202AC4D1F90F243CBDC1C
A8415532C46786445650B4C3B3B34DC23067B46E16ADDB37096AB12FDD09488A
DA885BD6C808D1735EA6532062585E2C48AAEA1313DAB2EBF47C481B27110C8E
5BD96008A6B533E7FA9D68B7EE0B47644B35841FEF4D7ED706F6B027861884C2
23247C65FA99AC139A69ACDE989B3FD5A2D5D493848923E60F7C67FA6AA80625
94F122A48C560B7CF6054D70678B01042D547F91A3D046DE70ECC0D1629B1231
16687E138490CF2F1B900886A20B66A9913192098773EF4313CD8AD96FF7FA7D
349FBD703CECF517E8BE682D617EE310A79C945126847769D6DFEED240805D78
448DF7E49A11B2F211A64EB78A90B5D4B23C6E38C9EE3260EAFD1C9B3BB1173F
7BD488B969452F1E3120A19768ACECAB37887FD8CC83AA4C7C9CE1CBFC3A6980
ECC0132D3E3E4E048EFA48CDA752BBFB2BDB48939615E8611F1F7005394C984B
EAC91D7528A68513CD9B3FBABB9017E6E279B37931B13D7B0494AEB0115D14E7
826F40A532E1E11AC5F13D51C894D53C87D1C2D3C5D7EFFCD4773CFF08285484
74134736DC80EF55BB1D5A1D7873601AB9FED85AE496CA8E5304CDBE688C56F1
4C267C1CB044875F6E382369F2B8604338D2F5D267F4977F3141162C6FBAE2C6
354FF6A9769C00988AA1D2152FB3658BDDB37C88A024D42DF89C8D4D734A0B10
8FD2BEB229465E8E9F27024CEC47C494C92CB2C82CFF4F9240D0A183FEFE0868
AD5FEDAB9AAF1AEF6EB1F20AF9FDDC5D937F6C9EF9D4AD0E3F3F3A41E513D437
0D03AC8DCA5CD347C816A0EFEDDD1C72C5AA9474EF42F36DB75062571040ECB1
A45073DA24B683E42EB93533DDC9C6B84A1A67487B00FC3021A342C62EF6D978
6CFC2B617CFE4D9D6CF0D0994E9EAF3C84446B2CA3E9973C14C292FC92D6C084
E9C62576FD8E54C8A931B38613DC3C4149B0D9A51D551281DE008979700439D2
AE870BE0128A1AC8FA1821C6C6E7CD7BC15DFFE3A3E3FE879488FF1B6C169D22
5B6A696EBA2DC0A58C3B6DA5CA1C968103EC24BA5D6DE6BC5E1030E69749BFC8
FD552B23677B40FC4E05B22F059303501BF5C1605D8EEE175AFC287E9C2421C5
F503A81258A79835FB54EE41B252D8B3F8AE6F3DC92A2A42DFEA9D8E10D903F8
ED1282FE5D42568EC78FB53A2B003007668A6360605E2CF1370F4E65FE3E1EFC
2789FE75A75DA4EFBDD20DD6C799C77D502C0E38DEF37312115E91A0904CC89E
07132589A0A6D5A7F00F0D102F19D9C891BDB9A1A84B68894FC8DFB452691BDF
259BC880352A92D619347F945275CB4A4692393F561AC3395F6D9B8AE4F9CC36
96EDD10A7E9AFF9E6C1E34FBAB88CA320500581EA0E54FB14E8E12311094E29D
5FBB9F6E10AB0685C7C24E70ACB8D634D9A0E0B63FB5FC3119F3A8FA7F3A5C28
3B7C7B3BD0893C1CB734CCB4227621D3749D0D07DDCCF2E4AD2D4F96985BB5A1
8AB971A7B494B79B25E27DE36C03DB4F9975DBD66960FA156A7A7AB7DC7ADECA
CBAB7FD08F4050DC4566BCC26B36F0EFDEF2A4E9454283139F432478CC50293A
92C5B7C72232E7E890D783B4BE116BE4ED5FD24C179EFA6FFC860D2C1A3C135B
526579886A1FA250C8ADBE5C8FC2F8B4CE2B188E7898AE4F0EA7EFA4F19466EB
0B8343C304B7F30F3286B2D4D3B42E9803A2F7192D04028A7F41CB2ACD485E1C
75F856D7C269CC15FFDB86488691EF21286FD1A8F3E900FF3E26CD2666A05557
E60A8F1E998F688FB0171735BA7E1B6B3DEDD144FF179584BFDCAF0BB1B17C8E
53BB7ED65D68B90E1AFC89F0D62235C37392697AF95F34356AF4ED6293684886
68237BE625AB95503B161B12147F54782429A21E2A24536110199E85DB548C21
A7CD2BB1B51BC3A3F2189D9400C75E3FA39FD8BC7A0FFCD765B08D512546C0F1
97C2A7EE4C3C32A0B7329BE7070E42A0F681B393C1D36E58D3ABAEFC9C3F7C22
0347FC7E3F939A0F22FDC3F58089E510B96AD979CEA1DD5356962AB01D283901
839AA7807CE682B2937376F97CEFBEF0F3CDB63B9EDA78B9B9F20AF0425F3574
1C291B8DC44A262B89C0621EE58AB4B0204B8358F12527E33EB99432112BDD68
9AAEFAF16FC95B7625AF640B276E0374C0A53FDF2111E51C9A2B9DDC7186F0E4
A035800318D338D884EF399D48292FBDEC55AE303FB7ADF8AFA0646A4031E884
AA01B575B37DD1D9B0D453E3A73EE7A34FEFA565C9C6C229A606FAD9B8CD1DF6
F9D3B75C76F5F25E6049990E6D7A139EC8D793363AA0392F455F092C9A7D4C8D
339777F7F8A391267C68C419D9AAC414F307488A9BF2EAACA5A014E0A941BE01
9D06F6A4EC4881F280AA002012FBAF7362400775C17984EF9CB1BE9CBC79A596
88BC9A2E9722AA5CEABA90F6A3C7087B8553D5F8DE161ED1D578B1F16BBD31AB
20CD19886D6B2B421F7C057DB10F0445DCD34B1937D3114220AD0792429566BF
F55537F41DC591C0B947BB87F744D96549B1599480FD287DB8D742D0F202F882
5A21D0D4869F02FA1C99FEE1A786CE64B7765DFE721577703E5588268DAA8654
78898C645293D7CAC22606923294723552421EBA746E16221DA38867D33C6922
52237B500D16D93E9EC5E63A2E348BFF78234C0A8CCB717FCBA052088FF01513
6D44AB7574C84FCFAD6C3C935E56C071FA9EA5EDF607C614359FD903C91AF6BE
B934EA33023152C25C27C3C771B5531D050B51B9508758F4EB2DC074D799F511
6296B8871BC97FE4C654C9E122065BA46297F7D142D0E8D87C38EE43D1D52CFD
0BE1557746608D91E065D219AFCDBAF5692234212A72336D6DAA3D2FA144FD92
81F9D6C60E542B37064EE4CA5383C6EB86B584170C5081A47B223BF13C8732FE
094A4BBBBE6AFA9B7E549AE4DD1FA1BE2377B97451BB8D3A8FD9FA7E9FD4EF88
86EB413196E3AEE061762B22C9602DB25AD8ED1EFE6638CDEDE12DFFADD36903
CB88354AB3DA135C1123CB216D7EA0642C8374F3E847DF66512D013CF2B7AA07
D89E809C025592E1CF5273F78A2C865957FF811ADB0B25D83970984099E87379
FB4D0CBF87B0B9201D5AC9B7DEC719C4E16E7E7D6CE4F9E758817A632236DF3C
A461F74F317A77111FBAF232E67AA468B782A82A49F32058B2FB7690534A2813
E300DE71EA363FB02B97ADD5CEAA3449592B2E97BE43EFF8F5BBBBCD271A1553
78A96434302578D4277C784D82218BAEE15D4AF35B5CAE1A7B61F9B99AC42D12
5D5E2AD1C96410E8AB17977A1A76FE6014FE4EF56765855524D5E38F1D85396E
7C5D36F1F6D7331971E5B510BACA9234750B5DCEAE9B9297F3ECB6A1C3418DCF
B8621ACA8534A8D5CD33FDABD416A9711B886A186DB61E3F985EEFDAD748E35B
A0387BB09957F9CF8B20AAC012605EE33312C1A0A5CF1FF51000CD40614484D7
2FA37C26C41144123D05F17CB19D9F34F5BF921A7F042B8F51E4F01551966A7B
C9F2C8F586487194107C63BF5C6AF68FC04C371C2F5A9E9965F8BCC18F2DABFE
741402AC62ADC049DF79A41C5A4188D50BC8527BB8FD0C18F1B7B4C6F79EB00A
B04482E314D1348D8C871D5F0F5BDB7F2A35EA7D7778E1C40444E5891308703A
1A557D6AEC33EBC70460C70451308337E1B50D361D971B735BF61EC499EBF792
D284E6B82BC7CDFE0189EDCA472BDD5A7B8E16DE93E9E9A23D08ADA7F66A3DC7
4D6126B8BC8E30EC6E1E4825246D8BE271D65F3C028D630522F6FCA9A6998235
8481D1E82C2A9040EA273FA0CD888A97E1C3E593362E1DF961F6E6BED4A1655E
DC31C235D20B206326C7E4F83A6ABAD2E1727190539E125485CD15B9DD2A8F98
AF91753146BBB751053D4B80F2C523505C344F9276BCD1189BD2631CAF932C73
679836C6D1208441CF4B596CA41D228C67BCBAF9B26C88CF5DF6EE049563BC06
00650B1E7558878C986602B24FF0081647D00548511799032597B2F75245ADBD
19325401469A2C06CEEA38BB6A9C5FFF29E7B3F72A37B4A9D8774A3000FF4128
513867EDA173A2E51A0E50E6BFE03965204975859AAE67B67B37AF86DC494549
2B8661046AB43C9857D215E366368A2789AB471E7EC9ABA4C841AA7757FB16DF
55F4C8A7A3B1ECF07CB720BF3D41D92425E94C2CBFFFEBFF0C5C729A83162098
7A9C89E0F7112808086CDC0D03EF975B2ED5DA43FCD026B188C30E13ADB29460
03E12B5DFFD85BEC8E854AA4F8E49A4DA33CE0ECCE5E4CA9D84FF99FDDBFE83D
F767278F9F78C2829426F0F8B6375D2560D09CCE5A1132843625AB7CF2495BF1
2B47ABF2823473CB96596E7F84AA93635F74992821556F4E2234E00BC6D71965
ABFFB6F13DA6A2E0759274A5CFC1B7449390604E16AB929E54C978E04DEF8DBA
9170619FAC5C1BDF3F8C833A193D1035446D7203EF6755B72B4BB60F19ADD404
5D44FC96D08126FA6EA4D2C9C8E0A74FAA2EB1479C78C22920C1A20FEF974ABE
2B7D2F4C6F7C923DC76AE990C4DED916A41659BAC0EDED3D7A4B0A70CBFAFFF9
3685434E80743052DE8A1C75AADE46BF615F4F7FE311D2CBAFE5A54C52848BF8
A77F25CEA7D30F5F1725256C8CDF0871FF84F68829BF1E275B8A6C330DF8E47E
6E8C51260FED48DDC2782659F10526F3826B24EB651DB2E0EE69627B8DA294A5
45DC485C6A744C1D63D943345073A179EE0DE00722692C55473BF447ED0267B3
78F66D79E0495943F0FA889B248D9C05EDBCAA8EF7873FC8C6CB1C6B272E15B4
F225C044A1B4163BEB7C6032FE21AAF7C5AC6972230C0D9EE2A51D97B0F683D5
DE56C69919658C71E57D2D3505DCB35ECDF6051AF39B79A9A727CD0240946BBC
DBBB08B94B4B97997B89365F89692AE727F11452186EEB078A83CFB8ABEA07D7
EBAFB3EBA19CAC059232647F0F8412D10F07B2106CAE46CAC547F746724FB465
4BDA9A7C4FB4F6716756460C87310D38BDA9D67A3F10C140822AADB837DEC608
350C59EC19BF039D77F065BC21F658E0CA84197561036B9F7C8C30323C7EE55E
D80FE8A7B6C80DFEDBA2A03212B688B37BAF7CADFC64B673EFFDF8F0815D7853
C6F61278341A10182866171A68693A8045F2F5C4FEA50AEE55316BEBDD68397D
11E81F2878C3EE8BA69032A953716055B0C5717BD9E15A2FDB5D2EBDD14054AE
60EF5BD178D748C313D713CD20ECBA79A63B1633DF3E4E49C9291701A2D96C5B
E35448FAB48A80C8A3B3A3CF9DCE5FDE15564F460EBEA3A4DC77FAB40BABC013
DB13FC3B396DC6E70B5A8E4B719C8B575FD7845A8AC56AB25FBE24C987CBA422
2D7B6A578F0213154790D4291CEEB95AAA3DBEF8671AACC3D5D6ECF52DF70B0C
22193A4042F97E7AA2A11F8CDC710178484CE01A538259D2460701281FE8A559
DFE7CFC6C357C01E8976197AA2244A8E79400B27BA02594327E93C0F4D251D12
FCBDC1179351D6D370D15B0A5BA47136811D3FDCC8BC8675BFEB740423471F69
2BD4246658BBA30156F7CE81296379A863677DCE242BBB40757B109956A614EF
45462F48C6FD0C20B0E29BFC38C3AB3FAFA81493F176B819E1CB1AF3B1551331
9F73E8E905DA5759F418D2B001DC5431FDACBFFB4C9720CB1BCB23146B0EAE3C
7438AC29399A0FDD374327A5B8DF9090B278E113F126090FDD657A591DA6992A
609543F5590FCE796384A40D80A34E81D82A3505EF6B7D16AFC1014750C3EFA2
0150F9AF0A5BCC8DD9C7DD53434BFE96FC8F15A7E232176C51FAE65F414F9611
50AC9CD400BA88E75F7B296BCFBED03E76370273D18BE836533811ED29A0C063
2BABB970CD1FC4BBB733C648CFEA62AB155268470F6092341A8DC1F136D0FB1F
9659644846A348D3B4344866984671747D717E1079EEE88F5512E4CE89C68E8D
AFA11E1A5CF57BA64CDB7855228C0BE90741C06B68DABEC5CF0D5884E351EC20
31A8962EF0DB618EEE4ABDB4D11401C3B50E4E61C2685D7D153D09606ADDC808
B1816723C4036D41DA439C80CE7CEFDAE0BA0A141E873263742752C0B839FF9E
5E96DD5726B6BA413F846A887BD133CE2614D785EBA9D9449C4A49D0B13EEC60
3E2937511D53576D9C446DD56ECE6018584F5BCEB8830518DBC99F1ACF3B7437
FB44CE935B8CE0B01D17C6C4305B192D25B4CC3518CFB73A8B83AFE3BB875EFD
88F274E6C6DF102BBE069028265CBC5C98433F5AB31F4F039297132ECE0F8EA7
D0BF3315A0B93C5E94786A6C04E1D66EEB91673B101EDD0CED5D0A9FABBCA5E4
4108D0A346299ACC1EE0E44EEEF0BE86F8A14F9EFD331C09FFE48D8248FC3B8A
DD2FA48F16B2DDF542A492460800AE74521C1A00A839A2B248F50631785470BB
1999BD89171EC7C95143A32BAFB1A17213370BE85BBC595075C1818F6A1D369B
E48110DC766F03DBCC2EF01DEF4ED73A8A2F03F9929006B6D6E9979556CFD400
721EAC67C16221ECCD01B2B770C2061BD48E6FB8014B7D771C23CDC5B31FA66C
BE231A985F7377BEAA49275B5E62BC871BCFAE9AB6472C67225FE24670C9B445
36F724F83C7A7563D090FA966650023EC0FCBE6548410923051F875718FAC168
E4E091357954754A34A9A04FE68A437B8306B8463247F1E6770E0FC251D0FC54
A5030FAB4B341BEDC1EADCE7ADE12E923F2264454217CB82BA0F849336050A83
6CCEBA8A9C29AACF52D85F449B56CD0DE813A3857D51AF17B9562670E9BE3C37
F3D5D90587AF146861935006DA16A1BD6B4FCEBA82F83CFD6E783FDADA674B36
954715FBA0EF53A05950E8D714628D642D1B53CB86D76268C2A3A0FE7D0D6EE6
721F4F3333F75FAEB10EF1AED6EE9061C673AB9C4B486BB2854146EF1F01D2E1
E0890E1A6E459A0E86CE6778AF4B636A60C0F483530B6F9A73E87F65AD3DD44B
0A656370D4B2722BD17866E33EB8EA512ECBF751B448D68B25E660CF76385033
E1F77C3BEDD1BFDAB829EFB247C880D21D0E2820DF9113821060C2CBD7AFF50E
ECA70C1A943F1896518FEB093E4A03977A1D7845275079FE9C3FC12D1F5F66E7
F073A951EEA3BD6D78E89DD66F9EEEF2A8C9ABAFB250A0D072518DB8CD46D27D
CD055C6CB5E94958344AFFCE43F339A94605127B03669EF2FE6D4CE5C5F7E99E
6E7E42D3ED2465DE9ED74DFD50AC96C56EA9C6EC3D447DB6CDA720D9419E0549
115CE6505CB8DAC3FCFBE00A7FF98F2D25A7891C85140B2F9138DDF2BB8D134F
09F995C528369697C87D45961ED346ED6DBD1DE228581E7CA768F5209F06F74E
F5B6A539F758F5BF22F7E18CE93B626B7A9F296005B3B61C2C8036F179BBF104
5055F162A009CBF703FD54101BB80A1108D7D760128B422B6C3FE9EE339CFBAB
2C866D8E21292AF5841835094BAA9676EEB9BA40AC4094C71AC9DB690EA658DE
2DA41325876BF20B1D1A4318E492FAA534A5F317B32D9A8F95C37FB2758FF46E
8DE2C7C501CF19FD81EEED96CEB6803328A3D52EED34AC4758D1CD86A51A384D
D6066C7FE21B35001145D8410402018D0F42D2C052754F4E3B470042F4A8D01D
99075D21522955F05335E775A7E9D540967E39CFD146E592C67C42E71AE26FC0
9A162AA173260B8DB9132ACA78A953767CEC01D9B10A106FEB0DD4FE4468483A
D42413F4B8022D77872F21AC9A4883566FB59C3A5799D662B502A96940DAFEB1
9AE58D99131B49310B31E170055D2BA143FE63324BE5313BAE49308FA206E5BA
EF1757DEC6E482250DBF6FA1BF8C25BCAC686F8C2AF931C920B1FE710523F7A3
A4389121B37ABF41EE3EB214E1FA04F01B631571DA5B83052A3947A20ED609E7
06465267C2E85FB0196F8C42DD196DE1024B305FEE4D7EB6DB3825AB1CC51FE4
1F5253D461C07824578B205B2BA23E7D5F2193E4105A79F8546B054E69CB0265
291E40D9E34B3281BEC63A179E56F576096A4E3D03F516CFAFBD17A934DFD1BE
6299106401F998F3A9D52E225625FC3B8848D3B258930066352F0C874C04230B
A15B5FDA39B5946F924FD04A21DEE5EE87265D9A7D4B13444AEDB476B35F5B45
1DCB52172B2657EEA8A1F38C0132CD5FEBC741C9C32652026207A49C7A21E851
9766A4FDDF4A754608F27C2ABCF5A0D824C36B6ECE1D2A710470843220EF55DA
936B5D13967F7F4DECD492A52C767EC422BB0E85C1503FF644C252CB4F4DA0DC
C64C90F2EF1341A126980C7890794A85EF6CE32D227A9537A8DA0975A2DD250F
BD151440F4C5CD454FC67C6D401A3C62BE5B16E0E9DBE671311648C07460ECCF
0CBBBC55F5311CE2AB57F8B4CE5CEEB7482302CB5D72BD92E6CA7E83D0EC4AEE
E034E9C8A35655F3C4B34BB11F6298656C7E0625A4E70B6860AA9ABE07CE203B
29AD861D4246EAE0379D23BED8DCA6132D76C53B78A28BC434AF4C93AA47F26E
7A139EC8D793363A204193F78172FF911C10C39D4B43F116B0E2F68451E738E5
64D8EA0383B80482E3DAF096540F72A7AA528BB009E0FC966D03BF5EC2AB2968
21AB851B2E87AFC42C04FF587430F65BA9DF158484C17C9D4DAC9CD8A7A770CA
A8581C266CE0F84E68240D0424BBA20AFF928DAE47397075327EED7195DEE9E8
FB93608EAB1E4645EB7D1271EAC040A9272A53548767B25E10F6315D432DAEC0
5785E0611D82A36F9FC00D0C97EB9C33A83925639BEF4B041A57B58A3FCCCBF1
600CCEF87435059526DA154F2FC6BEEE6A5EC4EFCA249C4D6BE413BB4D05217F
E5C9D21BFEC5A7AFADAE30BF88772D67F05E9DDF2F34F797FC6B858D6608F304
E3C14547F1FD5B61BED22B4E3576134ED37A559602A8E7D4B1239681772AEDD4
A948F8C10EDBEEAD8F91EB13E7BB5FDB2A2D2A3D33152BDA977F2CE166BCA591
084EC06E04746786651EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A158B9
DAB558FC69B86672F40041DDB160BE6CC01F806EE265911469F5DE55D0282AAA
ACD9DA3B1559BBA47A0EBF6A51567AD17C93C29A9C4516327A2627A5EF96629B
62C4B6AA76761346D2464B67AEA933DC7DC07EC2D28D1914F4A9915064E7EE69
353131437822B20B5E39673A2F6A00D43CEADAC9612A2D0B045892C685D8D662
71682144DFE183EEF39AED664E710AC92AE915608F20F3C369EF3D36CC0FD6EC
E0EF01BCD9EEC871AFD57FD3DC86B679B220C48E9DD4953A244E5AE73B98F820
3B2AE70C174D129ECDB576A5BA94F054E551AC2D62B22B884E56F638584704BC
D93691942E93DC70D4285B4FAA498AAB3C1BF06922EAC70BA9CEE0D417E875D9
05A38B3605B9AB6FDC5B1D1F36B5D7B828A7CB398E516CFCDAC8FC02ABDA94C1
6BCB4CE005BA8633ADA5946E7F3565B4A26C6C28300A51AF2ED0D4EAB921AB52
03FE6411CFF2DF507C2C6BD5DC38DA1EC5F9776FF9AB3E83D81929E2B7327541
F3D1B333A4AB7512CFB8C9507A855F91819B1C7F323F60824D13F79652B119EE
55207B3DC19A590F2946F5EEEFA423BBAEE305AFA3FB216983DF61299EE6AB49
0D7BA7606326881C5A6CCAAC22D5454B2C1EB1C7C07D275B6BC6BC5BFF4FA220
14B3741BA64842BA7EF72BA8E5846FA9259C25AAF35857B18A048DE4026A9BF3
E2D583E52C3488C72C90387B5DC63F9284F658F5D8A9D1A1806481881C077895
36B1CD256FC02FADB55E3D89BF4E5738188C4FFCD66ECFD735A9689D004933AB
E6950B6AAF566752654E81648CE01CAE6B824B074160730C68A967B6F37A4335
2667CAD3B3780FE8B83F33BAFB57019D8A45BBB0B9CF8EA04A6BE7BCA4B8BB3F
6165335C2EDE8448953ABCBD32BA17E93391D2BEA148BACC9ABDA9206E38AADF
9F5F7175382997B8DDC1BC31FF9BB31C29200453541A5AB5B114CA693BEB1967
81C04C0A6EE75D274C9857D2CC8C4AA2D7E81DC82DC430514579079507174959
4D20DE3F79C14B02F024EBEE5C1E79A408C9BD1DD6CF0F8B59BB28EEC69F3D24
98504C168D5A7572A28A3854258CDD931A53CB338FE0AA718D7C2E6AB173585B
33697244C909819EC5A43FD73846EE24293A1F83F96D066F4EEC9CB7B4675444
7AA4432468CF994FE443346FD280790E3EEE9E23A8614F769C772FB4880C0EC0
F2BE0858F93676CD7156CC44EA52A283D782A4E992C810E0FE06B7A97634E494
8BA21428C2C51A42EEB3AE4C6CD7E7B194162962680130D788316CF10B8C6760
90F93D6A7C13ECA74C793B3917C4EF9C7E24D0963C04EDD832CE3696753BE919
95CD7EB3B8F807E4027680F9CE1156EB4BF5E50FECAEA7FE970E54F09D7B163C
CA056BA39D1151A17BE5E15126B33BF5AC207356F5098FEAE629DED7BC7DF8B3
E12873A023AD8110895E57E07CF0A0966ECF94F269208FB8CC62857041CAA877
6B49C7D81815E0260D9FE78050BDD8182D549A4BA9866D7625CDC90034847490
AE8F1F598B611EDA081E2E2DDE3292E178983EAD85A37046FB3284186CC6BA6A
41105AF4BE60E0FE5C1E4393C80D61BC6B73CF85EA4ED929E159EB2C553CFB25
2F800B2DF8B8F596612934B1A833E715BB50FC748922781AF38F6C02E213E218
294D1063180597B8C427C9B17206E8B7BC93FBB87AC0D15C2818BACBAACBD829
8AB19EFF4FD10193B73D2C7D6C71A1FBC04F6E98581B5D75384CC4CEF40136DE
44D1DD0956C1362CA7676F0E037CFC07E76BD74D9E3AA30836AF4FB1100431E1
0D22C0EA3937EC300C75B2A25896B9A4E1CEFB2868EDB3C6F00EF269612797D8
D514F840BAFC74BB843D0AB74C66B9EDBC507E9CCE417DAFABB471003C89F02F
2C8CF8BC75866839830C833D2145FE98DB93191B725AAD72FA5E361AC916DD09
DCC0036BC505B1CF781858BB4E0744C023F89B4B44AF87D26A57933BB6ECF9E5
27BB4A7FB2B86B53B3972C4DE538163F8DE60A45794196DDAF286A039B663EDF
0EDA6DD4EC4D92765B7E2E7937BE873AEB67B742E14EA4F7B7FEC1CCD679D993
084760A288DEC6D22EC26F9B27614667C39C56A26CD11D29FB63AB773B571118
7CF463E85D42AEEE1EF3AC2AA7EE6836BDF45CC62357759D04A63D028169242F
896F61656CD3282CCBC7411FF3B9959D5314D0B8D5DBFA2F1C3446463F0CAD8F
B5DBA28DD7A3C54923C49B3DAA634F3E9E694D6D5649592CDC25232A5B30CBE9
3FAA7DE6D2CF4585140BD22A87FAC7A3D8CAB54DE95A48EA0ECA4BA4B7ACF33B
6830A73D8F2AEB94F02E6385CC9AA8C7C3F96CD976F5E068DFD0DB85B79CF62F
13D8E79B743C87C0B2325BB2925B0710B48EE5DF759823FE25769EBAAEA1B416
38A98EFE0AB6029D4B4B6BC672284F9990771AD7D36F507698880A8ABE636D4D
B04C5ADB7D5CCC725EC19F2733F153B8E5592655B2DC0541841732B3FBFA783E
2B120BCFD3DF2AD10EE1A68BEDDEC8168E52EF99E0C0F7F1D0C83E5BA000901B
5069F7FCBFFA7609F9E58FFB664FE2F4AB3151F9A925202FF38378EC4258A1BE
99D6AB4218D8454756F8FC1506D434E7F449AAB044E94AD50EEE240A682708DC
6F177FCE7E5E4A30961F2484A21548CEB16FCF24EEADEF4805FF598187D59A3E
F63B4C845DDA4A87A7BEDBBE48DC447BB1C70C54A91CD0A1579C8D268B90A801
0C0BF48551CC30B795D25635B98E9B51FEC1765CB8555A8A21C3D55F6F575054
653E5E77B738BB5E53124F7FC66680802E9F563B0A32AB3B314FFB04310CBDA8
F5B9EE61E8665CE23554156EA34CB570385415F654A76546A6B5C569B9D6787A
F55D8743E308287C81DA2EC8FF8E3D439DE875D6A6CBEFB958886D749C75D23F
994EEA8577A8CDEE3541E892E9F1290510F9B977C94514EA1312AFC201A68069
1B2E9117F9F219FDAB638D89FE6A48A2AF44371CA8B9A4D97256948A71571CCC
9C5143027F3E875C354901923591DD4C29841719E940FFC59E03C5AD0BEE0DDC
4BFE621E0A57EEBBDDFFA78B6E77856A3C6A7BA7529392ABA659D56DB64032EB
74A118B82E29ACE60B51F590E7B3DC747D16A4614FF667438ACEEFD4AB2E162C
DDA72BD46E7CFD2BB3BF64EB5606CF756981D77238783E04B59E049DB66D1885
5C7CE42D0F9311DD66FC36FDC6CA97037A08514DEBEAE34DBD112E321F912107
51DB765F4186C348CD38E6CCE52AF89235E0FFA805D1C285D9E4CFC6E681DFD7
0112FF616FDA7CF0644B22402FF8E0B391AF82EAC78A98A653074F0CACBAE918
3E0CFD9010568EF543E7DE0BBF8EF47EB70278BD8913CBEB1B1F50843A464875
6A3B602265F9DA60248130F81F4E4B127A6283E904F0B5F454292CEACE1127EE
64D7CCA76D526D19F9B74F636F4BAC2DFA06BA3F84E1D9943E7EDF7BC10D4603
D2FB258589761269DE4ECB59D9A674B68CE725E3A0085765D4B0FDD2525A04BE
A3314C46F82A3015714D36E29F98E22FC58840B3D5ABAB73721E8000B404A04A
BDE95874C2301C273C154B439D788AC5C6665B005961C160E416A8FA4583D233
3F24F9EEFC78D18F24DD065CB9E59B00F542AC7FE94A4085C303027D51CB669F
AED7B1544DBD63E855D0A50780F60A0E89561FD93DABDB61EE010868AFD6C991
6FF45500CDF981930226F274D2EA25DC56F903BD359E301478AFDAADDBCB87A9
F1B8B691240B8B2CC2A2976BCCD25BD92CF568AAF98EEA7B1938DA34278CD2EE
E97371AA4AE3840412245E77529BBB8A524620C3A19782AF1B4EAE6831867BF0
4FBF95C1FECFE7FFAF30A4135049F70FD15C32C63A63D4CE4FD339BCFA5F2247
6C57B99F4BFB0A414BD86C670ACDFA9B4D53B3A2831402AB1899783501AF6A9F
1F9C38940E9AF67F67D394974C6DAF9639F2140D8E2900E640375A9CAA5245CA
D1E2CAEE24B82AADDFA8984C35FDDE265133A8EFB025E6F26B6E54543B411485
CB137FF2387DD1498D81BC22AE2FECE73092D74CA4CA7680397EBE743D00F15A
61CC3666553022C68C8EB7E32D9A5FE6EEDEF4C932D459A2126E6F190D450F59
B8E3FC000CB110ADBC2AEE31C0BFF2ACCA7C82C0C0DE6521C31BE92741B766E3
B8EAB36D74702C5D168D9354F8BF9FD061E6C32BCF8CC05481EFACB4719230C7
957E1F5E277E7FB462DFDD2F6CDB3575B61729FCA453D39D813C52005783D171
C839873473E6A9F65DF9D647822FF297BA8A73E50AE5F83A8D903543D9D8CBEE
6B743A84B9A717077E7CBCA38E6DED4B46CC915BAE9342148493700F33D3181D
2C9B5EEC1E388954B56174857F8C024115867F68F4A424496A61D7B3215CE817
E7FC32205AAD168E1929734F314AC16BB1740C55A64B764CAFA90AD6417BEB7E
7A6355331B23996EFE2E53FAC809EC126AF6C7DA36D19184793143CF7D3D50D5
ECF3855BD18E688E1E5D4D13C57239273783FD6289E65B4AEE25BF8C7568F73E
534DEAE9DB9BFF15BD0E1651ABCC8A723577E8D05BA9CE9F9B8BAB903FDE93F8
5F037C15F25D8DDAF50A4E43BB14A7C5D0FBDD76B0B406414945683989ECA556
9DBCA3141013647112E7617D0AB4E5A1CD91606360830704E7AF839ABE485BD5
B926C17072EA6C9F52E4BD1839230F5F0E4AB8F10C960ED2CD86B7FB6F810812
EAF5155D293660ED7E9116B6C1DC313105F45562DB1F333690C24DC8B501EE46
628E71CD13D66420D25F47146048D70F3EE2F9BD1FC175B0D8AC682ECA2E09CC
23A81B63BBAF20E0CC6DE0F798B9030D7EAC888F78CE25BCEBF7295572A7B786
2F8F567CCFD08FA4D08EC5570DE4F124513C12D83D17904A6AA8720E89BCB9EF
E5880BE599A084AAFEB103CA009CD4B28F8C863728E6C5E2B748B1F6FFDE94F8
BA0AED3F51D1DA10D88E251A2B410D9AA5AA73EC7798362DA5D5F5ACC6B82E29
0106164FAAAEFFA9DB586742EBFE597A7890B34B90B0CA430CF1DBA95F8339DD
6A9C58DEA01556C4E3C4D9F7A2C4DD09B2B5A39590295049AEC2163DFE4AC087
40AB0A58CCB0A9B5EB06C327BF765E456CBFC5F0ACBCF6E45B59E9C78D3B9D2A
90B13E870F0E3CD433276CA1CEE4E1340784C736F576D69AA87AFAF34515869E
9E1D003F9876D9966D0D1E434B64020E1A3E1C0F41B6A3A7E28E814F78086254
705A749D99CD40B1A9B07EA2BD31061637165E2AEE7C9DF3E67A44C04246F03F
57FCB87241C0A118111B5DFA05B3F6708B8CB66A799A4D1E4E314BEDD63E482E
4B8B5C3F2ABA89902CC19E1AAA162A86009671F581BFA79544B1A2F7CDBF639D
BC2D7F8C5ADF9BD57D7C83FFCE348F141E1C44DC0191890203800F1C2236413E
4BDE13AECDA89A3D696EFA4908649D116515F66BDBDFC5AAAE4AA1189AA83AF8
DE860F238CAC38AB41C07FBE022FFA34CD8CFAA1ACA730BA1FA90C92B86E7A00
F41482FA133CB82931C1DC7242EC7F1E8CBA2303FC215B5B353C8B88138DC35C
D6121418DB930331DB3671AD286D3C5E491176B56050B015E139197BCB0550B5
1391E26A7BB3EBC21604DD6DE089470979DA0585BA3695CBB15639215845AA75
E8BF7BBE9B6F27A1628AA711DB1E5BA090B1355645726D4CA3BD7CFC9E5A74CB
21AA5AB00D11B1E68B91E3F1C97F0C606B1532B5457E6E48141D584345E9A528
0F8B2D7DF9AFF2C5FE9ED88C40A63E0EF1027E52813CD59B21C148F20105188B
676DF1D74181BA2AAEADB6963884CD583AA64379AD37B5F00ED70BAAF9500D0B
5CC0785CCB21EC6C25EC414647F0F774F1258F02996E36871124FF3B3B98FFBB
EAF9A759442E13B6CF05F12CFF8C8BC7F500201EBBA2FB784337FE71B292CE52
411022FF2C84739A79083125B5BD79B896399522A64E66658BC4895D63DE27B4
7AA80B0DCB04DC4ADAC19DF35F9898C63CAB854E802799B5436AFFD59CB8AE08
1E5D453B99312E24F900EABCBE6F5B95072C653A7C23232249395F1DBA536E27
A7C264C115C07DF0B75DE166D584BAED9D4AA52B4B55DF7BC1590016EB9D9877
771FB6A29150233E60AC9CA9EEA4A087CB8E82F48323CA62B464A903C4FD2FA0
FB8E3EECBB6F1BF09D30311DA2967EFF47785A815142112C49E17F2ACE1B507A
14C9CA7B649570472EF5622D98E227FB7F02D9AAC863CD6C892BC1DE9D3D4465
D136FC4F83699D79028254886F9F3E4DA52563EA430D3D0049B0B62A65238E6A
42DA48BDD87DC466D249D83E85116314E15C86185A21B65971366AE51C5A93EB
40FB3E4F64E7CF93968D0F71D173CF51662FC4F1DAE07BE2389EAFC3107DB072
289A41D2A80802BB0ECE4E373158AC72FA98CD49E02ED315293B84B1CBA66BF0
E7D53351C739678BE46880933B3B6B470644A649F941CF035240E6AEE57F09DD
D6B8041A7B0537C398E304CEC5BD5E33F3314431A386C06FC97CEF4ABE847A52
23DC5CE07A32F65409F6EB8AFCE804C86CDB915CFCC6157B506ADE5A0CAF8EDF
2767DD1909F8F3B02D8E94207DD447AA48AEA9B7FCF79788108F74DFB147838D
6534693A8DE84AC206A454EB21EEC32F6E77DC7916BF3E2F3FF714952BBD786C
77D470C22E1A954FE44FDF5E0555F927BF31F7603B794F895626BD92E23B42C9
4903435D6482CA6B50523631BF28F6282E9A80CFE218A41770D79C16E2CD19AB
5003BDD29F2D898F6A2E694ABD52B6E2624DE501DC7CC5507888C2D351DC8BB9
D0BBAD199086E93453E7AD7B6AF4E36452CFB17CD7ACB8A58ACEBBBEA0E0057C
93F7446E73D8400A088F331B33E977C44A36FB71C5B3CE693DDAF335337BFE99
C9FAC1CA792780B962EECD87067B5FA64E562856EF54BCCE76D4DBB52D8E691D
283F2673A7E1C708468ABE25107F277A9CB6AB1B7C9EDBEEDF9E37E20CDFDD86
0F84DD1D7DCABDECB0DCC2F48B03E64C0567997EF9BE87DF9C6866C4E3C2185F
C2BA14861915C4447903283E315164032F900C466395627A80659248CE113E62
99CAC4A36229C8E486E95AA3AABECB8FCBDA43766A8728D4F39DFD91B6CB838B
A42709EA6DFB4E75BAA68D7FE569D7DAD6A9FE1D4F3F7693FE4708FA07998A2C
7449FC5EA51AC213B9F3D6F7455FA9227980590AD46C121B9A7A230F2C6BD942
DAE35BFBAEFAD7EA601587541B65FC5B6358860E8928F678420F6D4BCF3AF66F
B60C1B1413E4C4597A14D167B3998C920379B5B0EC4CF1F136C8C443D92A7BE3
E365110F0452E620F7791C72EA6DB9CE38EB7883BB7EF9B65AFA3A64A9A1F1E1
78644121EE02C081576FB927E9DE1FAB9E27B613670D0ADF8C1EDBAC8F28C577
FC78C45FD4F5512737AFA1C58286742693E05D8C4E47F15A337D3EB995AC8D30
108341C57E7B3E4C39DC3A970EEFC1A6162715DC00CD09172E2B13110E5923A9
689F55BE2D544ABDE892B4E7206F6E9250FF6EDBDD8D01EE519E7763A69A38BF
FEC1AFD5A6559E881EE4A98062B57006F72AA35850A7D775F55E694E7C453A7E
80DA881D77D862492D6D1DF6A765861003A6F1C46D24F4632175E78A541D5052
7060BE24130E73620A648C56B5B8D1FEC4B865CA6965634BF2768D858360C358
8FB5815B377A59B3A697F6BA8439ADE71B487F612FF6F3398CA57DDBE45387DC
CCD817DD1CB3167D66F1848157A150B97ED89A2E4D269EC2CA5F201508C7449A
49B6026D493B9A52A93B8F91FC82A6271546CAA17543BA12846F49A79D7BF0A7
1BF3B029530550137244CBD9384FCF569CA71C0450FAC3BDF4C206FC77C90C5F
02D30BB8A425EE4DFFD714358DD3C4019347F5011D600705B73C9C4E411D3A28
3AAC92C765D31A0A91EF6156B89D858886FB0B7A2F01AA4CC2F944E5EE40DBDF
2CA34177460B4116909BF0372E2E909C6F6D5F189A36201038063E7917E95216
7D752ACEFE6BFF686460811761F4D87BE76F95F895EE952DF793D7434182C4F8
752CE0A2128EA3DA1CF9CDF741FDF3B780EFB08A457FE60C3687AB47412890CC
26242D918F052A0028414AF2EB5451345054EABC8102B51A24B86EF335A11420
476420E6F65C84D4316FEE71C3868880C414F46DF1EBC7E5E8128F119D2609F3
4E56FA3FAF6C3D7DEAD3B86675708964AAA0F1B9E30D8A8BE48DCC2389A1E28A
ACE6DAEB9217950970155A95A87E0E635D2BFE684DF4A7633D4D0CCE06E1E970
ACC49F17878F84FD3D3BBFF407AE4B0E97E8579FDA1A25D06AD7B0D233B3C00E
CC0247B44EBB1FF19020E3B88D1450425B98E571329A1E6655E41F801D7A8F41
99C1478E6EA83992B0CDB6FAA5B54D8B2A966D642441C0D5F9FC59B0026B1A5D
E18D791F8B9EC3007AED6D5E7CFD92822EF6D74F126F66AE6ADAE18FF8960E80
52E7BDAD9CD077A31B6800BEFE3890C6DEAB32242279D33570623A1533F25FD3
7A106B66B000C149A89A890BE3DEECA5FB2F1F93F918B246689E32E48A7A56D2
F68BD6EB2D5B611067411F402758267A734AE8508109FE375077F5E7A7E2D252
BB4202C24690CD0F802937BCD18D8CA9CBAC53C66E817CFEB8CEC9D4895D98C5
C087D143C5F835B96565AA029DBC7E2F3646E1C916B3629356B27636A3AB7844
1E672D3A3EACFD8DD853CE484B21D331E6F15751BA3CD918D2B60A690DCD576C
7FD490607470AE9C1A9DB2665C8ABAA5E5EB1DAD9661D9F6DBC33B5C267A266B
A9FF7035D20613B2BBC4F38B62622AD017463892CDEE8D3D025C88D323C467BE
4EBCAE4B0832102F83FA84ABE8286B5E3652CDB6C962CB74414B1788AF2B47C2
0A7627E43F9CE848DED0B0118BF49283918B157CA4719B9B3F36369B141458A5
8A1329DC84B30F70BEEA841C7320D2F56A09A98AEA66962CD3DAEEE9AD348C6D
3E08368EE297FF50BEFBF55628587A858A2F0AE9C6B074D3DF76EBDE1ED1D9D5
AF3D31FC4B084AAA6920ED8D3584382E8A781C2B455610BF9A6BDAA24DE24DCF
0C5C6B3703D789A73F3DE76340EF8EE6079383DA3E1FCF4D91E6F203EFB6BE51
EBBF6C5F40A4CE12D039391BEC66D7FBD7D92A5022FC609DF10434BAF0FDE551
8CD1E47A124EBEE9C7CD65ACA6E8A172B0D318E0483060B7ED115D15BB4289D6
9AB6F539560F9E33FC36F6DB4449DCB005A42982401F0502C54057AFBE87111C
F8E69264BE4B3E4B04F0664144AFB9B34C31A1F5984DB729C17FDB0C0A340E26
CB76C927B340001C70CCB18D1864F4911AF29D51ACC827A11AF60886C07901E1
439FC0AEA6CF5F85FE789EFCF5AFB2BB66420472A9F08C83E81C930A120C58B5
BE86C91B82AED139E413E33DAD62F6E4CFDA12F1D09382F63A4860F8AFDB7DDE
2AD31CC09185CBC7A2DF78280856DF2B1088C1BB99A3D21EA45ABC67817B53D2
F2E17D9542EC8662B79D5271A6623C78D6539FDE6A33BB85853262991211D956
0FEC7DF0079349EDCE783ACA9E1806668708C4ADE0DB35A26F0F8EA6B1F11CD4
8BF249D469C122CA7E06A519E6912491C72C33B1F344AF2C9E18DF35FA8AB202
25F90BBF245B3F4774E3FA40E02D7F0CCD17CCB8A00538EA77209740CCD6FAA7
DA5CC3E0ECCEFB3E4175678406ADD29BC6E5C5AB0F7FDE252A7CDF760AFD03ED
F6916337669F127A8161F002F932007EE1CFD8AA2BB6734840C435D14350FFE1
34E73AB96EF1DE4077ABDD168B38707832BACA89B3751F94A1DD223A177D508C
6DB5450B6B735182142AC57D12C4B842D826D1AFDA2EB300B269AF06C735EC53
180034C6AFE4DACB4B885619E875F92508BD16F37AB7C005BDC452746BE32664
42CFA03493694DFD205A8C9733876A725ACA61D3F3EA9E3A7793742D6FC212D9
4775670D89B53223A8721A7FB9D304D53EF0A4C7CDDDAE988A1C23C7B8940FA1
760707956F456B48E3FC6A3C1599D0D118ED30030D6DD9919A65BC00F983BC3C
75E3160AE902CF8270CA8607D947DC39AE5BFF894F05D5B97AC6DE222B59C4E8
61CAD0E431C3DF04C2A49DEFCB1E0F9EB4A217D40D0FC368FDE0421CB2F26CF8
E4C940BB95F28BBA1758C3458FFEC238DF18DE2440E65CE8F30D013CA638BF0A
3329D6729343CA4E428E8E737692252A4078C09B247D9FD2D198CEADA5CD9C9A
1FD917E7C193A5E447156E240B3BCDBE146C611B05DF0C732B2DB7CB2F4532B8
66B8EBEC4FA118CEDA6B3AF1EF1019886DC1F6620C0E7512E83E48417AC54825
D4982D64E20A5FFF5C57DF3B469A98E6730FD4233D88321049AA5C08B80A85F5
30556C5BD2470CDFD0E79E5C142E9553A88A72683C54B45F81683CADA0AC3925
4D8A183E077D5BB2D9905D1B8C6F4C3D558305BA3AFD04DB19E86A5DC8D0CC59
FDC88DF8D0486C7878ADAA8F6DCB53E0AEEE5CEEE6FC2E7A23E84512883A0BAE
3F5ED83998AE4EC1F94D0984D705AFF2E70CE819D94A32B120F139DFF0B6B225
A8002C31FC06268F7C7869846075C8017FCEFF7704030845AE06640456032033
4C0AF52388BE94F35B2BCEE0F01678D78C5DDB56FB836955DC93CE04C39DEE15
D7DE0FFCD6CBA7EBE54B28C8A2A0C0BCFE7D841DFFF13F39D4719AB952377C6E
95AC3B7486C9BB14891386D086F91FBCB7878D04C20F1585204F3266C628C679
69F8D9B2BAEDBA9A634508DFD10A9828E3B140CA3F37FB69F3EDE3A1FB38627B
337574EF7D7FF258420479C176E92D425AEB9A54D96C2BCE224EA14396628E28
45DE068045C44773E4BC0FB523D4F8D607
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (Assignment4.dvi)
@start /Fa 170[48 37 4[48 44 4[22 73[{ TeXBase1Encoding ReEncodeFont }5
66.4176 /NimbusRomNo9L-ReguItal rf /Fc 134[40 3[45 25
35 17[45 19[76 77[{ TeXBase1Encoding ReEncodeFont }6
90.9091 /NimbusRomNo9L-ReguItal rf /Fd 134[45 1[66 45
51 30 35 2[51 45 51 1[25 2[25 3[40 51 2[45 13[51 2[56
2[86 6[56 16[45 45 1[45 1[45 2[30 7[91 1[45 35[{
 TeXBase1Encoding ReEncodeFont }25 90.9091 /NimbusRomNo9L-Medi
rf /Fe 134[46 3[46 46 46 46 1[46 46 46 46 46 2[46 1[46
46 46 46 1[46 46 3[46 1[46 7[46 15[46 1[46 2[46 1[46
3[46 46 2[46 46 4[46 46[{ .85 ExtendFont TeXBase1Encoding ReEncodeFont }
29 90.9091 /NimbusMonL-Regu rf /Ff 134[45 45 66 45 45
25 35 30 1[45 45 45 71 25 45 25 25 45 45 30 40 45 40
45 40 12[56 51 61 1[51 66 66 4[30 2[51 2[61 1[66 84 2[51
2[25 2[45 45 45 45 45 45 45 2[23 30 23 1[45 30 30 1[71
35[51 2[{ TeXBase1Encoding ReEncodeFont }52 90.9091 /NimbusRomNo9L-Regu
rf /Fh 240[45 15[{}1 90.9091 /CMSY10 rf /Fi 134[60 3[66
40 47 53 2[60 66 100 33 2[33 5[53 66 60 13[66 2[73 2[113
3[47 7[86 15[60 3[40 6[100 38[{ TeXBase1Encoding ReEncodeFont }21
119.552 /NimbusRomNo9L-Medi rf /Fj 138[50 28 39 33 2[50
6[50 2[44 50 44 1[44 19[89 4[72 3[72 9[28 50 3[50 1[50
50 50 50 3[25 44[{ TeXBase1Encoding ReEncodeFont }21
99.6264 /NimbusRomNo9L-Regu rf /Fk 139[40 56 4[72 112
3[40 1[72 1[64 17[80 15[96 1[104 6[40 1[72 72 2[72 72
15[72 35[{ TeXBase1Encoding ReEncodeFont }16 143.462
/NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 100 -136
a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 100 -136
a 0 TeXcolorgray Black 0 TeXcolorgray 109 180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 109 180
a 109 180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 180 a 109 180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 109 180 a 109 180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109
180 a 109 180 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 109 180 a 109 180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 109 180 a 109 180
a
SDict begin H.S end
 109 180 a 109 180 a
SDict begin 13.6 H.A end
 109 180 a 109 180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 109 180 a 0
TeXcolorgray 0 TeXcolorgray 1311 635 a Fk(CS738:)43 b(Assignment)33
b(#)j(4)1150 1092 y Fj(Due)25 b(date:)p 1 0 0 TeXcolorrgb
31 w(30)f(March)h(2012,)f(23:59:59)f(Hours)p 0 TeXcolorgray
109 1484 a
SDict begin H.S end
 109 1484 a 109 1484 a
SDict begin 18 H.A end
 109 1484 a 109 1484
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 109 1484 a Fi(Submission)30 b(Instructions)p 0 TeXcolorgray
245 1691 a Fh(\017)p 0 TeXcolorgray 46 w Ff(Create)24
b(a)f(single)i(pdf)f(\002le)f(named)55 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 5.4862 neg 169.6917 10.92291 .5
Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial Fe(assign4)p 1805 1691 28 4
v 36 w(<your)48 b(roll)g(number>.pdf)p 0 TeXcolorgray
245 1879 a Fh(\017)p 0 TeXcolorgray 46 w Ff(Send)23 b(it)h(by)f(email)h
(to)g(instructor)i(\(karkare@cse\))g(and)e(cop)o(y)h(to)e(both)i(T)-8
b(As)22 b(\(sbjoshi@cse,)k(pritesh@cse\))p 0 TeXcolorgray
245 2066 a Fh(\017)p 0 TeXcolorgray 46 w Ff(The)d(subject)i(of)f(the)g
(email)f(should)i(be)56 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 5.4862 neg 115.48946 10.92291
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
Fe([CS738])48 b(Assignment)i(4)p 0 TeXcolorgray 245 2254
a Fh(\017)p 0 TeXcolorgray 46 w Ff(There)28 b(will)f(be)g
Fd(20\045)g(penalty)h Ff(per)g(day)g(for)f(late)h(submission.)43
b(In)27 b(case)h(the)g(assignment)i(is)d(not)h(submitted)336
2367 y(within)c Fd(5)f(days)h Ff(of)f(deadline,)j(the)d(penalty)j(will)
d(be)h(carried)h(o)o(v)o(er)e(to)h(the)f(ne)o(xt)h(assignment.)109
2530 y
SDict begin H.S end
 109 2530 a 109 2530 a
SDict begin 13.6 H.A end
 109 2530 a 109 2530 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 109
2530 a 129 x Fi(1)119 b(May)29 b(&)h(Must)f(P)n(oints-to)g(Analysis)109
2866 y Ff(Perform)f Fd(Flo)o(w)g(Sensiti)o(v)o(e)h(May)g(and)e(Must)g
(P)n(oints-to)j Ff(analysis)g(for)f(each)g(of)g(the)f(follo)n(wing)i
(programs.)45 b(Sho)n(w)109 2979 y(each)27 b(iteration)i(of)e(the)g
(analysis)i(in)e(the)g(tab)n(ular)i(form)e(as)g(described)i(belo)n(w)-6
b(.)39 b(Sho)n(w)26 b(only)i(the)f(\002rst)f Fd(4)h Ff(iterations)i(of)
109 3092 y(the)23 b(analysis,)j(in)d(case)h(the)g(\002x-point)h(is)f
(not)f(reached)j(in)d(4)g(iterations.)250 3205 y(F)o(ormat)g(for)h(the)
f(iterations:)p 0 TeXcolorgray 0 TeXcolorgray 546 3318
2906 4 v 544 3487 4 170 v 595 3436 a Fd(#)p 689 3487
V 274 w Fc(M)t(ay)1079 3450 y Fa(I)s(N)p 1379 3487 V
1569 3436 a Fc(M)t(ay)1734 3450 y Fa(O)m(U)6 b(T)p 2069
3487 V 2285 3436 a Fc(M)t(us)n(t)2468 3450 y Fa(I)s(N)p
2759 3487 V 2941 3436 a Fc(M)t(us)n(t)3124 3450 y Fa(O)m(U)g(T)p
3450 3487 V 546 3490 2906 4 v 546 3507 V 544 3676 4 170
v 595 3625 a Ff(1)p 689 3676 V 1379 3676 V 2069 3676
V 2759 3676 V 3450 3676 V 546 3679 2906 4 v 544 3849
4 170 v 595 3798 a(2)p 689 3849 V 1379 3849 V 2069 3849
V 2759 3849 V 3450 3849 V 546 3852 2906 4 v 544 4022
4 170 v 595 3971 a(3)p 689 4022 V 1379 4022 V 2069 4022
V 2759 4022 V 3450 4022 V 546 4025 2906 4 v 544 4194
4 170 v 595 4143 a(4)p 689 4194 V 1379 4194 V 2069 4194
V 2759 4194 V 3450 4194 V 546 4198 2906 4 v 544 4367
4 170 v 595 4316 a(5)p 689 4367 V 1379 4367 V 2069 4367
V 2759 4367 V 3450 4367 V 546 4370 2906 4 v 544 4540
4 170 v 595 4489 a(6)p 689 4540 V 1379 4540 V 2069 4540
V 2759 4540 V 3450 4540 V 546 4543 2906 4 v 544 4712
4 170 v 595 4661 a(7)p 689 4712 V 1379 4712 V 2069 4712
V 2759 4712 V 3450 4712 V 546 4716 2906 4 v 1286 4837
a(Result)24 b(of)f(Analysis)i(for)f(Iteration)i(No.)i(.)14
b(.)g(.)3627 5675 y(\(P)-10 b(.T)j(.O\))p 109 5694 3780
4 v 0 TeXcolorgray 1976 5943 a(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136
-136 a
SDict begin H.S end
 -136 -136 a -136 -136 a
SDict begin H.R end
 -136 -136 a -136 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -136 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 180 a
SDict begin H.S end

109 180 a 109 180 a
SDict begin 13.6 H.A end
 109 180 a 109 180 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 109 180 a 0 TeXcolorgray
222 271 a Ff(1.)p 0 TeXcolorgray 336 554 a
tx@Dict begin { 71.13152 14.2263 } PutCoor PutBegin  end
 336 554 a
155 584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 43.58134 21.79066
3.67096 } false /N@b1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 155 584 a Ff(1)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.30635 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial(b)23 b(=)g(&a)336 554 y
tx@Dict begin  PutEnd  end
 336 554 a 336 554
a
tx@Dict begin { 71.13152 -28.4526 } PutCoor PutBegin  end
 336 554 a 190 584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 35.06236 17.53117
3.67096 } false /N@b2 16 {InitRnode } /NodeScale {} def NewNode end
 end
 190 584 a Ff(2)32 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 25.78737 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(c)23 b(=)g(b)336 554 y
tx@Dict begin  PutEnd  end
 336 554
a 336 554 a
tx@Dict begin { 28.4526 -71.13152 } PutCoor PutBegin  end
 336 554 a 155 584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 43.58134 21.79066
3.67096 } false /N@b3 16 {InitRnode } /NodeScale {} def NewNode end
 end
 155 584 a Ff(3)32 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.30635 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(a)23 b(=)g(&b)336 554 y
tx@Dict begin  PutEnd  end
 336
554 a 336 554 a
tx@Dict begin { 113.81042 -71.13152 } PutCoor PutBegin  end
 336 554 a 158 584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 42.96808 21.48404
3.67096 } false /N@b4 16 {InitRnode } /NodeScale {} def NewNode end
 end
 158 584 a Ff(5)32
b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 33.69308 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(a)23 b(=)g(&c)336
554 y
tx@Dict begin  PutEnd  end
 336 554 a 336 554 a
tx@Dict begin { 71.13152 -113.81042 } PutCoor PutBegin  end
 336 554 a 170 584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 39.92409 19.96204
3.67096 } false /N@b5 16 {InitRnode } /NodeScale {} def NewNode end
 end
 170 584
a Ff(6)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 30.6491 11.26778 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(a)23
b(=)g(*a)336 554 y
tx@Dict begin  PutEnd  end
 336 554 a 336 554 a
tx@Dict begin { 71.13152 -156.48933 } PutCoor PutBegin  end
 336 554 a 168
584 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 40.53735 20.26868
3.67096 } false /N@b6 16 {InitRnode } /NodeScale {} def NewNode end
 end
 168 584 a Ff(7)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 31.26236 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(*b)23
b(=)g(c)336 554 y
tx@Dict begin  PutEnd  end
 336 554 a 336 554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b1
/N@b2 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336 554
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b2
/N@b3 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336 554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b2
/N@b4 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336 554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b3
/N@b5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336
554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b4
/N@b5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336 554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b5
/N@b6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 554 a 336 554 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 2.84526 2.84526 neg 0.0 0.0
0 0 /N@b5 /N@b2 InitNC {  tx@Dict begin /r 0.56903 def /Lineto { Arcto
} def 0  setlinejoin false pop end /AngleA -90. def /AngleB 90. def
/ArmA 14.2263 def /ArmB 14.2263 def /ArmTypeA 0 def /ArmTypeB 0 def
/loopsize -85.35782 def NCLoop  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 336 554
a 109 2447 3780 4 v 109 2484 a
SDict begin H.S end
 109 2484 a 109 2484 a
SDict begin 13.6 H.A end

109 2484 a 109 2484 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 109 2484 a 0 TeXcolorgray 222 2584
a Ff(2.)p 0 TeXcolorgray 336 2867 a
tx@Dict begin { 71.13152 14.2263 } PutCoor PutBegin  end
 336 2867 a 152 2897
a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 44.19461 22.0973
3.67096 } false /N@b1 16 {InitRnode } /NodeScale {} def NewNode end
 end
 152 2897 a Ff(1)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.91962 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(b)24
b(=)f(&d)336 2867 y
tx@Dict begin  PutEnd  end
 336 2867 a 336 2867 a
tx@Dict begin { 71.13152 -28.4526 } PutCoor PutBegin  end
 336 2867 a
190 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 35.06236 17.53117
3.67096 } false /N@b2 16 {InitRnode } /NodeScale {} def NewNode end
 end
 190 2897 a Ff(2)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 25.78737 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial(c)23 b(=)g(b)336 2867 y
tx@Dict begin  PutEnd  end
 336 2867 a 336 2867
a
tx@Dict begin { 28.4526 -71.13152 } PutCoor PutBegin  end
 336 2867 a 155 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 43.58134 21.79066
3.67096 } false /N@b3 16 {InitRnode } /NodeScale {} def NewNode end
 end
 155 2897 a Ff(3)32 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.30635 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(a)23 b(=)g(&b)336 2867 y
tx@Dict begin  PutEnd  end
 336
2867 a 336 2867 a
tx@Dict begin { 28.4526 -113.81042 } PutCoor PutBegin  end
 336 2867 a 170 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 39.92409 19.96204
3.67096 } false /N@b4 16 {InitRnode } /NodeScale {} def NewNode end
 end
 170 2897 a Ff(4)32
b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 30.6491 11.26778 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(*a)24 b(=)f(a)336
2867 y
tx@Dict begin  PutEnd  end
 336 2867 a 336 2867 a
tx@Dict begin { 113.81042 -91.04834 } PutCoor PutBegin  end
 336 2867 a 158 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 42.96808 21.48404
3.67096 } false /N@b5 16 {InitRnode } /NodeScale {} def NewNode end
 end
 158
2897 a Ff(5)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 33.69308 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(a)23
b(=)g(&c)336 2867 y
tx@Dict begin  PutEnd  end
 336 2867 a 336 2867 a
tx@Dict begin { 71.13152 -156.48933 } PutCoor PutBegin  end
 336 2867 a
170 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 39.92409 19.96204
3.67096 } false /N@b6 16 {InitRnode } /NodeScale {} def NewNode end
 end
 170 2897 a Ff(6)32 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 30.6491 11.26778 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial(a)23 b(=)g(*a)336 2867 y
tx@Dict begin  PutEnd  end
 336 2867 a 336
2867 a
tx@Dict begin { 71.13152 -199.16824 } PutCoor PutBegin  end
 336 2867 a 168 2897 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 40.53735 20.26868
3.67096 } false /N@b7 16 {InitRnode } /NodeScale {} def NewNode end
 end
 168 2897 a Ff(7)32 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 31.26236 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial(*b)23 b(=)g(c)336 2867 y
tx@Dict begin  PutEnd  end
 336
2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b1
/N@b2 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b2
/N@b3 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 336
2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b2
/N@b5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b3
/N@b4 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b4
/N@b6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336
2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b5
/N@b6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 336 2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 2.84526 2.84526 neg 0.0 0.0
0 0 /N@b6 /N@b2 InitNC {  tx@Dict begin /r 0.56903 def /Lineto { Arcto
} def 0  setlinejoin false pop end /AngleA -90. def /AngleB 90. def
/ArmA 14.2263 def /ArmB 14.2263 def /ArmTypeA 0 def /ArmTypeB 0 def
/loopsize -85.35782 def NCLoop  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 336 2867 a 336
2867 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b6
/N@b7 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 336 2867 a 109 5694 3780 4 v 0 TeXcolorgray 1976
5943 a Ff(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
