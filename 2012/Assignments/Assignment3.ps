%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: Assignment3.dvi
%%CreationDate: Wed Jul 13 11:53:12 2016
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi CMSY10
%%+ StandardSymL NimbusMonL-Regu NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o Assignment3.ps Assignment3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.07.13:1152
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B25D6ACFF36045FAC6423C5CF3536B58
DC98F1880BAFED29A526BF84EE4ADB8AA3037D1E1591107758A82505660B8192
F37463DF15E77DCCF88CC3C1DDDC1F129EF782F587DF5E020B27F5307ED470B9
1D640F872D37B72E6CBB13F8DD625749018A1EC19C159998A4AA4E2F37FE2697
E36E7F3CB0F12827CD04C792296F18E8A07A4356D96A0CACA7DC161593E077E4
C33494AD1E41A8CFF85C4F2A5AA05E2036DF5136C31890F6C58824EB99BCACE4
5EE0ACB76A2D16B5A52BA7D85FF65ED72E5B179E8812D5057220C9AE78F487A7
DB26B83735161386D47098F9822EF7074BAD0B1361B0A9F4CAE0980EBE618AA0
264D64594B36185BFC21BF84080DF4AEC960EE3BCDED36FEC31EAABE44B4E65A
C48490F7C5C62DF833DB9BF71445C13667865BD39EA4AC0ECF36C30F76ADEB12
ED4A41BADF2F9A511FBD7715BA7AA3BCEC0FCDBBE065A4076A4D467ABF02E625
33F9F3689D9F8CA2BFF3F9D381CB388A15FFDF32B806286039E75042D590F24D
8FE9F50D35EC6D184F6E19AB6FE2B6725D8E51932E88F37C75D26D3C73FFDA91
16B4E8CBED2FB8719044CFAD402ABF2204F29C9F3591DD4C298417194F731606
8F4BB7DA76AA2C882177D42806D5DC56CAFD7BA86892B7BAB3BAB10224B9DD96
A135DE24B41E07EB960FFB6B386EC6CBB70E7D89DCEE471A182A205D85B6DB65
5F64D923DADB84A21AD62D6867CE44C3ABA2D259E27A0625D1B58A97F2C011BE
5763AA6AFC837716574D27FCFA754E450EDC6802C21B5561DBC1B19BFA4431E2
C5647893C77B085931FED54F2D98B06CEDC3CAAC3CB5A692963B925269B08B19
376CE9DDF854810CAEC564B8FD0C16DE3DEE08972754E1D090E3081CBB0C8CEA
F97B1BF0D9D70A9BB0907345E94EA10FFB43787E38705CC0FC66887FF3C56318
94F73DE1928DD132C794A557FA42524928D763D101D9D2254012E215397250CE
D23DB8D3DB5CB79934F28965ACEFCF961DE09207C3BF6483122F4F15B8BB46BE
DE5CB39781C363D4EA62F226F806D87D2F4A72D390E6ED1F5AC8F789CDCD54B1
2FFB9CFDD5D8E1F3EA3E2978B9BD5D5E25729951AC2D62B22B884D9409172625
1327BDEDBA3DD6CA941A073AA931A9DAD05B812EAA05DEC5A6772A655E75FF4B
CA7B685CB9BBF81826100A3B62E38E11983EFBBFB425AAEDCA98CCFFAD21A315
FC7E002C12BB8F55B066A85CE4B31B5122F06BBAC223718A7C719EFD5003B09E
66C258FD2E5B531BE25A2E1800F84A34CF4A35F125C1EB50705EBF5140D6D970
FF43D45390EA5CA18898C9416D1974F589C1309F845196CCA40B3C1B8559E0EE
254C0DEF9D92F59D62A9E00F4E9517126FA2F5FA26C33C047D69929D29FB47A2
12AB0D7C8C5A4BB092D34EBD7830580FCF14B26666E8F75B6BC6389E7A85FDEB
C0D0F5EA9914BB1EB4AD55DF687B4C7F124920F46186D31460A53BAE828D3411
D613F0CCAC20A2E48B37F8BD8D00AC7B458D5A131A130D6F49A7ABF47833791F
154C334CA5F336B3BAC97AFC9599AA0F452D028F4FCAD948A34F6CDEA9EE0EE9
B4758840BA025EA0890D3491DBFB17AA6A4A9BA957C559187CF9112E36190940
DD0C374E262AD63201E898FF90F32CBC0DB24CCB011E6D106749A17C7656E580
F11B15DECEE5C986C6AA7D80320A50541E4344DA42078FB5C68F0231E5F3A9BA
C7AAFB44F45934BA39B814F9D6247965E1A4B36E62F6AADF2106F72EBB0DDC10
C55C02FB02663AA47E2BDC5A51A03983A75451B152FD3D6926FC9A607428F71F
D761E59014DC4B23882B1FE802167DCA086C1D255EC75A3AE91E22D2F5A3F459
DD8E935380E47C868308F3909B3933BAB879FE5C4D3C87DEF573A60784EAEBDB
F853D3F341EC43C973FF8A45D5EB7DD25E1A446F891C2323B6D487F710034174
2DA404FA1740D6764BE0838BB02F2F989ADAEB9B67731859330049A07BEEEB8F
3A96F0A0DA42E76BFB4C57B993587BDF4AEC120302B242F6A474B23CB8650C71
D9C48B2A86B200B23FCE6AC14DC0D63D97C5E0CF7AED088DB602776E590699BC
2902CEE4F6038638431CE2A9311303223DAC52DD1758660371D013BF7BDCC546
407878C4F009B98A15655130F13508C898DA88FC634318FC0AC2DDC4CFB2646B
ABD581826998332FC52DD532E9380790C3748359EE8508AEEBFE5953A0355A6E
A6E0EB39055A92BB805E985D68CFD7AD774C920B69424ECDD2BFCD831C74E526
2430E9787D1CB7FF245D3D0A0CBBC22A3CDE08D67CECF52D6574493ADE256803
92D34BF377544AE822A21E37ECBD060A0E76AC6A5FE5066FE33DA5CC202D986D
76B36FA6ABDEF0B405B4D78122614FA79720A5ED227495E04C12D12CEEBA10CC
24327B621A5DB70382443F5162E08E082375658877251D6A24CFCCA2E5ED91C7
CE51FB049ECD91AB7381FC7FD3F43407A435EF8C6F270AFCD54FE903F4ED9285
8CEA74E46B072AE4B7804A606D16FE6DDB6B64785C6EDC1F4A5CBEDEEC2A2923
15B0EFE711C5429B29921DD2E8EFDDDBA23BCE177A0CA0F44A218B7E8A4B42FA
7384BB45DC7B10A7C7A20B2A297D7320EDD2F1BD7D2C2C391859B2721D065F5F
2FBB2F588303F9E8178B494B752FF1D2DC4CF005D393672A4EF71E99C46F621C
3F54BB67CC7295E60E1FA8505F116CA6B8B16E07C38820023C859D8164210440
53944F8E30FB7C45138F9258289F3D852DF5766BFE8C376761D5EE9D36A7780C
8F309482E34130697B2302AEAE34D43453869AC133EDA38959FFE35D3A235D71
197267F57D8AEE995D0CFBE352C3B224C77AE3DA0C7A1918FDE768DB4489F82B
312DA89426D4BA074DFC327529AE2691552168E068DF4ACC74B2CA07C372A8B5
34173F947839FB3654757E4DFDCE1FC10246963B62659842A7B90F8B2165401C
7010E0B69DC1F1B583825D1B428F0698672E8720A77B1E74ABF75AAC0C4BCBF9
11BBFBD73E1621E4508215C9B660518C489F09E1CB09C9417A6D014C32516B31
2F956377F3BB8AA51657E0899DB56C02250A5F80A39279C5FA2AA90974A96969
FACFB91E5F68EFADCD60F393A3139646A541478685B9A26C9910037D3A33ABFA
0789CCCF5CA06EAA89396DAE404A1E34107CAF1E091BD4D021BA0F46E75EB5B3
FA428D19F5612E662D8EF95B3B6E50CEAD45ED28326BCB95F37929EE55B032A5
89F1E51670D9EF415AF8D2C5DE48973B6DEA41433537F62646ECB52DA43DAB8B
6EFF2095FC359FB9BC672AC4E1E2B67AC30B934188AEA12B031507E4A021B3C7
7D5BC74DF7052CEDE2D82F8DE19043514958D8351709F0F4583EF1D6D18B70B9
5F4662FCC20AFED9C8AC33C07C9C128816B7339FDCBCEF21DCF52A29B1D70EC8
F386FC06E20AE722B2BB183C2810080C6E7D9BE7F0B2215CB9660EAA993BE5FC
200C173DAD81F1B26262515F0A04B1BCEFB64BBEE7C595B123A580A6D1986440
49DED12F4BC687147BAAB8C78E9ECFDDDE7F42128EAE3004F46894726454A38A
21DB04406E0F9518F15AE054F273399DDE36E03923EDA8E2FBACB8D3C58CCD07
BFCAE08D822F6492183B89A5F6281F58DD7BBCD7B39756AB4CF8D67A7649996D
B26A6F5886A43625C6A60E77A37D5DF696215C2ADFAF9C4ED4EB6497E5FFC3F4
2F921D984D4B0250FE6BE65992D875CFDE24AFC8ED8094BE2CD254897308C50E
FF8B523251AAA1CEDEEEB5C5AF185162D3686B06EC7C748A40418C537673315F
27397297DA1FE70AF2B48E065F9997AC8861CE96F7A943F73D80AF7245D87AE9
6D087A15FA2041EB7E276B0510226F8E34371375852E31AF8787CC19DDBA90A7
98667891AFB479D218627A66EC82A85A404546BB855455F4F39629920DE0A338
927F2FC4FB3367D895699C7120F4462D966F027B7438084B28D0716D01B66A75
FCFEB24702A1E5E0989D3A7F3342DB6C0FEE6B1DE81B7D0A6619E81ADEE61E45
7C6AA879DF2A2CFA1A02E0570ADD4732046171DB5F39DF8CE410151924AD8054
1594493BD50350C867CD7887EEE60628A76E73592275E9C05024A870EF57FED3
3CFB47A9C3693237F1E2B874F91CDBFCB6344CEA910417055CB4ADDEB74BDE67
8A10433A58C2D60DFF13F4B2BFF0C2D48D73A369A4A30AEF829E9C14DBD893D2
79F20F49DC8C5F2C43537EDC6CF44787FF223A3B323D692C4C908EE66282FDF5
A5C5DC3B3FF9DE9959CC5CDE05CA9B914F8749608248E964FAC5A5FFA1FEC880
08BCFB5118AD783FD8DF7AD569786DC93285487121FB3EBFE72A4B9268E1F3D0
65E8B894802A0425C1A4F2AD6C62F7B93336ADD7402F1105F4D166BA507A1EDB
131616EFCF91246FC75DE3D8ACA42DA4AA9C9A46A036505D0E6D9CF486DEFFCB
F4370F080F0782EA3B1142C76B364D2D85AF83BDA04D55FE90F74BD39E743817
6060D57988F9B32D331AA8D21123F05440BE467933216C0A17193F829547FBDB
773583A75451B152FD3D6926FC9A607428F71FD761EED7C204AE4868012441E3
6CCEB83971E3268925E478FCC13BD01C6450DBD0DE1D9CD163520429734028A0
3925714419B8C988456CCC24B81FAD59AD71A3EA6281E6DC09DFE6D18BF86690
3D3C694EB91AAA50A2E1381CB546689DCAAC17040818D582E97651804F3E00A8
86CD9DCBDEDF31D16F8FA295C21BCD8ADA963BE6AA380A9857B805BB3B481D2F
DDA9B1AEFCE7042E845268A56E367D80AB29768359646F8224EF383941CC0B5C
72DA6029985D3639A9F708A5CFDAC715C0246755CDC0004124A9CB31540DDDF1
5201B12FEFEB9D04FAA4CD3BBEF1AED8D00A3AEEB5328A5436567D6AA32DF46C
7EF465E963B3FEEDA9112932898719493BEC545829BC2C9C99BE09D7BBDAF95D
C405813EAF27D51349DE8BE84D9900BE4931BB29145CFBD08C8B03B8407E5D13
9E07302EE8E6192E8598D13746C51D549C5A736A31B3C4C3704DABF60091C43E
928D8F3BA9DCE374762E175D48FD6FB3D4FFB69DE61451CC4F481013B1B34B17
09CD463EFA086A3257406D4A6EE7F9A6763CC5AC6F9A7774CA5FEB547A623772
E7CEB9EF9FB9D4C8DBC560290FA2C1BAC7ECB71479DAFF439CD5A1E798146062
0136FB25AA48E76FD8655F055ACF71E5859B97E825E6744E30274BDF9143A322
225C68846EBE98957D97DC9C4A704CEFBFFD5F2B6AD993396D47805E42311278
7B0761C181AA94D9A3C090E131853BFC2E4A831142191F6E7F83B8F1BC32C302
1C15E243DBE5729148ADB217D5CE4C56DEF18BEF1136AFB42685F1A3D080DE8F
DF0905D12A6E339EC90324A66EF274154BA653D5C26C224A560EE958725486FC
8992B9F614A8EDC2F0821009F5686D971013CA02DF4AE86FC57C05ABCD39935D
A37F4B3EE167332EE2F89199BF4F71E1F6B3B19F4DE6A82F8F0BC953D4C51AC5
170A1993507903E4144E3FADA698C708406FA5BD31969F35191077E0BD32C3C4
6BCAD00CAE3D94A9F5770C64D99B82C119ABD84D4CE0F7546BF9068A1C611433
2BCB9EE663264B6E2B2E3BEBA1EE24B2691978A00F8F92CC6F6F0883C1386E06
68FF164EFBF2FABBAFBB0CCBD932A4C517BA7C024CE791E9E85821EC83DC8F54
EB151A227A6A71F3D480BA152D4448D4AD43833DD68C5C8F24ACF262A36A8205
C68AA0B892E2BDFB72AC08A9BC2BB7783E87F35E9752D76D9E7A10EC55B785DB
96F62E89B545CC8CE8B786D388BFB0080737096B3C1677441EDA83014D753458
2A02C675ECB0DE30D839028370534CA562A06A98ADFCAF9D29989D2306690C96
1D630615DF446C732E191427FC63A7A675AE7AAC016FFAC375AA2DA273F58376
2972A3F092948269ADFAF5FA6A47330C65142831E8D1ADB51AFE9B73054A68F4
2CFDF79CC15FB2559AD26214D8CD8AC4A2A5D59F0133315E85A367DAA48F432E
345EB92EC184D089B5E8CB9E1026301C252F699466532BC3EAD5DD794764AA2E
E082A814D7231E7D89935C3F53F8165F1DBE1A3DC2EE6E4E0F84259EED300275
371B4444F93ADF8FE08B4C02D238D4B7032D2275D552CD50963F8E2B3489A000
78BCD1A1080C457601646F7B0F9056BEB15C7ED66C309A6BD61C1A6E98311D9F
5F20B918A6C0D6E3D543E1129072455A3465783458835F08496D712E62BFCEC1
83DBADBD8A43AF1D7181D637A568C66807E6733AFA69EEF2ECAC9932829F372F
0F8A9DDBBD4CC5F37BCFF201E46FB3420FB5788560A09FC7BA765707352D05B1
3ADC415EA14BCA977C9A0A4BD968B029671FDCAD56FCD82B1BAF11641605191E
70AEAAF0EF7E85265C65B95EF033AAE53D69BE5F5DD7A6A78527EE07A2FD660B
FE5D799759E50D842F6219030AF596A99263531A205E0A5B495BF7B95DDEE7D1
5A1182ECB8CBCC21AF852399414A03D076809E3652A656B1A57D8BDBB6C7A480
C2F4EF81E5183A511BA4C80DCF6FDCD74B204F85325A2856D5C89E7C8F6DB45E
CECC9D7774DD574E00DB520AA09142480DE160C67AD659B1E4178EC6B1F6D6B3
276A1896CF1BF8385B18ADFA1A7E4DD6983E4A66D44E3564B56D1D9A89C62F5C
28D408DDD7D4632BC1C0CEC1D2C011464FCEBF55EB3CF12754AF15E6F66D5889
AA38107618EED26B3A0F926E49937EA2BC85BFB6A704A0C274D99B8FCE9BF97A
624F19AD7E63269A0A1824B829CDF655E9702F33DB0394B7CE670CFE23D51559
4FF44BB61CFFC872CA02127582E9485A7FC80398D237F2BBA803A7FD5CA37F62
1566B7E92A69245B13C87352ACF493B488EE3D49550A5B5F3E0B88FC81BDC803
C9A6E40F18E9B66CCF97FC29035B8138B574C8CF488DCAFC296FDDEA7F3E1E31
F2B282B6A230FB5E05747513ED1C57926BAD7877EAB668CDF3AA96012837CA40
EDBADFDA5E4A17A51D9B65D4F8B36A2F1374341661F6C49E0CEAE96D15597F67
3722A2BBD907955C3006F484366196B4BF9B914EA5919423998F663010A56CC7
44D9947BC5A8F35FF3CE20AC0A394EBF112AC015029A4189E4FC857BE705B3BE
2F6D421DF42C12DF5A7F3813860E416F9DE120B55B860B6A4A544179C5B7BFC9
F48D092DA89DBF371F08DDF4065AF213BB6F40E319B3DDEABD049EA9B93F44EF
0B0FC1EB5E32247F8356BC23D1EC9D2836174D51B5507E2687555B9E94C3A114
B8B057F328CE6DA8525ADDD4246508E2B802B8D5474E64ED0F80037DF42CF73E
EB40F1866A14D7A563EC86F4152B6894A02DF2562480236A1E02F21C42F70C01
D1586BFD766DD46479427FE45BFD2A04D99E5DF696CAE9047ED64106651E49F8
F5AB034EDF79DB1A95BE0099760774555ACA3D34D93B16163FFBE3370F7CACF7
D2F96BB74F5E3F01C4FD8DDC8DEB238A2554A4ECF333A4A64042CF94A74E4BB2
655173A1B4FDFE7E3A50AA6631EAB378DC015F3AC65184B574418E5F16133AF0
E5F8467A2D59170E71CABA00B9B83A65AA522E7EF3FCEAC65A45AD16FD800A86
696D0480E341439926F02B1D593CA4519EC81C7A93EC9FC3BB5B536EA38DB445
3FDFB80F758D7092AE49124461151C5F7F427D8AFB0BBDB5417E6DD92A460B41
F16987DDD41CF23C331F1AB5460E8B4021EE0035380EB3CBD88C49692FC4ED2F
99688683281F29E09006D410B463FAB666D7E1A177FE91D465F22DD3439A8D9B
E04D601C11B834CA6B62F65C511DA8F7D67488105690D4175CD7246824D38F49
F5DF57381395777CF414BBBBB30C04E5498296C75E4F851F113C993EC8D7AA14
0CCEACEAC762587FCAC643F4DAB3CEF2CD41271050FCC4B0F0FE41F2DA78EED2
998206F24A189E57A046F602CBD93B162F8354700714659BE1E11ADDBC2B103F
C128FE6CE93C051E804571AFDC8C6C93928B984A1E9BAA84A1E99382A43AAE1A
FAE0212A611A611C215DB4BE8483BBE576C1AB6004943384DD06520EE7ACB6B3
91288C9C17B593A490D8F39118710528C20A956D7E005083774CECEBD5E21D43
BCD8FD5A4C6275BA3C5642D832C52CA28BE3F1CB61880A0044EBF5E19FBEF25C
9E6FC4EA42025E9A4ED4E6BC2A6F9B34744C70C9F77C010056AB6B55A3BFC39C
A622665F5189FC47B9F74D7919D475DA0CDDDAE0FBAB3936904110A9FEB90854
4B922831928D252C6E5DD599F32E60A1D5251D270D0D2D081D763D2E25CD1E5B
B0CD6685444271EA2BF01587CE8E7479B427A87086EA10A597E1623529F8734C
0E096F1E58FED86F61EDE3925484E3FA45344C7FD3D4D3A68B7825635C39B92C
18AAD0147814BF27C8FA6DCA0BBA0FF8F9238851C763613B3DB11FF0CADCA844
41115A0F585774E17059C9317CC1CD2DE0E62C839C38A9CDFCD90EC950AA9FBD
B8D9EB3BA37CB97F6454E1E4F307C058B82D99A6F34AB791343187FDA2E69EF8
0AA53B258E61F114A0BE4F1B494BD3185DE85223A77EB43DD46D01E050A7D2E1
E37902017E2A6BCE438DC248140FC06678F93163AC2DB43440202E2A9DDAC2DE
DACD4B602ECB5A4CCCC383201200CCA4C3C1E2E75C3F360F37CCD87F4959A848
F2EDA9F8E0AF2AF7C74DB79A2B45A47D4119D363B0A8AB179AD2F4308068FA72
E47E611ACD8A387FD8136A7C84A8E0A81376F86BCDDE43D2EE0AF274AF99DF6C
F364EB1EBB88E3A7B13539E9012133D3CA034C9561291B03FB69488460352E7F
6497C9C4BC364259B91096A56BD43F95DEDD4A99CC2F0BD0358E73D500D9A5CF
19043C6EC38791B0AC082197A1D4DDC9884E140B04A635B81D04B1A5CF8DE193
CD5E42769D1F86F927B9752A982E8E41006A88B5EBE3EBA0C7901A362981D05A
5AA4064003846C2A4F85501EB8C86C9A1BBDF3E1C9FA6D058BE17FE94A726461
8562DABD7DB8E7F480D0521581902848649AD49D58F3D4BCCF3638857C25C73B
78F5C35FF0DD1AEAFA89CDD33756619AF59ACB9D17A3ABEAA6C652186D61E5DD
0201E5F48DDC07E52E850772EB210276CDB3B1DCA8AD15C9B362B32A00177997
3DEAB1CFF05FE0BED47E46290803D87B91B4892171B39C9410EEEBF42BA0BED7
BEFAE3ABC9211DDFFC557CFDC04546D999D83FB8BC85332AADC336A4AFAC6A91
0A6B158DC42E97769D57AB2B2E2CCD3D3B279ED66EB955E260AF1DCB0E895985
7A5EB30A338BD4134C8C65B2FBBE4C4D1209DFEFAE449075EFAE576231F91345
BEBA6ACB55A4F54A7772928BC38D4D92AE2B362C0DD3A720A714F9F644E5B6DA
F4AEF08E59FF2A6D83FECB628AE6200216FFFD64838DF2DC751519DC897C4B9A
E382347BEBE2B687C32D2A425E8E57F091D687A003EF08E28BED0332975511EA
D0E63A6EC5F3BF2CA1612D3D39C65FBD4C8CBF53A7FD78367F832C9B1CF89A5F
47CEB3DE69C885C5D5C3B27D73F2198C005568E9DB0D8B18D0E9F3230222BE03
8FD63425FD8DB54D1CB73BB10851B0883A211EFC553EF8F7F08F52DC5728A0C9
15BD50A9CC34421678FA95B9397057D3AD58BCD9C22D1C5C1EE57644DDC9110D
5BEFC053A78DCE07E2BF91B9591F8D541FCE8EB70A9BF524DDD160E9A3236A90
8A6168AB71C1704C68D2387A1B07A212F60CB1D4C9830B2C49487F9F1701E215
C9105476C4038F0F099E1320EDD55E381DDD01914B35E059B3CC557AA6AC291B
A5E2076CD11398CCBBE88DDA5846807E38BB7F4BB2D6BD4053E736D47260B91A
842873B0ABB0252E96871148B429B7B9CC69D8FF4CCB36C662C7BB5E07F19B5F
F104782E93A78E9422810F13FD476F83DBCCC28E6E823E0E6CD288DB1294AAF7
90A93CB28D36C2CC0B7F76D3F10A76810405B118619CB178A1F5DF0313964830
41F97BF1A870E03117F9403CC1A5CEF26223D6A85D67CDC28C4D1782DFCE599F
702EC1C7D309B5B68220CA2F6ADC5EBE658F1FB6137F56B13332A9212C987EFD
BA62EE4C9A2A58856AEBCC77E61F50F82ECD3C10073F1C3961F4452DCF36D102
B90EEEF795D92F62EC7AF31ACAC1762B9001386FE3E69D3FF4829A8F9CD0CE38
7C707ED5AF4F7AA2BF1B70E7B5A27EE41A4881DB4C5856F61DC29A9143F10853
8B8DED1CF1281B0D67D4D3CD9E533C4F80A62DF85087DC54B1000267902CC94D
C04795EBE0D227EF39660AEEA8FFAF3CD51D0387B75E4E6D646344E388923810
3B3A0483080432451C176A6C7AFA09B17D9037F290FE9C5E845340C29DB371BE
A0D536717F5F9BC79CDC5C62E2E52982ACA0B60DA56FC6B339AB1369FAFF0A31
BE6A7E7E56B3401CB13DF2C8F111574A3D3CC2A184524882CCCA108408CD7417
3A864B26C39D492C48021AD2B988CB2BD6687282E03C5FF34457E5BC2428062C
30952A4DD9221D71BA58109FAA93D814D3E74A1D1792C67CFF24293FB6F99709
3F5ED44FF227FB58D594E7F57AAA1E21E64A5768DD8705429F585C78E45959BD
7D3CCAD13FFE7E9A3BD55E76523FDF68AF64BD59E3194212E762E04FEA0A5550
3F1AF2FE60BFB5655C37A47A895E0BB06139B11C716AD135E799BEDE4F80E5CF
FDE6C11B7B103FECF0B3C3DC6A79412B676C8B4F11C4EEFE84C3FE28C017EAEB
EFA3CDCF0879C5D1C9566C06CBF852A8ED85416C422FE7211327F13F81333D2F
02EFE122D06298B5E1D093A543251BDB5184F15DD328D2D969B17440CA248D38
DDF385C948B91EA956E9A99B2970E4F8731F4606557ACE2FA8F5AAE9167E3BDB
2F6F49ACC6B0E366AB22C3B44D004D9EE42CC8D1DA1D44C06BCC58D737F722EF
B20FF361E75FF5A124C26FFA6B2DDE83934827A773A9CD4DAB810489823FC1DD
39A85900FE677F33305488F8D1DE4CE7F9BA256631886D586DC2C1EAC71B37B6
208E1D76460AA1F2FEE54CC13C09424FCAC106111B6FADB79C0DD100ABD70F54
D2905E4ABF994CE7A572C45BAA8A82BE9ED1F29EB11EF8CDCF63426D8656C359
A28997CCC9950C7097E412B2E7A5D88F4EF2B2EDA76B74FF1FAD528BCFF8E5D5
C4ED3F3D8EE0EC49C2031D33580E26E5916FDAB1EF9314F03E818487B92CB4B7
7B99F24EF1491E92C976B769AD7D9C83B01FD723DA952F5AFD8B09E4886D86AA
AC6493E0EFEA3F30D3C223CF00DCDD774781E52CE81C7381ABEF2E7EE1814F86
2FE3C16B1640881C65D055280EFF62A565F388603EA2C3648AFE6B6B22FF1696
C585CC0512DC9A114F1A57AFB858438D5EAFA88FAE594D3134A581B94776B4D9
D0EEFD1536AE5EEF7DD1B122F7446EAD0ADAA2580D733A3D0CE51DB164DDBD54
72C8EDBA861D69F091AAC84CAD4933F65396C105CDDCBAF905C12CA50C980FA0
0772FF5771395B3B22508B02505360DB4D6BD9AA9F62B00404205DB004BACB88
9628BEE2C4B077D539CD31EAABF37BF0FF59D21071769D2003A3A5AD6AB311B3
6D745F0C9368153A16F60A8685A3E646F87ABDDF6A73684E96EA547D8606A741
406F58CA1F534D7B3B4A91AC0F3045214D8071665F5EAD9AD1E87836B6C3F3B5
5C5AC6464B64FE825296E19CFE8A491DBC10B477ADCCF4E7A47954CF7AFE88E2
2304DD6F9B3157B5E1AA0B397570BBF8AAE6C6C22CC9B127EF6C518787C54FAF
1B0D2D8ABE3D11E3CC4BC1AE9F5FD8DAB0447042F94FA6CAB71D5E7D89DA968E
586590CB3633923A447C53626360793E67421B4CBF15BDCDDD30DE9DEE75DC5D
C9F0E89B67AB30ACEE073C5D0AB19CD770B2F25D8BB9A05A6F4B50B1E0A55187
8130A957E581DDC090408243A6C095F96B6A10D7D5EFF8F00002F036844E4CE5
5364932DAFDA69D9740CBF5062BB7D6B3485E491641245174F684144A7E53052
8DA2F50C4EEB73E4E392A5C14F68D61472433DCD06B7548CA8461AD0D85D5541
82204164C70A3FDC1650D2F7DCBA233A55A35CB8DB826A5ABCB6AB2708E81CB6
2A6EA84F4A0DFE45BD0F4D95901DE3455363BFB14A9BCEBF9B62D290798C14FF
0E13CB9260194C2DCFF897FE0C58C8B46E63D9D37E967EE87FBEF5B59E351304
7E98D7628BC110BBE71FBFBE3F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB34184AA89FC5E02
DF2419D6F7A616F84C4CD160E676E300BC338232B48A8FE9A9281E4CFB01D867
563247DC1B5DE76E7DB866A2DB1B079A80C28F77F6E80DEAE0F25598F242C987
7EDD26B9DC641195E35E246D4C8C41D27CD3E7503C513BB19334A90124CF4ED0
E151DCDC6BA63055C20B037EB4C97E39AED3868528E67D5DBD10E3358D818992
B09915FCE4DA65A5EA0C4E664B5068382C766444AE8164E11A121448D1CE7FAF
15472855FC65734B48F6F344296AAE767226D89F9DF1BCB2677B82B49A6C4507
41DAED0F23BD69FD67E75250065D68CAA77D1904460E62030455BF64E68F1FB9
860C923245DE04380323F4A92B5A67FAACED1BAE2F1CFC133D751551E4487157
4015D490A70F55BE1A6C135C1123CB216D71396A9E0C75F5F4AF235A76B190B7
C820DD8F5FD0E726E9FEB0B277D73B3383ABDD138A2812AC5E215668D9FB215F
AAFFCD09DEC9B740E2A860554861E7CB83385CDDA42BC4773F93E7A53AE89EF3
89AAAED5239DD8F4C884C4FCFF3AE39EBA1AF456752CA35589CA7D1FC1A124D3
C9624699D76D7351A4A78FC2B63EBAACA5F6565B966BF65083A9120FC2606A90
25D3D8FDC7B5E92735B8A7D7C32900BD6D133FE50034DB8A2F1DE6369D13F15D
202F8467293B7FFC72B6D9F730735BF1C5976FB22AEF42D03E33DA209123B6E2
B7EF9984270692E476E281AC6E7837E2BF45A9DA7EF4199C594986C30DCAB511
686A2C699385B3CD763CA38BB57FB76004D5550F42CA254E127AFE6EB99942C1
4E07EE549EA5707353F5088B5122295F5ECE5B893BB3031FF73A36809D9C84F2
C2145BBC94767AE1567793E1D714909E40957213A4DC05650708AF0A0F79CF18
BDDB8F5186AD9096109B221983F83216977609CFB34F62468B11CA14AB7961AF
1B793142D612730364FD9BD88C1E76E932F6E805AAA5E0614CEFF5B9E76DC569
606581E70B7F9F10AB8DADBB4D53C5BC7D6E87D240911DF09A7B362D7CBEB0CA
28A1E598EC49D35FDFA53F44B6905704CFB5B94DCAD584A303E95B8DDF991217
77114AD0F0B992C9408F72B95440914969A172271DD37D2A7517DF079C59CE66
2982592E37B7836B2B4CFE7185E46591422F245C926D3D3656FE10508FC3448D
0BB56ECF8529DD79B8FC1B2E7AB2D32B7EF781BB2F85B330D06C2096941ECE46
F76D01ED2F01EE61388BA27D431B5958314F45B36D5DB57B5D5B537BD2FF8988
EEE4078B8C789B4A913C790EF56567C6499F12282BD7F9FA4B988C0F5A210928
A46F4F2A335897957F4D8D0EF6AF1130D18540649062C8E5C5347A6317001FBC
B2C91865BCFA6D7598C9E82E3B83B5DDEA83A61881D7F4B24BB1E8D3394465D0
FAE99A64A5BE37FEBDF0D6BFD26E3246B9B5EA106E39DB8DBB0F10307CC13A10
50AF2993D01A8AA1AF3A7547BE39F450F94735009FF9B6BCCBC707FA756BD79F
99D480888129B14A47BDE871B082DF83FDE3D10968884D5ABF7653D4E191CABB
2F222B992B9DAF64EA11FB122200398D64538CB0392DE1E02198D8665F8804A4
F9348890AE035F96669E0795D76DE92BDD0FB89D3EA96634D44F23F39BC66A63
7E9AC8363CA8632425FBECBC04AB15BC27B593C7DE30A657625AE558108EE8EE
6B887792CB6383268685BAF4E5EA6A7BCDD40756E023B79AC0334D6BA69366F5
F0672825F0DB05BD7856500670897B0088227B2ED39F140099BEE013F497EA72
7C3FD9D0C0217C05798787881D07CEFE0191D43B47E1F7AE890D3803E91CE273
8FABBC214C731D7E6763FB6FE9ED851FBC93DD94BC03CF89CA2C37014BAA40A2
031B372029D198F695F833CF2CFDCA9AFB5B6CD69F02BBA5667B7AD337559552
4D22C358B7337574C9FF42B80B297A3DB0DA93741732470CE32104B9AB18F8C5
EF8D5806C643A669C21A1AE571B2C372FD9648095E8E5D3A444C0A3B44D1529A
DC00D74D543440FD41686469BEDBC9D4612B88ED4A02FB47356F2FB2973A47A9
0FF8E334678484A16F9720CFE12B66291A897CD411560247B4D041902FED34DF
170A3AF187C72B119BE5F19E2D9777719D6D11AFC0A70F58A3967DE26F93EB7C
1019B8A18D4135AC53AE1F0470E60207001B8C41F6C9528B9FF55B57B17D0359
A8B6BF01600E4A11FDBAA2689E99E8FA8D81406A6EA773D06645E292CED6B538
05D9798A83E2D37B88E21DA7338F380927E5F28FE8C7401B1D57B22202A9BAE4
91BE425D7A2BD98438497EE26D4746122EDA7F4170C2AC7E775BC06501D31BF5
EAC2144A72003F22957AC237C1870FF9A27828702857EDDDC1F334250A72307B
C56874300D8C46B12E852D33D24CC063809BDA786FF6AF7F29E6A108E6BF26BE
0A3172B95840E3D9E21170F9BC90062F01A933E40F3CA9A8A97082658E6EE4AD
8201436F9151027DCF0B1F18B0DEB4493D2BEEDFEB02B59D7127DFFA9ABFF8C8
2B75F8F8891F0E44196A0CF5A7D6D44F894BFBA0EC53913CEB234A1FEEFF4D8E
64CE7047AE1B23B29775327A3159C7794036B385CEDB09FCBA7076D34D717A00
49FC7E3050981F80D9DB05FD1B6842E97473C0CD420F592364FDBB751B4A4B8A
CAB2C3AA7F787AE010005FACCB317224504F2E921D2552FBAC23F58C8EF808B0
93595E631544CC051BAFED6D98473E78A794F2C7E845FC088331B9256C2F52E4
9FBFA634E2B52B342ADFD6CCBAF383B70A5DE913A73E19A4A7E61F818A2FB69C
671715408E002645BBD5586AE3136695CC2F5DA0FE32744834F79637DD6898F6
78844FF546589FB7B6AA2E77DA147DF4C9215ABB00DB8957E6FDAADAC9B1FE71
C614310AFB2320B6418D1F31E765E0C6EB124DE7E265E7BC6CA09A62D96DB6D7
F4833729C1C1D3003DC75AA35251C19228061DCBF07CEF26AAFC0227696C6785
7BE62416314B8458B5982430EC3D6C245E65927BB24858B429FD9A8031111782
5BADB8E5D43FF96C8056CADFDB6AAAD13A6AE7D2B9FACE75287EADCC253BC1FA
C35A190BF59E2791A9EB8B11EEC6636CF085C1F349215586E1BC20CEEC140681
0B1D9FFFEBAABA91647D4D5E74579EB5A17D055DD7605F9D205DB93EAD76A2A2
F6210324DF3F7E546141288D46B0E15517CFC1DD59C763CF8799E2505AC7F5C5
AD73D8AD944CDEDB8CB0483D46FDA922C93986737C23485DDA703E9EFC2DFF1A
4DBDCB3F45A9E5872DCD4B798C1EB17F8C5D537CFB9B77067018D1924B0F3010
077CFC366086657346E863FCA66C760CB6727C45D6821EF779D6808F75410352
E3FA064D4756586334CF1050567793750B99423601F5FF6B555DF08AC83E85C1
2DD4B4C863C7A272F599BBE049F1EBE8B00922716A597BACF4CE97989D5ACC5A
BEF3352486D7A820D03FFBBB298E36CD504030703DE5077585A11B1710C6CF86
2EB3C31645A200CB5F0CE9E2607D08F4331C097E3FB93B2674A5863191F877DF
BA40E4705C5ED95778987AD17F6C1849C37E4A0D35DBEF11667C9843A31BACBC
4E4D02C9C12F42ED4CDC0887F4E7D57D829F2A7942CA441C8C26C08C552B6BBB
9FBE7089C7ED933E2B15795037F147ACA72D6C2E54EECA6EA4ACCCEAFD36F4E1
2CC122275876733701C536151BA67637FABD1965E18658439C1E7B19D83F738F
4D30DC09535C621B873C53058C2BBCCE3B1939DF20500EBE15C87544AAC73272
D960F319BBAE48BFD56ADB7B3BFF1BF90B9B1FA49B9339B08B5E4AD1F6C88941
68338EE02217F1584AB623B3032B1C41283E0B8FB62A56642341BDB7176581D4
1DBA6380F3BC3F44C5F227B5BB96514A40ABE963649785F697D2DF5F0241C05C
449D8DE05875F01AB676E600823FEC28C30D2208A868EC0D04C0704166CD3DD1
28179D7720635059049FC2FE51840E0BB9427C07939EB5649DED6075ECFF58FB
ACC2E5C986E184BC32D3AEC992B620A98338F962CD1669D413F2D2FC8B6C4CAC
D47A917B8CD1827922BF5BB094E83798EB43CAD793E287BF3CAD7E8CAE1E9BB5
F520BAF5683C070D78A06006E7E92D25A6F5EC9E2780604E7B24E484023D78E9
DB5A2446FF209D4729BC929C7B3CC9ABEADA0440A13599261073FC8F97CCFBF0
042E7C3A5385DE26BA4E0A86B4225ED15714B036EFC2EDDCB059FE7EFCFFF578
C1FCE68C56DD2BD20A3E2112F4477783E8270E28626088CE334876734F8FDE57
7B2C99A5F45D0D352961D9D520D8A429FCDCA400D5983BE98603418CCEC33F5F
6EBF332E4E34F01A8F3E17FC786FFC08C64CAB7EB5329FDE2722254383068091
A84677C52EAA1C687503C663466138E086E36F87098390A0CB4CF09ADAB86CB7
C8EED015507AA428FC184C8F0FDD81B9E734CD5F849782294E71613955B52776
95D90D3D076D162500BA369EF4C0938F6C6D0A94B5CA26C3C72FEC8E37E6C80D
8C95D78D03733F0B2EE19990A5A1CB6D93E1A796AAF37F162A9313C4742CFBA6
87E59AE93D5580BB950606F2CF7B110C2C6A35909BA091C3D519D0E8EEA22F43
C572873A347CA8EDC2BDF2099139883BBDE13DF3AE05BEC1771EDDB9B003555F
9C5AA837B8C0B647161E5C322CA8205214005D2342A187E7B2E096CD2E552539
9EE25BEE707161B0444C4DD87199D2C34745DF2E81BBEFB063C3DAFA424169DB
0E2210AE5ADE0322DDBA57C4B946D6F167A57E1FEC67E397298427A0A7A59C4A
CD748A13881C130EB7CB02B8A16F7DB74AF6D8B7A401DF26D9B605F7DA4C992B
2613CD296ABC2B3A537DBC042E3BA32D6008B13C5A4540A35CF347DAD4613F91
AEE64B11F62A03F3C9D85C7C702542DCC4F62DD4CE83D8B0A6B2D3D7E2941641
1E8B0E6A5586B6F49D5B02434555D99F2E26526C07438705279946B3ADAA44E8
AA7D7C5CFDF28ED6342489D3D1F1EB2FBA7391581255CA9B40078FADA0ABDE83
7B551650E889285442AAB9A29D15BB665BDF64A4B74F21DBCC8F96697ACAC75B
1E69BE9B771B15314FF7E13CDA7952FD2A0D68CF7962C38B871030E47460DF4D
6DB9326A5B0A1E380C98EC7E504189315DE08434D401EA059A7E659FF27817A6
F2EA77636BF19B999D1D38FE08A9BDC7A796A2FFF0D874890FFB0CB9D1F8BB3B
D0D9DAA228CAB50F68F4F2BB3B18E92B024F1238F6232065F879953A8DB701BF
7A85AA4D67659C31F4F6F7DECB5E57E0C7B6EB1C817BB43393E0ADE6B0BCF011
5B22E54832281E01A18E535BECE4933A207A2AB19339DA0C5301A9C483A41C4E
DDEA517ECFCCA3C746EAF4041F33CEE4422352696C9D4D138C28AB929159073E
665CF3F6FFF2810E63CD702255BE42C0D469BB8AB42534680FC4410E9A854226
FA09C34AF1BF0920AECC60C51EB4153BBC288CF881138849A984888B6DE92C58
0F63D78D4B215A0B3CD0D68EC649DD3FF3314BB9FD2E04087F3DAE1D9309E2E6
12C47BDA5DB65E37ADF8CD0F00D203D65A5EB702BF95E6C065445F09709E7153
5B09010CB6F43790A76FB84EB2BC2D37CC885DBD8FCD82704F64753BB3C136AB
27AD15B45820BA2C8942FB131136588242112EA2A591FED5E731C73A266B3165
B3CD8ED1CB60F6DE00E40DF99FDFCCEF0A928C3ED7909FDCCC2218FB71DEE78B
FEFE47E058DFECF5BF230834D3B0547A0E04814799D375D39AF8E5D444D499FF
C968C6E1A1D2D36AAD7F87EE237879F59B7552FAA453B38764A9F14987CBA54C
DDA2027449375C9DEBDFB2B5257054BA11B3CD0D9D4C02E5BD3D17330012F65E
0C3E7EAEFF65B84EB2BC2D37CC885DBD8FCD82704F64753BB3C9B319824A3658
6958C707F0205CCCE71C09308D6F91AC60D6AC6457B5C52DF45C6DAE75DE9AE4
57EF670B55129CE24E3F85F7380F813AC41E22E2B48542E8B1FC2B022C06D8BC
584CEAAA9FD4EBF45BD57DB169FD35981E8159AF94B2028D23D0EB6FE705E808
9917D7D0C6FC874D032ACCE3241BB2F7EC7571ED3B407C3A0ED107EAB87374C8
0DF2DA55CE9CEB5CDEFFDD76BD41F7A25307535F51BE37B13EC26B09E9D28B9F
C63F2985568B0EFF1BE90A610D19D6B542807EBBCBCF54FA8D9CB1975BB904C6
349BCA8742C30A58B2473A33C2387C53D2DD5EB40D5C729622C3902D3DDFF0F2
F6CD3E4A4EABC0D236AAF59824E5308F85563A98161AEEACF93F4F0C740582B1
639E0537B7A24AF0FFCF91909811BEF783F225B512AE65DD2E60EC9E3DC87EEB
90F47778D006763CBA4549BF612AE71994917AA6E2FB4AE5D5D339018E42A461
A9B4C0247C423CF91D94E20066252578F465EED2B018A9D488CAE922AD8373BF
9E9DFFF443053BA4803ADC7C81FBA683F3E305B8AA07EA96038DF2C98CCD42B3
669F3C62B8C599F34ED652242AD321D5602848ECCD45BE10F3DAD1E07EA0DC7B
C4C8581C96C3DE27779349039CB942FD83E1CB2A074A5C1DE11777C02D2F5216
5A0DF06D6979E2471463D4570D4E89F4CD31A93C312EA4674730416675371CD3
FA09466CF2D7B195E84B2DA1F5CC19C957F56238DA9D24DC1978AFD87934AF5B
FEAC00EDE5DBDC5D328DD31F6F35820FDCD31533FB97B646223CA3E891B63B50
C3EF0599B2DEE15395136DD0075A83CB86194698E1934FFAD35E0B6DFC8119F9
745BF779AEA6C92BAB62CF2ECB630722780E36B0258DCE5DF615F4A801E96AA1
57139B64499A681FB7AEABF17F24254416577D99DF96433F9E91DCEA9FC8A13D
5C7895295A53B9711C03447F132529FF385AFCAAB7EEF82CCD56F4366C202B9B
A9514CDC3D132AD1C6FDB17142AF047B95A3FDFDD410CC10E9080C619FE075F4
3B1196E43F211CC0F9929D397D033639E2DC198A3F68D90F65E1338069D7418B
E0DDE1FB85085A889F9AFC21DD94571D16E4C5991037A15F81A81BB43825A07A
215666CAE428561A482F19DA1F88DD652D7A5E3F6E4429602421ADAF77E5DF99
DDE0720806B6FF80BAB3EFD07706D953C164DDD853559849EECC61B4FFA81CFD
DE56FD8195ED7183E4870FFEF9DB2D9CD399A4ABCF28FCE4F872DECFCD0019B1
0BF8000456E21BF667EC1DEA9BCCE86A741D4634EBD7C271BD4AE2686283E59D
74765FBDD7C827FF63C3514B5B249973958F153B1709075C54C49D82A9D88741
F927B1B78AE0AC24432BC9C838003D02071328058750BC7E6ED27458A4FC775A
FD0AF6DB142F9D944903C8C061292BAD2FC77E02E1913DDD852CE7E525A43ACD
CE5A4EFFD8613B50B2DFCBA0D6CB39B4F0F5DDFA2169518A8C7577AEA1CED4AC
13779C7DACB01E8EE5EE914913137D5303616D35E274DBF7DA7AEAB95DBBBB4C
53DE74E864CFF58A2EE680F264C419035FBF3A05AF482451682C3B82A3CC88AE
8AFE79BFB776900A29BB121077308E2A680DC3D9698F664564BC2D81D4C42D08
6D8C9C333263AA00501203EA2B8B3BA7C089CC8CE271F70F3AA09C1383F81C78
1F2AB79085BE0B5CB46CD858684462696132D020E394D87F081404E9E90DC693
42A9F6F07A24F2338B381F806A1B74B6433A0A9BD6A22F7963DEC85B5261AF4B
48A29BD36029C8D3AEAEF63B9C9E84EEDB87B1E570A9E891963061E0DFC24D43
84AA9C0839D648C9C645E0728DD6BC7EBB7BE0735520547DA967818191193833
EE1F69D3BA5BA80B2CC555C314C13B8FD3ADD30E274BA5C96EA3107B6842091A
3A1138EA6A07CE358D979C7BCF0215BCA4082B98D6B64EC115F1D1E455CA8C5C
8B7674C429EC7A008113B6129F4756D3C2DD059D73A16C65792EDC640F1491EF
E183BADEC235EC2F039BD581D96BB25D20C72BC0409B9A97CCAB9DA5B1A5D4AA
365258B6892F6389C8ECDC6DEB9A090AA25E8D003486C12EE95221AEFBA84C9B
C409834DD0081A6DC347B349CB0D41EFA378DDFB4041CE28BBD3AFFD499991F6
A29E412C9C01EA6350C44FC056C4B58B0D599C193A7E66D0D0D09C23B2ADFC1D
A80A8C5895C4E18A69CD0C381936DA08983361B424509BE9FB3BCF661A48DED2
0371FA6C350E53135A856BA0552233328ED1355D89984C45687C3C083DF93D85
0AC5A738B3CA0A43842A6686192393C682B739EBB3F114D7228FFA3D3BD0793D
39E5F3CF6E03569BB15B7A95C8E26D3F937697D4720BC4ADB7E0CAA12EAE2A32
67FBC79FDFB0595E97C7471E1C410CFDC85AFB3A857ADF6C284236CB51DECE06
A6FB4E913C44F4B2D0EFD619BE127A544C93C9EC022FE2D3C9888B2B2A941F5F
A9F2699E92BA99C9A2E2109EE799C9C6720CC9D1BA0D53BFAD65C5AE9DFE15B2
011A67B315C4556EA67882ACD9214BC7F3D1E370B1330D811FA76A32154D39CE
F9E0A9FA65A75E27349DDAEA619E52650F8D44A7B98CCE88C462358B0E9ECE17
6300D5C6B7FD89288D23BF7667445623A472411DD482946CE9C8F1D7D29CB89F
48CA3794669955AA4884E6783924B0AEA23182F0843DA7F3F07ABFFC1E05D5CD
6A15DE35C2D1C21B4592A7986BD2908F2A3BC614B74F3AA68E746F18B4446739
318E89FD1FD7518FDA16DB9280B9485C4867644D32D0D91536C4646B584B58E7
A2A0FE2D4796D94DC14A97E92F225BBB0EB3D84202CA456F51F990B89C6C1A18
6EEA1CA1B990B392EBDDD9C64292AE5E1BADBF96AD2D61D9FD8AF7C593047BEA
D7FDAEFD37AF16766D4F5B87C3A0F7EDD29FF4A58D8467322EB65A2F8BC60506
05CB87F380D794E26814E08620C282FE1094CC0EA2676BA81D5448A78801755A
493FFFC27F6AA52F79225868783A50546B12D2FF0A5BACEF26E3BAD7AA10324F
81D897C359E348223484B3D8C4C44741A535D965E48F0F4AD114076E79FD9BA4
2B4285E6B9CF45DE0F5CB549A5E0A3C3356C5A1D66003CC6C6E12C84989D53EB
4A5AC25A0858B10DC043CC984C11BCB49DE285E7CCA8EA2BBD321844409FC953
7DA070682114E8629D27C2D02EA91900F6E7B049B1C432F41A5938D3F0A7165B
E3EA926177F72CADE5CFE8AB8E2533D7A8409ABAB35BB2166BAEBB061F697682
E4AEA88E2C6F6BA1225968C20A1BBD684BFE08C9D31830E8043E1D6A1227CB2B
F44CB52125F3047AE983308A63B787B181EABA1E21E7D5EE19CE5099B9BED29F
6FD355933650EC8C9211F0ACD902564ECEDAC8CEA54563A2B474E79B54C8D19A
77AFA5C4A05A721D82217626167E369AC65724E0E2EA040AF6359955E433247B
049E04DF77E9CF0FA1E09CBB89A17B1B815B966A2F82D27A9DE7D80DC986174F
26E0D65E11432BF54C80E629F3306A5183BC623F91A30B55265E034FEB45E942
5DBEF583887879AD93C362A37A016C0B74207F0434C9599D055D786DC25523AF
3CDCDEC6B7CB978FA7AE5136969F149CB186E27727E2C39A2B1D6BEA0526410D
CD7B27AB23E44EDBD8F129D985A13F31B934C4CA07A8866B21B9D984325E72EC
2A7EFF72E9E2B6C224B97C475CE8C6ECB05A97223122F15F1E1EEC3227266E49
2B1B5B5FF9F02CECAAEB60BE4ACDBABF62AFE032E7417C007C7F9F89E8A8E368
DE280688A88612CD11066945EF87E654F8A53B3C4907DDB687A20A0BC8D2624D
DD168E78817B72CDDF15B11F1F4383D669A54F0A44D71D9D673AA58E7371A623
BD64742F444AACED9987FBD6E7ECC6131B4F0D752C4CEA6513B7F47F06F4D535
E73C5A8389BB3DB0E99370DA9C9AE9C57920EE6BC6DCD1FF5EDE9A5B6E38BCC3
C78EF0034C551645826FAC14916C11B1FCA14189F4640878ADC934383566741F
54A206B28767F4680148DD7894AB604C2CB8CBAE3F9A7CFC900B41FB0201112B
4B05F193A73AAFC93AA8C2DACB9D685A9561E9CBF09ACC5DDC94B58708AF1E5E
D0EBA42006467A0ADAC44DC3A133C0DC4892FDF5279F614DF27C3A72B16B015E
6FE049332ECD422011A396F84638FAA586084A8623D01232E650B65FF642B945
A85944A023DCADD60AA8F5B2BE8C21D7344CD8E8A6C73664ABF0F113EDF6820E
69D5CC3D80B2834416E19C17F6D8445A41DFC6D8087016FCB998B95F194BC9B6
E95BA14850E2525D0982730A18055ED807EF70EBE57F1FB810A9FF2CAB42C40E
1B290E073B8A067D595E12E31208F9C7E9B7BEF0E9D0D833D2160643FE8BD1B2
662AB55A70BE52B97093BBD3BEA22E12E9C4197D0F3835C0942AD6487F553FAB
CAD5C7089DA7582A583FE756451A02CA7B0C0254F27B82D4DEF71CD3173441F1
4310C406421EBCF15C2ECFA5216B17742ED304B2996DC77BEA528DD00039AA56
27CD09AFE15B7C4C75C0C00F4549D250A8D8D0B82FB91F76BFB53D74265B5E62
292B895E0497B9DF2DC211C92C73E62DAB23AEC8325874680134F035A044609A
75AF9CBE33E255DAD15F08252EDF5979C14C46A1ACCBBC666E9FE48110DC766F
03DBCC2EF01DEF4ED73A8A2F03F9984D9E22446A184E4055105E5F5412574F9C
51ABD884CE97AF85067DE6EDFAEA7567D26EB24093BCD34AB4365E883912D9BB
D9393247D435B57D760BACFA908B124A00B346D9F0F1C33C7A6363FA6FE55B3E
0B88151D10422833F8E013B16B932525E99F89904F7D5F282602FD4B7AB02CFF
282A651B6282D3DBD1EA51A98D632626758BE48EA28F5870230E9DA69ABC8078
8F2F72CEE5F5594CE07A7C8875D901C9EFEBFE0078093EA47D0DA522E23A0FA6
D9214BC7F3D1E370B1330D811FA76A32154D39CDCCC109DB6C5BF98E83DA93D0
5D9AF0A0DBD5145F0FAEB9C63E587844F40FD2CFF0CFA97BB0E76B366370BA0E
5FAED59D6E77D53634C137AE6A6E83FC0D04CA55D141B76D7B6EC1C3314567C8
8BE2A4333B1E9964BDA8C468731F7921AE3383BB89F311F38E8043FA363DCA07
A106C0F8B280BE8D374A8D48A10B2713DFD32DEABA293EEF5B59F7E319879B5D
BD7FF3FD4AE9C70527A55D3AFBED7B1CBCE0E44B4EEDAB9B29B34D62D3E73578
C70DEAD77FDBE5EB772AAEB666A158A5D83B7E0FBE24C3092C12D6AAB7FB0314
FDF45F05106CB4E5E03072C214A0BC53C04AA0FCEB4503D281F5443F84BE6EC4
ECAF1BDF49C3A2FEFE3D52148AD0F1C8B8B3873F10DD19B813E15DA4141689EE
A715B0E16D639A60595C6A783B34BB6F0724E05FB8B0A4B09E56B24538CEB6AA
2DDDC988D12BD4E15C4C8CC62356886E9B27AFB1ABFE628A6567768FD3A0A7AE
2DC550EBF77D4670DEE06369BFF206BA9A14F10AF1B72AA0023E80872307E08B
DEE03F6F7368F422D979A4FFD49505395BC6E9DC477F6807DD209828B4873031
36DE6B0A82D47326D14E817FF8C3EFF9588CAAD1E91CC95A8360B58E240BE1E9
41CF7170EB90C3EBB3655EE5539E7426BA1AE7D18A9445698A365141BDF48E56
E9376E89273642095B1E04CC60718A2DC2BCD99B3420287CA0381A7BF337DA8B
9939021638949FB0039DA5F622FFECE1E8110E700A8CCE20183026D4B921C473
289CD30A479A0605595400D89642FD874209635F566ECD661D7E67F19BE8D221
4231D8149BF18154B2258D551E75C9A005876EE73DBEE0069466A1B3D42D3E6B
B7E2FD58A48C727F809B7735371FE5A2F54624315981DB9E59213A147B947420
7EC6B58B1225247062B3431D5341C401C565C2245BD1435E23F7395871AD1115
8CFCA33C04ACFDA550414AAAD46FF165FE342BBCBF05B837E703278B202057BC
064FB7945535F2F9C287D971BE65A9828EEDB4E86AD42117091EA58204F935EB
454FC0099D03A9B6B8C8CDCB813029581199E65B1D8E5FA561ABF87EC12286F4
BB9724D88A6E35333AC40054540D0B0F2BAB32DD9E7FC42E2CC1E607C1EE5D38
7200F8990976523FDF7037C8F0E926E994D29A76CF7AD06107B9D766002A93F0
332355FA10753DEE9F95DCFC301E713B65A8B8881083E00423E5B013D6C0A7AC
A2BB6ABAAFF709788DA6C2B8989D415A93DE3F06E695314EF8C2E03E591B3B28
7C111433E0BC9E2F4B9352D7C4F86B32AA36908AFD997B71203F0241AAD2CAD0
1A5CFB78B1758D1A878B86742605FF777B2A0E9A72C122EAD0ED5CE0B3E977FE
A781C3B803D1DDFECCD00B52DE8CB734D474D686C0E89B6ABE3DBAC068A82D55
19573814B38F4BE47012F03DD6F71B2DA8C4B080BF505104250096897ADFE3B9
BA095E0F75829E23D86AEFFCF7E397A2B0CB9A3495211CDAA51AC4C52386969A
D52862562A316912B222A068F9808507C2B29A4D64C3E90D3D572D2122F58B43
4B0060ED6C2F1EF058C460BEC435277154F048C036D8A43E8D1B2362B5A73236
65E4CF890F2C6AA7723C8E672F84A9989DCD1C98F1CB6CE6BDCE15513A247BDC
48FEF1226A7F3FE390001BF0F9011C55CAE9CA330004F8206AB7DD73E366A5E8
5ABF673D0276707BF3D08766558D82F1D2D09DCBD241CAD6E1C3A76A8A7C14DE
2A31AAA7432D7D3BC26119E6404AC7624719FEB308DE826D102402AE43FECE3B
8B0319A451790753B8254E1DC82E6D4FD1FD4841FDA209A056BF06777246B137
E0C6B513ACF2FCA911D07F2D0B410D905768BCB0CE4CFC700C3BA418929E1814
281EBD7EA778BA51311ED9A1760E6A455E7F6E24FA8B2022BAD679A24620A2CA
AC780E031615E88314445FC8E76655AD76064EB50348803069233B7E735477BD
94A31737778F58F4416C7489EB72880772BF0CEF5A6E5BF8658DFBBC521D1DA4
90B96134EAD02DC007BEDB56D81AFD3960CCCFFB4B57406E6926846C94D25F57
60DD3F2D73D4A767B207DF735129225E289BA46DAD405158B48D1875A85BC4BD
3E174CFB665CE85AABD00A506249E802D73836DCDBA5746718C8B44989E97B47
56F15E0B45B8766E927F787D022E6EE60A5177B4BFDA36466DF8D14C2F7C6248
3C45DB4F028466DEEE1E5FFA1DE4180CD99E77CBF7486C54D8C2A4A8C65D319D
D335AE1F22325ECD00F60AC3EF0C2D824E2FA5C89359B6CAE1D5994B8D94F96B
96E09AD828CD4B1CC9967C3163CEB8D0FDD9834C60AFFA1FBAE5E42BE5A2FE98
7FF788A33B3FD06A877DE6AEA9C317395578B3EA66F375F70C432AE4B88B0086
65CCD9F0A5FBABFD2A446D883DF9A5DEF41F035C58B6900C391250320F79487D
B07D1AECD409DBEBF0C9460A7234D919BF079B694A14334999F768191488B931
6F311C1B235558B7626CB4135749B44EB94621340771F577E4FF19CC9993558E
531A7A874DFB11A5617306F530FF3C222E711DABC1B3DA693FE784E63331588B
A210955213E55A704BE769EA815457C40BC20A2F86F79C4A9DAAAB215E8C9383
EE730695A92D248DE2886BEB4D3BB293645D5DA304C63771DB6D7749CE96ABB8
4C79FC8C945B6A8ADFF2A2DB2AE2D4D0152A71F279887A4F86E329FBA953C37B
395A23A8882EF72175D84B534662A484F9100BD64AB6CDC615EF1527DBBF1385
504C8648BFA05DC01884895A4D448B2D5CF49EB5547C6604573EFEAECA407861
F396449BBB4A233E6F656C9A74147C51B322616ED6108659C446907A2A80D9CC
21FEDB8B873B6321E830A294F7A9D4911BD20481350A063E12ECF27C5111F393
FFF2947428E38060413AB2D4F6773263D8977E11E432154938397DBE30571E29
81CD63171C5E421559F12EC4B5A54D9AEF546B87DDE8331EF3F344B7C9D06D77
57480573CFC722029BFC8C86CB011E38B8335189377362CBDAA20D89771C9593
59D46E7CDFE3FEDE196D72A97C06E050D45E951ABFE6FECDD34999A62AF349B1
DD227C0A0F98DC786F929BFAF65B9FA6B748B63ADF2F013C0D15F99869235EE6
375769708CF6581D73836E6207CAABEEE1207245746747FE375B046353061B4D
58B1E6FF701FA79E6E974B0BC300A769D40697284B5DB3D7A52A103E03A55572
374C8C3D00A77A8E58B15265049EFD9908D51889F42311E1AFAC5057D9B26F90
0A9799F9C65BA0E33D7EB5B5959006A3C2EC481147677D399D94740ECA1037CA
2204931A0C50F71C0616BDF77D30CAAF8BD7DCE2ACB8FD8900B58F7E408F2A3B
E84277D59F532288102785D90ED1BF5B710EE1DEF53F4E62DDE3812AA8D94892
22546B3DDC2C84F562FD72DBAD470249C925E436335F6101B507B92E99DFF774
F35F1300334A78AC4E852ED687B2DCBA144F3D44CE4CDE5B83CAAAC0C03C3FC1
38E09418BEE3AB992945BADA512097AA4C8D4CA935107BB3191FF2B7FC8BF33E
EA98B8DD6B98944B38E6509345268F86A268EE7E59C8702255BE42C0D4699911
4A293A094C839E267533AFDFBE97B3EA76580840F4E2FDB774E02030C1CED85B
7941BEA15B27147455A0519972751865D3E003DECB3A04A20F2B32F01F095D82
C8B0F025918358461B0EE93FA6830E6AE3E207F9878C7360FDF0FE71DE862CAA
1949E0DF9B433635A1D288D5E78C57B87155878C8DBE2A946A2D088610901321
BAFE2B382E6D191B2D5A56C174C31A01FEC97548006AA64DB91075678C7F01DE
B9D877E3656A5194BDE0BC7EF3D68B99D1B9A3BFD062FFA5726FCFA60CF47E38
B170AA08C145EFBF4CD987BD4DDAC4787FCC0E51ACA213A50B47021B888BF251
BDE3294913B6F900B04BAA0BCD1D82216BE8E032654B37BABD9082F72AC108EC
4D5C551010865BE49EF88219FADDF2FCA990ADAACB0971A849A5FE64A3E26A70
BE55090EDEC6929D6218C69A302D96857D4D9CED355DF433BA472C56CCDE9449
2517DA57BFBCC86A2067945BF663C705DBFC057211A033F7D9C96DA5F0D6438C
978FFD29BB8EAC01F3C68584558C6B22F8B97383342E5B344AB2DF639AF8069C
EF3AC80B2634AC11D5200159E353D63D1BEDFF5C3ECAF5E92DCA7A5340C7C883
5846436286477E4A0CB3CBB9A755E4BC9C66CB2FBCD7F51D5E4E42C180B3F950
7233E038E53B8072C9DE071C81416D66778FF629781A6A0A8A1D2BE46E4B2B63
0816AB08ED78365DFDD1ADA20E87E0D031A50999A9F5FC712D297CCA604ED822
94B8EEEFD57970A8DA10D4A0A2248A44038903385AE847C3FD9FEC1A8D4B0816
782C7494CB26C423F57C71419D880E6CB463514D50A8B40258E56469BB9D8648
F4089C543EACCB8715311917C8B19983D4B053670EA600DEF86D2C5ECF85D69B
584F473CA3345A63A5A152EA81AC316C562BCBF12664224FEFD6089C7EC6CED5
307C02F1297B429BD71DF555E4AE2020F6128AD44DFB49215BF6D781E372A779
BD07ED0382856FAD24C82E82F5BA4778E7FC1B5B53D46080C3B1A83C77232098
5CBDE57EF232B4F45C90320A744FB13FB6C742FA99CB33441E3A0C2DFF06A28D
F171862462AD04D70D0B20763815850B479D74CF125F092D8961F0E607F87581
C876E63520D3ED5A0EC150BF70B9B0FBACB0C39EBACBC593B016FFE45A747156
FD0394AFE43BA3BEFB2300B81BC061DC2FFD2D5DC3EED88993A8CD6663C32A69
D43BD9BBA1D6E5C62BCD9C12E230660999C92EC796B578BC471DB5BE5ED95664
77F456E539A874100345D7324B58DE74638C2D843D4C9FC7030F92FBB4FB15D2
2EDAB0467E279D6EAD3D2B69484D92CC6534713808AC8A530CB1B8B5DECF0BF1
8EA9E7347023654490BA97060356581303FD0756929B8B82433121FDB14B6935
FD27CF37BFE08882B755F2ADACD9F35C16
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDB75C4BBA5F472DCE1072D4D4BC870
4125BDB8485E39CC98CBF7840DEAB2CD93811DE4F0374833E2C4E3EC14C44814
7EA1144A970FD831641F48AEB0B2ABB1F875BE95385CFF06365DF060A4894A4D
9B431A471FEA922D0027DAD918A30005C31F1778163305AA0E74F6493292AEA4
D375BD8D36F3DE102A78417651AE4C0573F12D04798071551896F2BFDEDCFDC7
6E1E815A6D94820D0CB36EE86BE050E3371B1BC6AEB6EFB588E3559E2E7184A2
A793584498E8696BD72D26FB63C5C9CE69033550EAE16A28B415A8F7488B99C6
C48D05C85FC96027B4CA4A100A8F92EC8497798A967943B973C769B339E0A25D
789991A9D22B455C1C5807EE2DA4D174310A8627A5356470BDEA1C47094617BB
0EF98074CE6116ACEF6302E40AD3194A97EABB75E62FBF30074B701B39665F4B
F41F78CE95F86EB0E0B34512888B67CE482A44888ADBCB212FF2983C3FFA0E90
45AB023E047EAB43652643F7B208519979ED23271B6AF2288430995CF657C94C
20DF80DB1BF5E73B33A29B7B447820B08DFDE19DF3C7965E5E2A1303E1863D49
79A4D16E807CF8648E8E6D21C498D274ADC1D97A103530EFB969DD821155C08D
026D6D6CAB0A90A6891CC6A139CEBFDD92309A2AF053A2A7CDAD63A0DB6D5016
6C927D3D083E2F6FFBEA9914BB1EB4AD55DF687B4C7F124920F46186D0F5FFF3
E574A8B3C5BBEC36409B7C691225359FAE9F0E8CB234A10836AB34663A141DA6
9B46D41A04EDBA48E0B81970D0F14165FDEF1C660FD8960763ABD872DA411842
0E3BD641F7E6910BE9DE38D6007085FE7FAC9B2935E66E18A783F8733EA3C7B0
84B4B4CCA9DFAE27B27A17C510E809BFE3CA8970E194489B1FD064B240C74077
4C344EB7C7E31BAEC05ACDB2C02467E1085524D86D5A9C8C2C12E4E92B62B452
06CE2BA7B16E5964E5F0533D24BCD7866F22E5998E2B5677F02D79A8BDB0B7AA
7D04474E75C7241742D44AC5BABC7227197CB865FB042E6D67F58831114FC6E0
CFBAF4692BF336AAFA0B7A5AE74FFE69202355474BC1A2BCFC54BB196129821F
84B02AEC078CCEEB604BF5F39840266A3ECAF568F8AB4BF55153715473FA5E98
EB6D8BA5B70BC69CA2CBF07BDCA2D113D4C2F5C4ECE90712010A335FFE5E7239
FF722CD4733F561F41173522EBF3ADD2A7F815AE8F3284B10752B237105D78AD
E606B275727C1C0E2688F8586E6E03A840919CC98AF1B1CA58B2289DC2D78940
0C7002AAAEF32302F7FEB64587C198DF4B7D369299D0E5085DA46C306FCED248
1BBAA961E2C39A9DA12253A69D9A7D411F6333C2C8CE31B050A7DA1D25191A7D
3867783605D865EB30792C6F7915E6BECA5D5ADBA455ED1DC91DB52257EC1B97
E761B52B729566079CE15AD3FA748FCD021775651CD19E7D9B58978640F97B6E
66D0A2A994CF5AD4B09BC2CA785DA2D6156F53D925A525933886B9C662E2140A
C54EAFF312E59F4C171604D13C2C55DB8D41E9582D2804153F0E921F8F7B98F6
43A48C74FC13800DE280A242C370EAE371D61D77D4817421C5930334AEB668F8
D61185C1941EDF7BE35E8F24958D787B0D36EDDD45FAC66450D2E6335839957A
6CFB2AFE24EB580E55BD31B793E4065CE83795F04C1B0DDB9AE68ECA5D525663
5ABFE41D990013ACC046E3EF30AFC0D06BD5518758D36F783EC76D0124C9D9A0
7D507CA97CE92E3DAEBBE3858C8E8D7E1FD0430F56F60C29AB8B417E2D6092F8
BB70A2DD5DEDD4B8B50E715A7F2E80A0F9D2A69E656BD47EE042F4BC79E2C7CE
17006D2150F6D378FA4C1844C08D06E40C5AFA62630BC035EF01B9D4D0A5D02A
DED4DAECA436BC9C69CD3D6536452588BF17DCD7E7EFA0F86CD5E98928B337FF
D1D8403FAF4BEB8741396750A8D017D120DA2922015508332F1CD9B75C990A53
800C26E0BD9246F370E018F30FAF8C8CFE2B0597EC6B26CACD05B9285BA7614B
1929161E023EF0285352574218D54EC5AD1226379CBC8FC452BFDCD7B9B45AE7
4D33078B6D4120137695A8BE5DEC8383E556D1067F2C6C4B346BABC17BAFDC89
7254CB4960DC6D666CD1F10505D858E3D03ABC8B3DA3F4762F0BFA142C391EFF
17755149B26B3D2492EBC0F85F5A5543DF0994FED862564AFE7038FFCB8323C8
3E802249FA4697440B2C470F1DBCCCD7EB6FFECC3E585AA91328091D6113616D
34B4F09CE81362943FD204F2844C6144B1C64E3CA08729A133245FA27F54B6C3
FA4C16F065F84D3C2FDD24CFF2A56BEDDFABCA467C0E35E9C8813CB052EAF1D4
C0958D4FF999BB4808536DE87520C8AFEE2F3073F9B93DDB200C66DE09FE538B
26F015392EE1633636307C390F1AFD61D7D0AB065D9D592681E9BC660246400A
CB0659AE71551C5A898210635F4BF5043E22946036A13AE72926473E4E6F4288
FBA2F8A4B3B4FDC48B81DBF63CA5506F08AF8402F91397571530C9B48983CEF9
A7A1BFA435C1D12E3E64C256F10D66BC78DB5D1C994B71D8D5530779A13D1141
CB2185DCF4B1EAF8C9AB01083914D9022854C503FE67ADDA409A2D97A9B48B03
6B4867F90D40C118DF08A8108BBA0143E99C97E4F3C2C9B0D86D091215B768FD
8595B93235E2DF5D0B63259EE2FADCDDD90F66CE1895C1108E187C8B3283F389
42872B333B0945A511CCCDC4DEA9988C3A3F0A468876ABB9D2F71B0D46ABD80B
59A40D8F3001CB5CBDF8A9F7D224B007D049982C8F93198583FBEEB315F71E58
BD6A2B23E9740CEBBBBE4A024242B0B997882364F533C02AB59AF67E5C1F345C
0508534D7250E80772FA7B8131414AB21B5835271190A7F43005CA942A848938
782002AEB2F8A9F27EFD447C37DB455D2F88FB728A1DA1D47A76BE8FE230CC48
F8B90155FAE6C36B74F325A94413CA316EA518E4E16285BFDBA88B977EBF48DE
7449E8E87C7561311CE8702329CFC7F3BE8C6B9843E8858D21E63FA94FD07FD4
FF37714A0A6FDBB0B23FED8B99CAFE3BFDA9D980C1361969F8B7D4ADB238D41C
CE447DF74507591F8502ACA1A50E6BF6367091BD71D7EA7A518822992C114FD5
4A1D22BCA54D954AC52258FF7D3FC4EC7A4077790B22C90BD72C89E11103BA0A
E3FC683B4B966966CCDA3E2C084F8FA97CA20390B36143BE1FA4431F22507C43
F07EE2E0E9E8A88B3FA16E71E99F673E27BD5195388F2EA79E1CF8CE15905FBA
97BA004BA41A153B6995D918889842AECCBCC046E56BF44B4E8DC37D6A65387F
413E760AA184C776AF0B9DAEC2D436D15154C000355A4892F3BCF11333CE9A28
048D4DE9DC7AC7039F30607A3A65746FF232B2269C739F6DFF399AEF28169AA5
732CD5420381674673692CE6C1E789276862A62B2B4CCCEAA8C35314B5BCCBC7
07FA756BD71FF74D8B7E2347719C803693174088A505C703C2029593EA286E5C
67C0B1A6D126C8FCFD6E07300BD1B42A583F075B5589635322F7DECDCDCADFF9
EC608D42686F2F291A716631BA515A6D228A48830993FB73790CF1F2E2618657
851BB6F2B597279496FA28DC8E4AE699E6C8062351265DF30D18FE1EC04E73D1
28CAB2F2D460C39DE0E16BEFEC3B2A9BCFE4154234056965DED4CCF9D35DF5D5
5D07F0A73AE972393DC264834D697241F4ED7522693164A8772C71F86E210014
2F5C9A4AB5098F6F84FC653EAE29CBF9AB5E8A4234FC70CC583DC50D1FC4EA59
85443209A464CFBD9CD693442DA13A4E495059D79C5BE9A70BD47C633BAD9F43
56D350EFF885B66C77BFFF97324C5CAEECD0CE3DE6DEC4CD6699E72D58B3ACA2
0BFBFE6B3DBAC6E1332F128464B51C075CAC5E1FC15DD3C3D5F4C1D0A94F975B
C8E57910FE940125A576E4B9BBD385708DCE3583664AEFE0C59EDA04A147FB51
227A5AB0C6263442AD48691C2A47DF05F6A7466E87D3020FB2DA862126F49168
8AB4FFC28B25F44AEF8261BB77AFE45E5BCFCB4F3C90BFB9F256F3160A370EBA
3775F42C85C133E6FC0419E3564CD403EFAAE6FBB65DD5BEB2022232DB38E473
5EC693888CB7590966A0B7ABA948ADEC110CCC126D530C543C78E3762A109DA8
B55B582E692FB97A0DD77737F84F944EE4F182641F05198378565D5EFD9B42A8
D53BC39779F9FE7D608903FD11566A1965FA24B7FB3EABD93E2DE09724E04FAB
651E86379F959CBD9E448928A2C65DED9BE43523FB50B9ECD5157952B6DE055D
C28C1B3A7B845898D769B15E302C8A68FB44406500374D2EC840212F53BC6793
1B0B2310D0D1E4BB773E269AD5FF7A2D2E529B04160B659FF7DAD0D6AE5E20A9
E98ADD7332EBE577BB1C09FD0CDE4DE840EDCB7082BBF53C859D8B942790A4A2
B1C13A4FD90624FBD53577188D9BD0721CD51516E261B26F71F096EE083841B2
CF1DF3FE755C1871D2229BF94BA4BD48A85DD2B7BAD1BEFDA6EACC55427E0CE0
6ADD7B1FA54C01E67BEB5AE5AD8B35AA45481139C2C856347FB509152AB4C872
0A68FC6C7AA9E7073FFFF24C734EA2CE53E4AB7EB8DD04230745A6B055548F30
389BB0DED8FEEFB1E4CDE434EB44785C7CE8435E807DE8E1CED9C78289D2EC32
B466D21C9B802FF1810458E2756AECF08AB132EC69E9A4A7A08C2F5AE0174990
833C226A22571F3B782893E1631735FC7FEF8384AEA8C22731B6583B00329B22
803546300C02DE5D4CB24064C14FC88F592D8C939362D7875D4582E0A9B6D650
4FB3A3014DE680D23B992D7F754479CD3697192976164195F7810A39E38267DE
1497B597DDF127081FBCF04073ED5CA72F9AEA4E0604D3A33EE2CBFBDA1D46AE
86275C54DB44D5A187F806B5D7B12FE096BD13F4515A414DF8AAE0CFE2B5B3A5
052055154B1B7F8626D35CED0AD334F2B7397413809F1EED463EE08956A36219
AB1C23F690945DACCA92EE9061FAC3A8E1B8776C69F115991F19BB4E4E2C321F
D8598C19CC1478881F66D75C0D466C8DE97C2E08CC01056475E95FB467E2F3B8
023BED6E64D0BD1E9C51FE0264A18B16E899EAB7F3D18AB9A9E70887177E32CF
45F52768B6086C41EBD19F7D9260E89443A3941E74A7B6EAEF6F0AAE5F86DF99
73CE26568F78981B480F688646A5C8C563B8FAA78D671631D20EF5FC381131B7
C4C90E04DB61386B58074DE7F40568FC538A0EA2E76E1F62790DA67887A4C7FB
5F7C733B68DF793BC4661791DF29193741C1164F7C4C5DF0298C5FCB53C08F10
787FDBAA2ED3BECAB73EF93ADA4CF21757BC901AFEC0709D6C33F1E0CDB6E6D5
109FDE9B405E1712DCF8188803A594004D9C37421B085F7DC67D93D0487E7162
FA2C028E5DA26AC7D0ABD20272BFDA2BC28750F63694D900ADFB2B24D51ED4DA
E8D4EA877B0D04070A43DA8BF7A4DAF9253DA88877E76F5A7550A2B14D6F4F35
F943A153B16C84D37A6A985778592494D469B396D9EC72DE35B5F0E249801871
597FA46215E4D1333B289AFA733D6CEA748CC6D29D29636C04813043701E73D4
463E1955B54B5D23DD212B48FDE97AEB2C8C731E672F28052316A8B7E351F5DC
DE6B93CC67EAA520CD3D0C2C249A522904C45EA5A6948AF80D8A4856E68526C5
74F1A134ED0C220409894F551A6EB2B7D1D86EDFDF80DB1BF5E73B33A29B7B44
7820B08DFDE19DF179A97F819A6AFE696782CCAA8E8A7216C37FA27D3CABFA25
B94D484684C9394BA9314F09F959DB1C3661DBB364C80C00312665A8DF22ABFF
AAB4FE403643F1D606FEE1866EC9430BAC570BCAA312BE5C5D907E7A72DFB516
565C4345D68AF57185D29B76D31DB0869490E3B675A1D83DA50AFB7EAEBF24CE
45DE8F86D293F3969CCE2EE925F10F66ACDFF846CA185AE90BF6D8D1D629B477
018D515285DB913B07B991B03FC783EC9AC7A95C0832ED8BBB0DD76A1AFF7C11
602CB8D4C3AF5F7E10564BE3069A6471C84A6383AD36B8513D6171F69B4EC965
F20FD458E611D3D1559DE16723BFEEEB89B83D606C8D3D51A248CF6820ED0708
D30416E6BA194902568EFB99BA2A11A006AA0626970C3D584FC866AF5726DA15
4F2FC6BEEE6C32BEC79DC8E4162D346EEDC7D59E2E35FCC35A8FB1374A9F04EE
0B1474CAFA71F66DB069C4A71F63B6B2C6284413458F2A8562F5A4EF2CB8C266
B41D4795B74CF292DD4B24C74979F33A7B5905412A63A7B060D4AED1627D355F
B3ED6DA55A90337B8E04C16D592E485F6EF7AD8AF7DC98317B6A6AA91FC252CC
9154A063F548C282A162CAD5D2FE82891C45CA0A785C96F1F06E800BA9E311A2
8D5D8BF9619C42C570B92D7CFB85881CF681FA9BF28E38A6B5FC35105AA172B6
9AFDE83A8C575D661C79DA208D661B4A14CB74A4E75E3722E96FBAC0D25855C9
47FC6F7FC49A0A77C7CBCE8F8EEAD343E4A88321871A09D6ECAED6F3418A66D3
5D6940A3FB549E66C235D83B848E819175C4E9E5718AC24980220873FCEAA30A
E9A24DE1BE94BB27F8DBE742F4224854F278E62E3F9604D021B8CB1F3E2BC6BB
C9867C6951F86EBEAFE135E7A0E7624962CB734BB20D1D0B7E15F1F37B146E9B
20B354BC4C0B202CE2F7C0CB55D51C66B61A5EAA03C457C3038F8143342F54E1
3C3F48838EBD13FACAE749176999DB46FD90A6BC2F4426A280476E29A0DB1A13
83012199F1C790B278DC11F710CB9C611DACF26EA544F3135A51C7884227FE1F
614CD62017182ABF5B60783A5F1A21651E03B5EE5CCF49D6FF0E1C2A1D07C443
17B626A1A0E934D63F193DFE8373812B11889221A826EC20ACB02B8B9DB3AE87
4944DD0BC77CBFAC42B134A8F709FAE585256923F98A7095B3ADAD59AF9895CA
B3102F99C5EC8F11085F39CC700080D217D10539AA75D65649C5DD7D613336B0
4AFEB7CAE68104B307262B600F0F23F9AE7E9A75E776B1AAE4419CB75F19D8A7
67D97EAFE01A77F70C17264C6D012C9B21890D920F741FBCB51E40CFA11055DA
DCEA78A5442859B5F8F06EF2BEA993B30615926EB3AD0F4C0A938071DB70E159
AD1C484760883A9B1C5D53B4741B8976945E19A999E5E2D042DFF3ADFDE37CC5
A8CFCA5F43719AD1A8820E0085F9FDB99F9A2D9201463680C1CB6233DF946795
8904FE0CDB957AC80CEFCD238891547878D8C35C826AD0C692661031139BD76C
3EB0E78543AD012E704A7D99AAE2A043D9B9B1B1DB680AEF44F588CE2ADB1B73
90B1B9ED39EB3C7C9EAEB3D47348C47D928BC883B8E7606E9B2EA82CE6846FA9
259C25AAF3D829CF1BA0005C9846F1A212FFEFC885746324E7B5A26D81B2879A
99BCAF708E329E13AF5FD4E3F37711B220A5C653EB9FD9F197906E16AEAEBAF7
4FF120E81A017D0A75B10ADD840AB260C5104C3FD3710060B6742DFAFD004F4E
AE7FECEB63BD5CC85BC0EA520128C4916ECFF2FE55F3966A44F4C7C598CA84DB
C96FF078CDC62E482F73B90F4F942FA5A35E9FB72D372540A3791246A4A48AA7
9D0E3B98D93168FF2EC1E3D2FF647CDA8A658B8141B78E3E58E761D50CD9C708
9DA7582A583F9757E0213197362FADBB36563B39CC5DC08A716507690C6BEE1E
9D01EBB6211CE96439F8CC4A300A4F062D162181267571C8BBF3827214AB88C4
2023A095BE10CF6ED9FF7180E27747B4B8CE38A23BE29EFB3641DA572B260154
7FF8582F5506509DB6A4A0FFACE3FA3388AC2C88956C08FB1D78C347970ACA87
4D9A0C4A7B8312527EA161286FBBAA4725D6E860991DD57568573B00F2C4B8E5
E1912E1EB334EF140EB6D5C3AAAA3D8C76370C8794328617C67F78C95BF92C7B
0DD0F91099C74E1A0AB3DD69D384A5233D5AD4D5EDC4E947C808E56D5238896C
B5F357D14C2AA1639C0379591FE149ECBCE1FA78864450FF961E69CAADCA5954
91F4354CBD2AF51AF3500A0BCBD4A5899AEA5A6332F6CFDB28804A2A5194BB54
CEF110C0A597AACEC635B7DC2445224EE5F06B290ADCCB6B5C0B01155572977C
943A587C47DD5C613E0C59C81FB8AF03D784477F698E22FDCD2771DFCB476C6A
557FC7782C66CF5E9150322D64F31CBF899852E6143C8DC74668DEE4C2A57505
6DD98E783DE4F875911391BF81A674D1926B1A456DDB9BB18B91945DAA1E227A
1993AB7A2DA47E1966773BD358D6931EEA4A860E1A17079A59DEB9C7A4C255E5
046F1CAB4EA8C71548510B4562C843E3E49DDC86C9A8711685EE86E04FE58DB7
99666EFCDF506E538B4F5CB6DA9FA303C45213D4A30F6E4A3CBE5BD29E1ED914
FA733C0DABD311F705E43ED6336198446A92679A4769270DD4DF1181B631F9DA
3728377EF6046833D5B28CD3819F06F6DA42F68F6F61B7EC79F3C801092EC74F
2DD3D889668B3DDADB2DC08CCECF91C92E414A1C0FC242551112D5422F5A9949
9D4DE48FE65172801684D2C3354167E4BAB6CAF7323C3BE4F26E76DE41E2654B
B24EC33F6C68DB5633B60AE54C0459012F234C088F17DCEB827E12F79C9CDFAA
9B0A5F43146D65D4A6118C7047D9101C59F62AEB10B76DBC5B53BBF7C2E9B30A
6238769AC682E631E9EA5355A4B864B822E4BEF90FC8D91791C36248BA8AD72B
675FCFE5A758883CB14D124424A5A0F3CD10D83D6FA118426104ABE8469462D6
98B65CA80091690B318D15DF5362891A3E20CA72D86BC2FDE6CAF7DC7BB6775E
45BFBDA302DDBF52CEA91240F9BEF9BC24FFF67EC29FF387B3AE04987B987870
D4FDCBF9D2FDA1C994DC5B176D421DADCFCB027E366EFCA3D1BF757902C2B35C
13488FBCD6F7FF21A2EE1D38F2EA585DB31C033991FEA6A4E3B9D38C9A98D8CD
58BAE752B3FBC8B862EE357855A8AD60C80F0D181CBE1F8EAF96A1FB683D037A
8B75A2A28F1D9D87A56C53096ABBF5B0A0BAE3858EE00EB5FDBB9BDF8C551C98
65F1236943348BB3D0B08377DA8931F6B6819C2C7359AD09F796B4B32769A6CF
B0CDA2F3C6AFF8D6834D2D4656934F80E26E247449E420474D5148D754E21E56
5959462956923CEFEC9D1B864F11C228BB1F1323EB5817FFD5477A7DAC80AF7C
82C46383D586CF5B419C47C100E2AAA5683747CFEDDFEB21BD9A117D9F443E6B
A71C5D42375AA3B65091F0F00EB209F3319C722BB50A50983A848BDF672C03F5
0235B5B3E58C4306C03FC72B1566EB2467302E945ADBDB2D824FAA6F52BA7680
3BC747072BBF5810213141AC0087818BC63C849DF5158A61AD20136DD4A7A7C2
596DCA5DF89F901B1FF3201D2A49483AAE4D67659C31F4F6F7DECB5E57E0C7B6
EB1C817BBC4C9E8BA2C8F8A84AD8D2C22CDC8C629A910811E03538F1C3266D47
A4F6907CFACB8177745EDDF7099B6A2639DF7E099BFD6576ACF2CDF306EEE9E7
630EABC9D0D922D8087F579C8A4DD8D901A5B598D721639E2A82FC866989EC89
F7500B393E531E77C5D38E2FA764893C50807B44FB03A17EE9E03504AF1268BA
20621368DD7980ED826B1794C0E2CA89BB581FF57DDBFF7865063A2AFC57C5F4
F7B9F734AC514A3B200ED1151418051744E40FB9CADD55B14294EA45E98F210D
EE90F6F195A3051CAFF0C8466689DE8852D903268B55D5F7EC0111D574BA4192
FAEF41B72F90D8D8FA2CE5E0A6F404520555E8225778CA4AF5AF5336910F7C7A
F7F4661E027D24216394F39CBCADA250A0D4C3C5629CE9608BB7E77F5201C8A0
46181A90CD43239F322B3428E32E833FD988D566417E5C380DFF2FE0F2AD7CE0
FEE3CAD755AC23964FB3A0FE97C127E2C7BBC9451EDA76E0F06E75724F330119
4447ED73AF6E20D6DB1C2D4250D3FA4115EA205406C0316645AA6A30BD5F457D
BE548C32954C60747297001747473ED6CA6FCBD88A4CBEFE5BD31C5B14B003F3
8EA1D7463ED69CABC8348BD4A6AE9FEE690C5A5AA7C69E764A8CF052407231C0
375E2F37692FC6772041BB732AC06C381F7B842FFFC85BB60BA78292EC4A87C2
2F3F318FDEFD34B69867522907B03CE274EFE7C8F454607F3C9C3193A9DEA9AA
DC50963EE144C69870B1900E6F375A57966CB2FA15F875D52FB45200693D9EFD
2E81E25119CE6CB429A6CEBDA66FA01AEAD16F8122A624D8D0BE2938D39FE7F6
39C8B27C1CDF74222DBA04EAFE66AC3F75A1B329B0699AAB2813BDE8D8B0F73B
4A0897E819B174FED312680E7155F6BDDF81D497152B5B8E27465FA896EEB67E
C29D6B621865797B989716AD56079DF83233ACEE78AA94633E6498E609DAB579
37C942247EEC7C3D1A2CD0703882022882FC4B99A649DEDD316A452589AC8DB8
767998B31B632B0001DC699199D0E5085DA46C33F2669E6F30C9175CB81DE744
DBD026F5809E87665EFBD1A969A0A87029002555ABBD26B408FBD0C338ECAB53
C7CD9EE56AFDB8FFF84BF9C1074110BF19A25FB6D57D9F12280CA34E3C531D23
DB4368822A54B9F1CA1D0AB6D86F2FC701D02C031A802EE8ECB4D53DC66D5005
7AA5DD56519A5BA8150EE28E48CFEC585B660691133EAD39C19619E1C5598792
E6234F8F99ADF2F52CFA3084DF1A69D83B364B0172D7B0057EEF4C53A3C98385
3F55A5E9E2E025616CC076DC7279487EB8AB68974B6A624CBE04DB15F93ED1E7
45EE5D955CF965A50C526CD68727714EBCDA41DE6A6F4FC47D44B52A9B6E6B4A
29D0ABF85E3E44D28B083410925E205FA634F54280465823915E71E2B6E9DEC6
627CF9865810CB4048505C9CC18EFB659E748CD0A83CCBEC10C2B121966B685A
DFDBD768C85782BF7402CFAB30F2490362FAF9F6F77FF4E07D723FB40B625D74
1836DDD891CD8106FB8F806001962781FBD89304BB7F34C33DC9CE42C9D4FD2A
2EE813B63D66396F8A1AE9DF20F80A9A4D2AAC24FE20349DADA8B5E8BE1C8B37
E1E6A5A3ED99643DF69770905D11D3022EEEE058F0316E770CE494FE067941D3
9239CFA195CE54BBFE9F13E4F119193F62F9C8DC1261E24AD7BAF6CF2C2809CB
2D8EA19368F5BEE2E7CE6CFC04FAC086AA21D20FDB13A7B499753DEAE2B2CF66
41B9CE61C958091ABDF028ABC067885B5CEC658A6FABE8C13BF3FEEF165DE8C3
E9109949A8FC60CB19E04A8CDACF7FA1C6FF8AF6320D750231B552FB90F125CD
2C6DE21294B59BE135A88195FA65AB63641336AE15C17A8E5C64EEB60A467F7D
DBBC496CD4CEF09B0ED0FE2BE22694DEB838C8B360EBFFB8D45798018A310214
EDF00FAA3C0CC50C7A259AF32F4C81D9B39470D9993CBF1A2F38D5DABBD8DD0F
6F9FD27FDA3B150A099993B56D62D33BF1DECD1AE4FDF62A5C8A02F9CAB15CA0
787876D43B1B2CA52C47B14AF203ABACBC7698CBC8184FDB1B2EA292DC3E4343
2CB3F9B7DF88E28C60B0640FE67FE79D51EBC78B81C0D98302B116A414547E48
01333A4E27079F931CB6DF6A0D1E7495CE376EA9AE847CEAAD3690C5D7488F24
01208A170460049FE53B64A8E2F910EBE60889D97FAC2C726F12B7CC3BAB365F
D0BA5627F11DBA2AA13501825F69A924310C8FC433B16EE4E3BA0ED1CC6D6B32
6DBE8B01CE184C35804E0E5F0C1C51B58495A7527AA19E519E4B7BF96F56410D
88FE9AF2073CC71FA4821E334EA5196476C60625748A5F7B606D8F2B795D1D07
ABA0CF10D5EAA01DEC75A8E2AB705ACBE2B7163A248F9A2052CB16C375721108
BA87F8AFA3FDEBFE8EEACAA64F94ADA8D9EA2F610ADB9AE7B4163CD828AD9F99
07BA4C5805B29461527779C680D7331ECE4C3BEFD8052487552D6830DF405001
A25522ED9D01672C98D28EA6C543FB1D7EDA9E3C5869AE7F9795AF7E5B0C2AF9
E9614246F9EDC7848FAF5022413AC49A689F350E23BFD1FDCEC304B11DA6C59B
6E264434295F118DE26D1A1F383A841D36A60ABC801ADCFCD0F4619AF5EAE5B2
A6A238BB052A6CF39E315C2020C48D80389D13DC55F3CBA7AFBE9E2A007A5A45
DA30F9FE2F3B9316FCFCAA6E29B87A60657F4D3CFC33AD3AAFBFCF5155DBD94E
8A04BC3D5940B0C3605419DB6B4037BBC8A01E9B578EE9AFACEB56ABA9C9211D
DFFC557CFD182D3E9905C3208BAF3F046AC8895B0628C2094B36373AEDC78AC0
CE99A08844AAB39E0D5625F27CD0F76B40ADA170A603A96327B0F5A90B25E1B5
F1CEB73E5FAD995A978E05D129A47B94A83BA8BBE0821F0D3764780499D40FD9
7220A57BCFC8BC4394FA358F5E01AFB875F2F9A886781E369116E31B9A7E41FF
E5F947FCC28EC62CF9350692C92C2B12A45A8497E755038D26591E72AEA8204D
A694337C2C44E4993629F99D54CCB2D003B7A90E3226A018B17194868CDF2FAA
001D14C45CFB0B97FCF04F7209CF53EB8999EC4D371E4CC285AE19E4239FB889
D5887DC66CDC3DC082FD2E5E3EAB152F606A3B216C68E0284D2A0603E8BB0D69
F1E43D08FED6F95A072A6D5CF9F29195A1DC98449E7C884B795037290904E805
DE817B01385A421A62C9467B96625263691B74B711304BF8EFA7B2824045FAC2
CB969C561BD866436AA7E2D23F35BF3A18BABAE0C6D88AFE724AFE5B3A99A323
0B54898FAF37988045CDF5A09DED0E982F57CC95248DF0AB4CAF32CF5D34FC6B
9EFB0CE9E2DE267B63EB9C22BA2FE5415E01159CFCD7529747E83BB3B1C5DF36
4C5AA17D2DC944738E8A5C77FC02B11320971AE29C9069A0E7EBBAC288C082AF
3881E1B0776A65FC841FF9D27406CDE2D4E473A4D78CA603D85BE8F43E9AB900
6DBED0E33DDAC40634C2E86920B2212617E37597665FFCD6FEDFEB71B17AB612
6CEA29E0FBAF6CCD9639144703E2FA9B9C838D4D577703C076C07A78E71AF951
31A35960C694A8D4648D820C0576C9849012C92312E180F279C755C7D60EC29D
78FAF0A5C3F0DA69D52B13DCE1A256DF4C2E6C447D7AAAA186D1EF342A849C4A
DA368153807CF1F8EAF073497C25E7BC0326214806EC6ACAF88776D0BBD5440F
CF233D1A6CEFFB3F709E9102C9FC4C6861BADB6D446B49D6B2BBE2153BC0019F
C83B8FC4EE40043F30F5CE9A4BA0A2468576C9EBF1CE45019A55EB084D731F21
DCC270C4D87A52BE2D019E2E20DEDF7C66C7EC87FF234488C16215878B4C463C
060C81162A28ED2F41C7EA782170B724190FB6DB5AFB10CEB0DF9CAC9414561F
9000A6917AB78FD8766894659D16F3B6A5F61DA1846CA1645E544ABF8FE42890
2FA206A56A7EA995A3843F77755E8A233CCF544AA656492AEB00D6196163CB6B
38211EC86E8596C6C6BDEEDA71E529C25777CFDE35267ECAFB9B77F2697F3606
5EBFF99675D4AE976E2352B4DDDAD2A0803A969503312E02F92DDB2D5CC48320
84C209BF2F6FC2F8260125D5B1095A1DA5BFF73DCA994E151B105817936D0499
A373025D7176A1DA12C5F18D54E6C2BFF409CB6BBBB591640D9FF2E283432137
181BE33094783226D72416ADA472D42172C2B242E85251170D71B91067391C28
FD7C43A99BFD317464FD590C2CDBD1C09A5A387F6E984E6D0B8EF61444A41B2C
83FA8E33C32A7ADB97F2B942A83CBA3011023B6147A79A6B02DCB8948B9E67EC
515FA8BCB4E45BF73776D071EBFD4D6D8AA23C6BF4FD79FECFD3E2527C366EE2
1C3CB2232D59D039FE45DC84F70AAAFD8069DD7FEBAE8E9A0367F4B103C8B360
066803092C41562513488A100AE9E185F4736ACC35A5D504EB46E516241D64AD
D4B589EF59179D86562A15A8AEA8D7C9448FCF713B72D784B576AEF76AAB1413
31BE35D1D53031DAF3D31E22CB59C1820BECBB88E8E751FB364CB15D978B8098
3D72DEE80A0EFE77D9F3A71E397BF2C1EA6CADD6CCCDE8C7DD8FB4ADBACEE49E
15DCFC537A77FB30DDDC23E9D009C687D157C67E13429319130AC605567AAB11
F6E269A8BE14B34140647D6C9D36E43E1EF77D70480C95169CC7154FE97B3881
E95FFD71F422E62A86C144E2B386FBF5BFB9A384DA7D74D16AE9FE49EAE68E8A
173C6E68A2B726DFDD9BAE3417660CFB016425921E617414614B7DE856B631AF
CF77A460EBD7380086B91C752ED9C9FEC1583B0A18689EED938E37DA7C84DD3D
90C9B7FA30893825EE0B8745531200E4D511FB2E2E44C890AE4BB802AEFB64E6
D6E65FB42889654B81C949E950054A62A5BBB1FB0CD960ECFA25E04E6C584804
E9AEDBAD30518B27A1A8991B99C3F67B5D2AD961B490133D65678431674550B1
266E440ABF0F710EE2D94B4010CFDDDCC9DD0320DFAF349592F1864FA0227717
05017EF71080BAC5F8A493AA86305AC01E642597489DF17D427E1D26D9DDE761
79628AFD991EC75CA320EDFA5C0220FC55C9C157F240E68D86B5C0615C9CC23B
56F5CF0989A89F7D27FE8FA3703948128B47134C75C80BD70C47276312612645
DE89D004399970952EF1F9C302F0B30FA60DD74AABDDA616B74A8D0C23DB4778
0A4BD28CADD6CC13AA2E13749CD88731781B178A186480F3AC5C75BB2CD829D4
284CDBDD3777538B90AB85361AA98D75112AF5177B700C38DBC7410AD83AD5D5
81FEA7BDF6D6FA41286D7DE791522FDC7C9DF5C44AD27E4FAB4E6709B7FF9CE4
4D609C2069518AC3A809DBCE0CEF8E770FD9161CA4C06E2687D0A16A58032237
4CCF637B4D7E7F19D5D1CAC8E0278F8D4520DC42AB3DF1AAC8EC5636AB00A060
9B60B63A7852A80BCF279E1E97288541047DC50709EDC97D86B1EA63D9B8FD6D
1D010056ABFDECCD807E1C62D20C5A61F69CCCB6E29DECC00B9768D250B652B5
7060DC832EC1237363DD8BB8249FE957456014CB4238C6A2927C03024A64301D
849D2809FA74C187A9311C52F3D376CAA1AFC474E0375709FB2158A7BB81CEB2
2D6702AE620AF391FEEC27EDB7D784C0338E0C612C6F76494190A41F12758BB2
3932FD8C79410F73532F4B7F713C6F7B31DD97BF12AA41DA7FC8EDD79922578A
F51AFC92B6FD81585B7AC626BD55CA1D76724E16A4D0EFC8FEFD565FD357688D
08326D72C880463719122137CC5EAC632F133344616A464D44FD81511E9434E2
ED625C044ED4C8041FC45B20B54991C5518F027E1875EADCF481F28ACBC827D8
BFB3FF2B80182CE74EBD8CE0AEFD078BF33AC8452B06AD616CD64720B7F3CC3E
3223C24B31EE8D32258422E3B908AC70E2CEDA2E5AFDFC356304573D1C410766
1A5726147160D178D6ACC073D1F75353BF0CB3E744B6BC6EA5ECFD272C0D1BBB
D16DFE47F1DB5C2E24061433AC84D65BCDC2DE02A8B6E90612B373376B5A991C
514C160B8FAE7EF292F0E4839F00E3D8B40628A842DE06AAA8376124DAAB34F2
A1CD80169E082BF1BE1E250F2B6BF7E24EB39E594612DB9DA9182D9A2216A0C7
76C19D63B0B0A049805394F365AEA9F722FAF4FB7891D69834010705273BFB7F
B3B6849AD2D91F0C57FAD04FF5363ED43EB2F6023D696CB72F388335D3471943
07D97A0187CE18023700570647FA07B7B6A0D093A4FE5D12FC8483930C1F150F
142EC127BA83A6B6E2D263022E5BFDF6B2478D65D1FE3B61F9524B2531960990
848E97279CA9309A66491E082DAA686D6B44258CFAE088D0675375F74D9956C1
FEFF0C1F4808B6EFD9488C0E2FB5A0D068983854894A70B3A4AE8B62CF8FA6C0
70280DECFC7D7540823E930390F2EB570223F1F77E2BA5DC312204DB84C1AC0C
29CE94980161A5E9A38F7A84F2587E6D77743CB66E80F57486587B4AC4D95DB9
927A24F40C05146742AEE50771636E26F2455E3ED900C5C82F42692D7D5B83E0
EAD39836713445E76370E109AD1A2D7BAF30AB826B130FD4D792C20CD8EFEB09
2864C16306E3DFB6971B8D2EC44ADF05B8A358F92A0D982B21F308890D534253
11B73BCD2AD18E295364BC9D11794A226F28266C950CDD1E0828D8A3B11F424A
40F20410F3A200FAB3EDBD514DAEE138650890BCE4E8710A61894C4B0F62BCC8
A00BF3DAB3E9E8917A8AE91929A283384E24519FF5E77094D7F614AAEE0D8590
A35E8D2E02512D9200C4FD6964CABBE68F4230E2F6244EAB5D24872A1E30878B
264FB7446BB37DFDF9D713986FC99704E95EC381C3000765A653C8EA2204883B
4C9A2B56367EE13FCB7A3F6859CCA75083EF770E5CE43164D3BA3C2DB5567C04
962DFA001455FDDF7B415B76ACD32F8C7DB5CAB34C85DBE53F5AC2B30587C165
B7AF8416247079D25627DCD5E4F209F51FE26AE62FD41923138983F4D51DBCBE
3B304B50397FA27FA89E1552253E8E7F8A74E4216D8167F65F7DDC5311C26D94
F4E4D260EA14CCDBF15C9883F700AF730F8C9F6553A6AC2BEDE46B97C28C1DDB
3B6D45AD337F6E5FC7A2E977B8BAD89685D20A0453CE736CCB491BC1CFA4BAF7
17F1EC652F654390D257C911558D443724F04E16A1A0B9A804FE6781DC304E1A
B4554FE9D71BDC17CE7682555FD05FA4449D8FCC5E90761F6A2BC2CC4397AA18
D757B32592B99B98CA431EF71916BD6C4F1E98DE0739A4FC6892B74F82B2F67F
E82CF17349B9ECAA4B1B14DB75F1710637310CD18D78DB2A5DFBF46911DBA33F
CD90FDEE8391AA18EEDB9CD1B96D1B3A4DFEFCC60507A55C49ADE1A9E9DEC87C
5330F52617DE6B5F1B5A473A8EE59749E5B1EFBD686583A0C40207B1CCD5909C
C8F8BDB878857E5247303B81C4E37BD81957ADB08D39AAB53F982E0BFCD13662
4DAA5EFE9FF1743C357AF53A8CD5B11DAF49E7C09C4D057F30C847679508976F
7928EA84F290810C31000878AB6BEF4E76BE4CE194993CB8C9F94506DE4C0D57
D70ACCD254885992FF2038421558347A39ED494D7AE62B7B6895DECB77EA0BB7
6F5F951DFA4B5E479DD09CCA6164F6C266343F1373F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585F432571654308D4F946C6DADB
C749697BAB2D5F893EE00D414E8DFF8A120E06EB945666270DE4F9E3D89D6DA1
14F05DDEBFE49BE6CCC36B4864EA2D6C769FF65FC3872A9C8392F13CDA64C769
32E4D6079BB0CA2E1A287BED894C08F359CB4473250995CB01305E24E6CA388B
D1905DBD0FDE48DB7E771BDD4DC3ADA917B1EC39BBF248770A3620A6D21921F8
463A93D29C3D8BE4F0C494DCA605DF9FDCCB72867CCD540458C2C89F7AF7DAD5
3387F100CB76F77E97AFA3E446C65DF05BE32C87D547D7AE952F92AAA1924C0A
FC64225692A6559CB3706CD60FEC7FF8C03DECB0F80A56FB511C538D01EC9423
AB332926FE60D241B660B370DFB93A00576F77D4DA319B068FFB6060AAF40EB5
40CD540174737903DE67E775663B85B3BEDF0AD31AD80035725506113918E5F2
9C3C662800E45BF5E62E6503FC87B005448A17FF1AA5117AE241375DBC823878
1BE2F98C8C73A33DAA0A97C4C4DBA825B0E4D347A04E25BE0127D82D914E3583
1C4DAC2B64393313814857AFF7B9A1E820720EC4993EC419CC471B55FD80073D
3B8D6DDC59C6DA3DB9B063A7C548C58576081BF82367569CC2354D7B725C2E2B
38D20E81C0700BFFBAD29E73A85071558A0F760B41AB559982262323161F994C
31A54DDC94C9A8E8625557BFA0C123C0DBC2E86BA465DAC7EC07F731E0BB8C7C
8ED352E0A1E6DC93E52AF793A4937CFC9E9ACC236CE307310AA50B88FB72AF04
F2704D9367231B1B8C4102A58FD6661206180415ED106D34CD0D4E15BC7C544B
48AD9D4C1D6980F5AEED12CA0A3B389CE279DD6A04BEC1A37AC300FCBB1C06B9
6F6B9BEB03CBB714C14F836C721D7D05ADA50E7AA9F5E63EB42DCACCEB2D1D51
2CE82BF4C7BACFBF5CDDB57DC37B8F4B616CE814F5FE677F1C43FD44B04EF8FD
DDE8BB62048120C71DD9796FF15DC108C49FA095EC0343EE5D779117ED8FD7FE
7735F42FEAE9CAD1F4303B40C2CEB041BA2CF596FD49BBB75F8829643C98362E
5DFF8D686C4C38E3197D40FD7E0263C5E12C84989D53EB4ADAB7DBC6A98B5349
27893682DFA31AF1544E5A4C47C2840A81E8B6583FD578DA521760CDF11B243F
84934CABF36510FAB855E4BDA6A34B1BDC6BC1C6F285F9BD614A00DE9A3CD2AA
76CDDD1615A97492080417282319232BAC16723F6AB14FF28B55E34DD20F2361
EC01A768662EF811CDCF4EE95F5041605D5F8BBCF6E99BA6F80C5A83CB861946
98E1E30CB9F072CD9F501887DF4F3876A8DFB28EB1B788EB351D5B3181FD452E
D1B23206999277DCF4094F14AB83244F2CFBD983F58202AC4D1F90F243CBDC1C
A8415532C46786445650B4C3B3B34DC23067B46E16ADDB37096AB12FDD09488A
DA885BD6C808D1735EA6532062585E2C48AAEA1313DAB2EBF47C481B27110C8E
5BD96008A6B533E7FA9937D897156E72985C4EEBA957F806D774987CA1785BE1
9DC887E4B9CBC486B9465EA932358E192532476CD8EA9F1E3F09F840B0FB121B
B6E3FFFBB204C6D59C06173E5D970DDBEBA58D7185CA50794580912325B380D2
DFC3330A4B4901998233BA78DF24F7346816A83558EDF469738503C9DFF9B792
A52D53ECE3E2D5D2CFAC728F6C837C47D6A75B8B8B3A57434E35B2D75D4C69E5
B290507DCE02D46249DC54A5B8AD468EBA07B83DFAF22CC1614685C7EC954B26
6C89614B0E5C2CEE42BE5F9C9C20CBC400B8A5C2A2A74304259BA77197AB229D
868DB9ABBBF1BD6A4CEBF286450E319D4ECF9A675A12DCB3CEEADAED78CA6DF8
0A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43E8A6B9310742DC47A084620AFE
85289172711778FD984607BA958E52F01604B6D9847F8356AC4375C0170A18D0
303CC174E858BEEC37DBBE1180DABBEEB17413F81E7C30AE540AD4662F845705
2B8E19161576918EB64532FD56FEF121AFDF8A079D6E5A66EF30FB955E04B4E4
220234A3AB503674A250BA9480E75AA77BFCC2FD0EB69A8EFD152C080DB53A0F
732995213EF3AEEC80D37FA467050330418FA9307826F81E9C990A17DB0EDF2A
084E7A3EB215C17570FD618D6DD2CCDCBDAE0CBF85858B9A3020F76D668D0D22
2C7BE1A3CC54474A1BCC34E4F775C8645DC833DCC51E87B7D7B3EEDA7B21AB66
C93DF06A84B1D55E3FE6ECEB25B18BCBACFAF313AC51BA6360C4F0BC34696A9F
4BE1514FFED49364D2E81715E78DF8DFDCA584987FD535832BFF11FF54BE1ADE
EAC0BE35B4D797289C5F11356E462A7E8180271AF307F9D78605927101470EDD
C75723D66953BD9D0ABA83A510E6AF945D1C4A52247DB24864A451C9C2B5E8F3
3EA436393E94DD3DF00391AFE92FB3D7D0BB1FE02AE2266A5AD24A193B41929B
3ADDC71EE1321603E2DA27D262DA6DCE3D7753EF073C3568C3DF17E4F251AFDB
DDDFFBEAFCB4B635CC9D882B429D5BD36F3830B2C6403913AC6DA78572CB0FBD
D63E07C1D8787128BF2A338111D379CC29B6016030205E6D962397C2F81BD0D8
81BCAFDB3E226A75B46E8F63BCC10AA787895C6A55FE737A2D1BD5E97D512038
67096F1E0C44D1F9FD909D1A1E66B62C8B9E3DDC3A674C373C97DDBFD74459C4
B4AFF52F8A8BACD0154C4751E43511619342A1E68808DCC71D815A17628E21B2
09878776516549BDD8B50EC74C20E497DF7C25DE8C7E5E03578D23A7FE57C159
7662BCD293F36E85DB7A95F913CD3BACA86234BFAD7338E4B75557CC13AA3D0E
F9ED65B5CB40F92036C369276631CBFCD0AF74579C2FE16FCFB48A244E417222
6D123623F08227DF2EBE04B0C0F9E0B3FE6A4032A79F8836C5D562E5D1649123
47EFFF62332ECA4C3EF29948A6B0BFDEDC9E199CCB170BB7DC5A3B3CE69F746B
0E406EA3560C339270049138602A6B315D5B4ACC55425C67B9A199FB48F06EEA
601146907D82201207A1A3205A594FA324A885E23DD38DC362BB5CED15E4163B
3F53B57F20E678DF666EE3307CC5E44CB159EBA4444D2FA34B400A1D5E69C79A
DE3610FE2DECA6AE8458D55CCE0D52FC0D1383C50BB3E6C3B1FFBA0541334D4B
0851316DE2DDD265DD28F866A0FF48B1BC0D4BBAF1419CC7E8D88071F84CC40F
616966F9FF89EF1E670854C775CB74868FF3DA8E8BB2914E4AA12B8C341FE6BB
4CBDE87604ACB73FDD699E1F99C75B537F8D9EB6E1714FA35ADF9E50101648DD
A175392659FD1C0ED66105CE55E6FEB9E88EAB809CA21817F6165F415BC376C4
1FEDEA8170FF3999F81FCA74A5D1BBA070830EA0C3BC5E7FE492727B5A514CA3
DBBDC78B4610EF33F894F09341F8E2B088B60F3DA6B9A3DC4B5A29239021B54C
4CBAC15AD7D53625BABFE9264F5A9AAB72589DCDB652FF0580BED4BDFB5C006B
3A67F2DFCA3510D28B3A9C69810A815C500BCCE07CCF4C82B36E837B98EC29FF
6EFEC92A1A3207621DD4DFFB6670BDB925A90C249457A9A09A3BD8FE0C30CC65
CACF4A12059C1C6D8809A46BCE153A6F03BA1181D51CD674D81BED6B506E9DC4
C2F4489DFFADD2B69CA86C897817909E67A56D95E3D2A588262A530E3AB9DEFC
B30C312616D50C5A88058ED4BA50D627BC2A1653661B1B02DC99C2DF9CE4C399
406297B02DB5281C5464771C4FA53E3A27ED8785F2C8A742BEF4D72D867A48AB
FF392A9DC7A655FE931BE2954C6774E48E46B75B7336487EFC8E7E8E3AFB3EA7
FB29C8E925AD6E7713609222EC8CEAE142E628F7D0CAF26937B4FA3A237101EB
114A7236989F371A8F30B1B39DA9B1F203A2814A200FFD13443A1F89DB490A00
E006CDBF5C2D61B80B78261A2EE0CDDF20AB92E8A97C2CE2BC5251E8FDBDF0A6
69DC884A3D3E8D7353FBAFA30D7D1BE099D46E085D6B51FD3E2A4D13F246365F
484231AE506E05F17E4FD85B99C188AAA3E46C5623B2527B2FD8794ED7AA6164
EE93BB7A52712BFCA6CEE134088972E4EB04B6E31CF891C1355616A3E3ED3802
631F5E018C0AC8ADC2206AB30625167F64DB1DAE730A9B74A181E1BB6232DD51
BDE9E850516B265FDE230AD073B3113F6AC48A4ED73728F66AD96739FE25F4A0
23E5022DE3CA8CED4AAF52B21619676BDE9A0100691785B420DD8251DA22A5AD
D760B6702949B76D3D376F82445B32E281867F1FD2DA481712426AD5BF5195F1
B5BC9DD41669BEABA06ED898DA42E3412624A3EA35E32A6B48A229FA7B50C20B
807CDBEF07FFC5DB8427CF5603E04E9DF71775CDE3DF36111ABC1E310F7D2A2D
A041F2AAD3BEA22E12E9C4197DFF11EE53B799A9746BFDF853EEA81156443EDB
4FD3651372804A5791BF03E128C5E03403A417DEF8094BBD496640483B35CE71
CECBA5D55BE3E5B76954D2332F6DFEDABFD4E2155814254DEDD556B723D4C5F1
5585E0D49AE6F7F92116E93B29DDB2CBF6580A320311F3167C1297E16AB0C59A
00DF442EB4B663D03AB336534CE24C80F654A39D2C5D50CA508BBD417C9C3A47
B945865D42CA061ACE401105AAFFA59E2B7D777E8A10DB921C86FBEEB0F238F7
A3840B84B2C925BA9BF6290324C59F30816B248D320852F36B5A01A7EE18656A
AC3D73B851D54A2FA55862DD7ACA4B0A794D061C547E8F1798A64F9917FF908D
97D74344690024FD13CDE6D313A06587E6329F6CC3FF5D856630C0E0ADCBD3D1
F3B66962A7C6579DE0654DFBE02A3EF7E4B3FFC5A421EEFE780A9E6A96422158
6B476F1E81A0D6C0E48F1D0658CE25893762A75D4F50F1E0AFCB3CB26A58AB5F
54BA9DFC5AB8E2FD327A316832E8314949DAE5D9D2265D146DEC8FFD03520F24
83A9ECF884700B578CE26E351964BD6CED3994683B9A6459F719364AB5A96EFA
F64CCAC84F6887463F834EDD26086059D59134181BD2EF3F96E1641665CDC62F
43190AF72F1267A2B06A906FE1F4422F943C2C619A471F70A5421DB90229FB43
784223147ECEF26C602D5A0B9F21AC90CFBABDBAF23F2DF224CE648CC28F6C46
C83630A1FC67488A88645615CD417A612DA674ED9D083B105932C995D8F45B1A
97F424D96A77CC4B7EDB378480903E16C363F6E2C3BFD08E3F930E3B2B288D56
7B14C5C70A64082B76176782B27D27ED5B9896CD70018CAA5AD62F2AE089B719
699B0FF8100EEA47EBBE73220484416921FC351B513F872B3B499AE2072E8471
E55F7B3383B1E81D6C228D0D8F53605963383845688E2A6771EFAF8EAE58FC78
3671F8B4C7D9E38F8A4FC47E217601D85E1950B7C532AD1CD0BBCED74EB5CDAB
58DFAF7E3886C50E125D3838DDC8AD6B097AFF22F0902C4BF760EF7ED4B9FC53
30FBF72C20FD2D8D13ACD5D214356F2F45DBAEB9560610E8BC8794666459C6F6
1497362CC036695A3B1BCCFCEDA9577FB496F37E847A814008155FBF4ADD4F2D
8EA4169C9682696B3BB407D282904556162ACF05935ADC9D0738AFD43FFAC4A8
5807B259FCF7E16415F4870225453753A46D529EEC4E818B2F64AA3D78C308C2
90FEECB6BFDFFBC6AD2E6CB30732E502C92D35A0618E0A1BE754949F69F741E1
1B0E4BBCDF33D30383BCD329DBE1B0C05AC285E8F98F0A8B4645AC96636979A8
D75386EF83D07E5699A02E0F53322EEE450F6DC39A4F03032CCA7A8325E86A4F
6A047A230D44CE6210E275C4AAC7931329F215373D9B5F73A28458F167602207
E3F017531D8DAF171FE45E294C0DC2B645CD0FB207639CA85E0B9CBB39B3A3E2
12FBB46B72FFD337D62DEA84790E7A03692F5F39C211E0A8AAA0F61F3B766E89
03D426B4F629671C96961BBA5BDE302E8EC96834F42B0DF9ABD9FAF437B1D562
84704BDA9F9D1871FA7C06BE8A05ED8446869B0248E5D6EB55135C882F72CA6B
FCCDCEA1D1CB9E0B5F8B788E8B529A6DDF1599180D0D13A7BCFCCC4C464DDFDD
2C978561DCE5A6224D8CA16AD3B4194DCBD2FB66C44CCFE98859CB8376F6696F
248F026AE03629275E879208F7C1CAEE3F2EA723D1AFACE261620AA957555CB2
D3499F528EEF65FB3FD9AFD61B320AFE43FA363DCA07A105112EC50060D3704B
CBE14EA52966A87F56465F99F38B91C3551FCAA5321D2BD57BBA8F20E1089B19
55407BFE76C4FCE10A480772DB52315576784A0DC7AB29D4922C5412F4EC1850
AD2E8B2E2DFA36287790391CC049D18C81495B697C9EC633B7940B6FEC3FEB15
0F5D31BE0A4439CB53B2A604E4DB99EECB40540B835F3B55C28B1F219A295EA2
33C1D55CEEA2BCF182CB1FE91856251703430B1D30B335FA797EBB5B18B8A9D2
0D1F534C56C075C97D92490662D36BCCDF48C47782FB069AA69C736E09A95ACB
AE929A652CE1A70D8E884D315F5657A4B34FE8665E119D5DEED4875CFA749754
2146761D126A8F1FD319A3E01D63419DC94430EBAEE3D7EB771783217304487D
83A3F1A51F01F3DD45CDF50F7582987B8CF313166A36C6C9AF3F3E216EB5AC64
3C64F78F0DAB2A437940D0549DBBB103CB9001E1F22D6C769FF65FC384AE7539
6A9E0C75F5F4AF235A76B190B7C820DD8F5FD938501BED149C3EE06D1BB6833E
143759A24E1723D48B52B9DEE8D114C4CAAC209BACCFB91BC44146B0C506FEB2
E281A539F89038940581F30AAC8F15E122C28FCA689F1FE96CA4D2484405096F
6827113E014543D720B32F3D444CAFEF449B46FF16F8C5EF336E559E48456F25
8C8FF2B6625D7D6D14AD7E2D7B9C33AD26E6E35C4C571314D8BD66C3E5495433
90C86972E05A00AEDFE9714C7460353E7C1799679F70B9AD1F1B264780C29E28
54889771C09FEE8157F8E575F949EEA02D70DAEA599538B401BB947057DCA369
EA1E0C9B6786589ABF1490FF9A2164E14341965A4F45BDCAA30CEBF136E32977
5373C4FD071718801C99C3A2609A37C63059AA26DEAB2B4198678D33A4D704BB
2876758BD4FA99ADB0240F7804FB337194A91DA1294A88CACA2481C23A34DBE2
2090B97CAAF511661930250CC03493B12594C2028BE191D58D0BF8530AB5F578
B3EF3A051A1EBC2C3852F0A4ABF75E0DBF78094B8EE733DE806B70BC9271B58F
B53091BFD77FE5642830EF891F673A3E14240474B6B93D28A18CF0219E4E3CD1
C3347056F5CC2CA1BD638FDBC72D68F43FAE9E0E14C921E807D6E08684D7A670
920A74D9A550706B8A1E864463DB622A1E3C477A9F53603756917E890D73FD44
C20F4FEF9B7C86F4C7FA75CCCE07936186D29A42E4FD73D69666B6859CB54CEF
8AB6645F084C94FC6DAAFFB0378E961F23A22F90BCE4D6B5AB72E613DC6D860C
02C89A49D068D03D6E33BCAC1E24CBAF59BBB6542D7F0FCC0990718AD72DE882
318F3FB4A5B6C8FB612C2A56FB3F4BA262EFD5E1015E6696A9A7B7CCF6AA300F
35188A1A8BE3CDE64D6CD57ACB75697CB3AAA345117F52001F9FE45663562D7C
B96E62C2FC5A08BAB591E632A23271197017E16C035A8D8BCB8BB846C142D06A
7C1D6A041FBADA15B871D8EE5C5D59DA0809F25B59042DBC36CF5F313861C94C
84FE106EBCDB7A2A5741DE2EBB67F8C82064FE13677383EF780CCAB77D4C9565
AEE9623B34370451AFE540417109D66B908E8A0140021223F35A56025DDC8BA5
82214CBAD469249AF698FEA33620F45B230623DD994111A1E8B4BFF9EAB5E6E8
56E8CF541359A9ADBDD053FFE12044D614F2EE53E735C0236A8D293DB503773A
3C023E4D490F0954392AF6E9F4031E6644DE617F5CC6C2BE654D6F4FFED70715
F2815DC6F2D19A3951F6E687C80B79074B5FE07CEDCC8D6944796261B1C0E8DE
0846E999FAC48ED32D4135CD4522BE309A8A0B441C97C72933CB184E0E80CD3C
B5F9DA660CD230DAA3C8C73B78F1F4AFBE45E003C74D81D8BB0D87E5B946E7E6
50FB45937DA3D26BC87BF92E6A39E5CFB59B3AD9D01281379FC2AD332424FD34
86028271CD0CFD444B00FA05A36AC0FF19688AA91B9EC3EA3E574ED7CE8FBAAA
EFDE5B26E8C5EF49AE6BE9895E3BBB2FA53D9820CF84627F821B06DCA548D41A
C5029B3A21963F33DBD333BE5A8544E7A732B34AC069FFBB7F09240A8E90371B
70D71E5ADF19DC33D921A7C27C263CF592F9992591E61E2EA0D386DBE07564AA
8CC5424B3F4190D3EFF3497BAA4E294E81C2EB3D6A3CA9C7F1F4FA7F43BDA23D
BEBBE33FB5C33E546FB800CD60BFB0FCE842B0EB8F9E070A77658436959FC8FE
BB7A46DA57A2332443AAA854263C5A6B8029D702B2ED49F9EBE0B908BD161EFA
ABAC4966154D1723A5124741BC83A4BB694144457814D6C925364FE53488B217
0DF95E3BCD2CE2D4C7E485B5D572F1CAE6CEF05786F4013542378934CE674595
0AC10A8C4A879CB5D1E20B70DF4239E2A7CEBBDAD3B6049A2CB2B6AC222C0B55
92691CD1E265DB2F523B702D4D0DBA35BE10A4F2383B11D57D9AF50EBCF7152E
3715510FBF60F16755CDFF5751F65D0DCFE08F837083F21026CF303DB053CB37
19FD811857B3884EE07C774FC3C46E6FF193765CC7C1CB566299DEFF54762991
0AE7AB2338897CA1F692BE47B8E6B36FD9D2B913165B632D6D53830EC8AC16DF
A6D3DC8EC0A7CF5869C16F750F477BFD4C215BBD1E63EEFC54422C447E62AB58
DB11887F6B23DE64B17F87BCB9F55C8FBE59384D9AC2450D1585F000F2AA0581
99B31DFD6082EED21DDD9E0294D27652FB2888D23CC260C74F78FFD6D9E3798C
66067F61AB8F320729FFEEAA9FD70B234F77CE6C6B2AC12A44360D78442D97BE
79ECD76DAF61F3D5E2E11C0BF57335E07E7BEC314607B40450181FE1EE6C9974
6E3692AF32355C108A37E8C450ACCC8157AE7F0D56454CA6FEEF31FFBEB10A4C
51DA57FF5852688823716AFBD77ECDF619D414084C9CAFD271BE6EAF9ABF4888
A736C954AEB0EF3546450393260E54D332C0BBBDB65E34AC829B410E341C3C89
5DC9B3E8180A57785BFA907BFE7188A918261595698D83639E82860BE4F9C7E3
9DEB8A62944B0CEB13D446EA85CDBE9F377BE69A31F6BA1A276444A6F2D97BFD
4E207E507A68E91182C3470D276254EA53688E6063977D63A5EFB71FA7E3AF08
086C3AE84BAAC6D656E7C30B5F868FCE8A4806CA3297B346B3FAF1CD19039BD0
6263CF1679662D69F8964D2D3E15126231D743D59C37521D43E8449C50CC3724
C99FDB24B546D40EADA4FF89346EC5EEE8490920831DF2F85AA112C90719FABF
0B232E71B74F890D1807CB287B9DDB846E1E8BFEAC11748F9B23F3B4A400BA42
0E2B2F2CD2A6F2692D84F3B3AEC6E5CFB5345709E0843D17A1AF8321D5CD9A8C
A24D15C89493708450A805794DD8923B331A0D34194D024E9701B395798DF208
55D6CAE79F45B6471993B1FAA55F8C1EDF18B587B4233E69308908DA8195D748
B7EA062080F3176288975B263B91F1118AE4C256182422DB0E16F037481EB90C
B1353AB59CA4C7A277B1D7BE8C501B9D6551D707F5DF31CA0AF4D3EFF5932676
D73F3909D0834B1784D732F58984C36E5CB4AF818134E3C94FE80AA5A1EF6BA5
C997B3FE3D863BD1FEA730DDD05574DE36AC1BCB6A6BF9C11AB86FC7D749D02A
5C7F266D95AD1FC045A607F8B190FF8698D35AD23D49C89024DA3E3E00245786
C7662EFAE1111C8E0CE934D753B54DBC6837D3721666035572359CA964B56F3E
18707368AD93D91DF5B6DE60A86AA097071CCA87F35D95463CEF16C83E13E04C
DC36502962776D72A92B481396B787EA34084475E4A74116603461B42A2DC4A9
4277119EA93F0BB7A568A2521058EB217B6AF8D1B6E06AF51458DDE29D1B6F97
76D4F00AC378B8F83C812CD5897F861FD3B2691B20EC38E6DEBDB265BA9B877B
857DA39049F5887F6C75EA22E2C1A23C3562E0B1D3B7C6EBE87F52DF66842CF7
6147C53C987E387AA05B39F1A395E368774E2494B4AFBBD5E0735B99A6E9DDA6
235F03ED7430B4A3B483E8A0332A36A148286251ACB38225CD15EEA740612936
7328A8CFA97E2EBD118E5995461E0B1ADF4AEE1A0F6719816EF77AB9162CB247
A496CBE8F7E7F2F1B56D62662A6D384C6C7BA5C4F8FA2B27291003DDE65CC95D
46C98EEB655F869874C8D6BF0F1A03CC37983703D2D0F23201F566DF1D4CC403
1231FA629529A80745E6D67BF6F3199EE1B2DD134A5D1F4916965CA4B0D9FBF4
365996917E4A016C5B0D77A277EE5A0BA86B250C9EA283A6FC5A51E7F50385C4
A11076467D5A11AB8455BCB6EC29AB731DEEDBE78843300158908F77C0AC7595
66699FCF24D571EF958527CC1DF6AB5C1ABD2BB2058BE823AA0F5DBE9B08932B
33CC7FE1E9E6473AE9140BEC5BF1CD93137BCE2E4D53089C9246ADCF05757819
4EC041732AE96C095EED5449C6319F2DB9F1065F9997AC88663563AD543641E0
F8A3E7314914C307549274C1929A48E065430D7FE36AA71D4111CB414AF4C3A1
FF1DA06BD970F4EACA5A433EAA684798E24F49EE478851762DBCD7BDA90588B6
477833D08DDDDDA07EB0380EB95329B5EB4181EC1CFA93D5D6087892FEE1D0B7
EECA805A8ECC06C40AE32B7AD77F1645EFCF7BA5E07C667227EF142D008023A5
4AEF3F5D38202A50A83FD3C8CEBEC959F88C7FBD83893B11398E7B381CBBE03E
772107A0A7F2C8164F437493BB4DA538B31952E14D6E5B4077B438642E42FF78
D04981025FF73B3F4E335518719AAD042326336F8F8B74C4B74F81E1D67475BC
144DA407AD23A00FE500E89D1C1CB5ED1EFEC18E61A7F959C372CC394E35F1C3
03458F742E5D68393F4B814B08DCC489BCA1DBEA9453339593AA2796E096D34E
34D31195C92C23DAC55E103B455346A301670D4B6CF9B669F9A7821BA9CDB18D
BF7655D964DE33C013CBF06EDF7DF34EAFE36D3104DADE5D30F2198F1DE2AAB8
F74ED575970BCCA45518262CD2F43A0425551630A577DAD1FB9A9903452B216F
CDBBD4971901A1EC7A5CEC917631CC377558E376564CD974075C16765C968654
4C28C98B3FC6DA2D6A5525430C7274518154C98F89398C20C67AB55EE7A2B744
B9BF4871200746A3F4AE131221DD7FC2E6AC04519A8277B0D0ADF9ABE8E06D48
45FD6631EE73EAF3BE24749C77B73FFBF6CB06BC530DAB4D120472AC822B3514
D3C73DBF1486A8CBBAE3C2B0A8DA1B30A710FDA8E19C96C0CF4B8DD9CE727EB9
D630C768562B4ED040B050721300E3A2A43B7CC317DB4DE1671F2A80B7BD216B
32682375DF670EA86EA88BCBFA0FCE1BF3E2852692398A0963BDC88D516EA0C2
1C0E7C532649F358062A6F656E4A434207F479B979EBEEF3AA14DC6B1CFB81E8
384982409EF99E36807EC961B9EEA0BE92B0D27AE82463D64080355B96736768
3DCBA5BAA51ED901C2EF30EDD2E154CDA4A749B64CEC3D5F27E9BBB71FC38AD6
4EB183DC8CE6BA6EEFE56301CAD471B578C550351AFB14709822858F28D896C7
9D2B7ECC963963186F455A258D68ABB0C055E40001A7DF2E63C5C6C85E16F12D
721CF6D9D7B91D272AB519363B318E5B29E35A6889CBA54B96C650A14153D4FF
9DB92D17AF717F38C81D34821006ACBDE6245E865C014F757FD2D921E10C0DF4
FC740725418AD8CCEA562E4CE72ACC8E9F387E1CA12F86DCE859F1F48AC037F2
6DEDB1C48ABA276E8632E6CAEAEE832EAA7D5B6BB5D9D2D263B0C712FEBAD41F
16CFEFB149CB67410C30C1F0203646F53CDDEC1E9BC671BA380EEC014CEBC4FB
75DCE676DAC7827316D6321026567EA30AFEB722FEC570EF543726F85E5F645B
558EC9F01C7F8542871DA7B97EA5BD7474168F3236BA41886FB70A076D18ACCA
5C42EC8386CADD4070AF745817CA28E22332AACBF0D8FD5B2308CE607285DC1B
0BC1152D95E4D0B8572BC54BF7982FDA7C9EFCDC6985DEA46099F4A677AA4C9C
1866027266B7A78754A47A60DE5681583DD1F54027C158296377C44DF0E22A5E
B61F0C232B03C08B27866537A9CA5F4C1329E4E4FF707C55BB3148051B2B6F2E
8AD884FC8A266F4E4F10325C170F158632C17F34AA01DD254BC109DFBFC89240
ACC6FA3F605EE8337BD8B1BD8B7D3C2AF94919F4393CDAFBE202175C9B476FF5
E0E623C90CB449B6497FA6DF9BDF56CD0040B6D35742A408FA0144E9F2C8551D
AE6C0383B4FDE7EA4385EBFE7949B84482AEE5F5F9584C994060D38300F3C265
939E082AC1F6F31F11EAA475B52C9CD7AEE826D1AADC34578423B70ED44AC6EF
E221ADB5E725ABE897F3748588C0373276D0A4757D7AAE13F28157D31056B9B7
198100A9F8542C98DB691FB17E10342EFFE68AB51007A354BA8965CF383F4F4A
E6DA98D1611D05E59ED9BE06C7BE6366406AE89584C3B69E74BD5CA1B86671E2
56B5438BC46021F039173A98507B84A1ACF2699CAE723459A022B949F64A0CA1
C46310F46B7B5244537DF81FE7DAC38900AA68FD20D74471AA7E56365E7A2F0A
6C26ABFAD26F89E6170054F4DF3B427E54790062892C27CA35471FF620F9B055
91122AE51D17299F18932E563C8827CC340AC4350DD2FF1A3EA9F8F37A463ED3
56ADE5722268FD35BA41E530CD238D7A64AAE581030B5371C2FA2214F61F7C12
4EB9A5AAFB7FB94EEC3492503255CB46F8BFDF529A8153C8A96379C955E2EDD5
E1FA2439F3AF1B989BD9CBB3BEF08265F3D767FB0C29372103FD8A2DEFB63714
22CDD07263005CD570998EC50A327F01B283971E8189C319B82232F548517D11
20549CBDBB8C1EC91AC0FA666F6A4161E6593F9EF18F465B4AC739B5D1D0322B
08C610708617F736363D15A6F3A561F9070294B5158F3BF4C21DFF5DF1470EB9
35F58ECF76577C21918D904DF26C22F2CE06915AEA5D9228210C44DEE96F0314
97B782C0B6F53FAAA72D225A19BCF7BE9C331D125D2C6D92AB98F3476A2DEC46
80612CEBD691C1F29AFD248BBB8E0EAC0044F9BD0787805266FA3D8E6051BC58
13A894351D75B4E76D510BD4422F3B2D14EA94DA7787E2AADB1E5A39BC73A055
2B813CE8F48ED4C769D736EC24453D3AEA55B4FDC0F8559EBBDAD3CCF9DF628C
A79B37017B277238EFCF5771340938FE80F4A0016F262535D1EC32C188F311A1
96B9B7B2611DF7956ED3C76FC43D32C024651D964F1BB8AF0E7365683AB92CAB
8700401A9AC05D7F7D81DA5D057FACEA25E3FDDBFF5B71E1041E4924D09A01E4
8600C076D52E31A80E035C198DC4CE8361B06606BC5EB5288F17387B01017CD1
9228503D6F62F200D5EEA87BBE828FF8EE35119C43CD7F7C516F379604B5ECA3
13CE2B7E74C6553408C5DB416A708103296593CA5F9A3083132992DDD77A3AAA
5EEF087833556391BC62768503B63EED342C4B7B0D4BE54647ACA6EFE2B36F83
F4A5AD1E08E5E3D2EFBFC313EB6FAF0E846D47D37B742CB4403FCC4FF99ECCAA
1D054122FF37532A19ED70DAEFE08ABC99F44B9CB53298E027EBA786DEA3D1CD
A3924BBF9973A460B75049883E0A65D7548FF58034C2E717D7C036C4724387E4
C3D366C09DA15D9C028D6592396A6F722EA7329875F80A15A83CF08C88AB326E
ED8BD5F3A8408E765D10FBD47A3236E97972414CD70F794DCFADC41348C22822
7096030F71597192B9A53B5E5E80578F06B6AD0CBA128622AB3C7395A7D7BEA7
8249DC3713B206E81B66FBEB3C50008793259254CC4393DD4079F36C4835EBD2
13F73D06F5516D4B62527B5CF78932BA792454338B249DB38E6A811A0EC86081
83F0A901526A61F03AB15E95DAA331DEA18215DCE7366F855387D354B1176E2C
7D462CC5B0877FF3BB038E2B59941CF27C40E56E111C02C63D449099242F3B2C
3CF03D7B220674963185479B852828FA39940741B4C18D5D18162D24D16544DE
B1E832FD39E7995E8DC6B52617AAD05C0DD4FA725468F167630971BC9D3058BC
62423629B215FF6538BB738F57DC49DBBC7C7BED0D9F20225C9A0C753776EAB0
AB28AE91FBA2E3A05DFAF82D6B12BCA604CCECAC1EA939882E59A6616527BF14
3B886DAD34396B7968740489B66F0C48BF1366719FE62A127BFC92D126A6766A
010AFC5CA6B7D6138B5FC98944A3658591FFB166C1B2C1EE4400921A13D50A6D
8E180C1F3C027C2F346633C6B2C622EB077FF6CE25C3A0B914FF7B69DA5D41D3
B1354EC2A90A96C179ACD0ED848A0571D06EF711358F57C826C17A73022E9C60
21E2EC86E528B84340FBE85EA19E73C9F875257FD719D237BF49500CBF51093F
D3DDB1402A0DCFD1427C1CDA9A3A68CA7A4061A48A08DE39AF8B76F8DB90D41A
A30592EB952D8BF2579F15DF8A379C22193172A65786D4241924FB0F320D8A0E
8646B9ECC7F6C6B3E84041F97A726D27087F0DE38B7D3BAB799E10682E2F6ED4
48BCEADEDC9DF49099F77990E1935842C875E3908C3C7117FEC519B0098AF7C1
77E856AC0D2FACB619AA69CDF7D99A5E969C5467975526AE162D3B310E7DFC8F
12FA8EA0E590A6A5021825CA32C991549BFEAE43D4BBEDDE5686BD453921C5DE
1AB4D28B5DF2D9C3F821A2A987A9A02100AA1666AC067623CAA2759A17460584
6A30F406B54A628CC7328803C554075CAE93C3FA59F803AFCDD25E2B78035998
4FAFB7C06E490962EA56CE5104B318B94306663ED2F4C2269E7B4818EB6C1DF1
7D12753325872821D147EB81F802FDFB88E53F8AEADE7101396E0F8D6757B876
2ADDDC62CD1D746F9C9361F20AA1117646EC8311E7A3053E14A50F48FB3EFD43
D7878161AB2F9488EA7B1344B79BA731CB157944C4FCA736C730D11B3E5FA612
9F1E60B7AE63BB90007FB34189C5F734583BDCA33FDBDAB7F276F401269EB350
DB4F6C811990609D8459AA0C46AB81DD9C38866DB35497B2251D50EF9E66EEFD
5723370829444B8849E672B9C53237EE8CA910987429F7AC777EBDE4F7C07022
55BE42C0D469A614F73C6AA900B1009C14E45CC64FB0AFC4D068BE9C0C257742
A9A1E579960A399C37FCC1AFE4FF3A879458F8137BFE756194BA9F892926DFE4
B20DEE7365DD9B6D6221B87D9A7F96D9D2C133D83A4C7FF6C6D6FD98BE95AF02
0AAE362171B6A074E7757A764A6A53ABBB99C58BC31B922ADF0002989595963A
A037C24F953F8EF9B3226E86D6CB4B7B53290DF82897A4D106A152100D16A39E
7E35FD367131FDFA0E8CBE0DD5BA6AF490FE3393E0A1F4282DDC680527B12436
EC37E083DFDD6DB3746BE5E31E4768A1A3FA743ACD100A1FDC10C8D37E7BDCC2
C0D855909E3959AB46ABAE81F5FAA8B8EF066284BFB428B40F077554D464306A
44A405958B90BC2EDE92E258774205EAE32797FB6574D0F9FF328CC506D0071A
4CDA7184B9CDC6B98CF79B51E92830824780033F86AC2D0C50F2B2E18C36C798
9A21947304DFA9981D14A3F347658296EEC4A58A71A5430AE9C4D41C30794FCA
BFB90BB0AA94063DBBC995B97F6DBAA564E467BF2A5031DE547EA4948ADA763A
8E81481D5B0B613FFE170028AA0DB177C37546FF0F6E3BF04C4E874E9385384F
FE3EA6104B353783A35F3505670C9E7667988528EADC382481782316B4BFEED7
75798590266E78EFBA6A5C19765EEEA7BCF304231C9754EA4E6B7F4BA1D53BF0
32BEBBEF8972B3704BA9F831FD4ABB3D5AE5FF6A6656A9FB0BA8234A8F28F949
E982B37F71FE4B5D897A2472185EB1BE2642229718C3FB17BB0FB02DE353187E
34C3220029672B30577D229E4D74B9E62A72595C220C20CC2956F578D37910AD
197AC0DDF01875B9172FB895F88C78C197659EEA75C5E8A2E4FBC4DC7E0DD289
14B7F8A88F453850097E28ED42D98D80A8473D8C8798F1828FAEB4F61E562353
6AAEC5E5DD073AC52BE4A90C6BB8074141ADA6B57627D996616251CBB353AC94
3E4E33878E169E5FE0D6134686EFEB55E5C2386F355FEC85F07A9C8865E617C6
8F7EB50DB3BDC0B3A663581A51F12A76BCC4E9F50C87371A85DC21C66B4AAA86
DF5CB5D6B1F6F9AD92CDAEABBD1BC284A9D63ED237EE7720590689950C787F5D
0A32E854E7E160D6BD5041CC44DDC4E44DCBA712979733BCFE2A03379F5DE952
B71EC6718D20810D599A35BD063B3B05B9D806F6F7BC6A0643C4C666C20031D6
78BF2FE51AE8C475743D1A480D067E253D1B06A49C7DB9D88A67BABA0F645F09
C470DD9EB55E11F62992DC23800CD80C64F2A0FDF91CDE413AA9B3956DA27E39
FECFBA03D4255E816CA86AA9893995450316680BCFBD2F28BAD1A74E9D87F176
4E20B8CF51561DA9F832D179EF133C6025EA5853B21079D76A018F871E660A40
1A09D2CF778E9AC49C760F10DEB5A75152F9CC16FFB560C6B96CCC5A6C68DF69
9FEAC579F12DA1FE0E00F7603EFEAA2737A5A17FA520F3D8C391A5FDDFB802E0
844E401DC64511A7DDD46924E525F08592E3D75DAE685F390A137AB10F59BBA9
69645A959EBF068B67B4FB56400DCE8F0BE382BB75E3CEF60AB09EABF43AD3AE
2FA6FAC50C19912AB21712ADE6FFFB353C61FEE72A8C67FA05110250925B6D79
6F4F60D8110D50D527ACBDD0D37643746EFD6A455CB8416E173FE97B20FC935B
36FF9941294C7984B73C271B0A5DE3A5CE285D3E1C1A63D6522D775FADD5AFCF
92C7596EC12A5F0E222C8082431B7407525CE9804677FA2A33C0EB41B1BE8506
3E797D2EB6C9EE4A6A595E478508FDDEBD357194D56C0E2DC5B99D42C405DA87
83C9538B63142AF28251658C0B85A82AA6087FFF69499F029D2AA21FAC152447
3966457DFB2A1BCE515D8303214E49AA9E5273D6A1CFE8F85CCDCD23E98D12E7
FFB1E5B68D49233D8BBE90E7DD85E6D3E1823C89FC3673D048E1F33E63FCD46A
7A8FCA9E5E11D1D04A942A107E287583299585A257A91838701F6E9CECCED5A0
8196B14F86D24C53F3C4124015D8277E8002E8A6A1932DFB05188B8CA1257A0B
A39943C0F02C7ED0ED0D4922958ED3F2CDBC669318F6036096398D8D10060F47
5335C0F4098B105F2AFE93F985A3A0C832E1C5C53B515B2D0D388D024FF9BBB6
EC84DCD1A0713680A36D7EF051F81CC455E9756221FC5F9F700989C4B60F991A
011FA78879F0B3628E874598F2BFF707366A3244A15D4678CA22A4DAF435CE37
0D2BFE1DF2C6C0C9287AFE114095C180A3BCC8A18B786CEDB5616167A72ADBE2
277F484B498B425A174C846508DFC114A3A39E4386E2A7C606B781BFC49F410F
0749DFFDD452B2D6C4E2679520C8CF556FCA79F73793256C1FF2D303C6B05FE6
7C8EFFDDAD60EC2826BA27B86F80D5D36FE79385340123176C78092F1052329F
554A230B5B640E90182D3D6E73FD207DF414A0B06D31BAF2C0AF2F8DE6E9E320
01680537AC10C5B9F6C28F1A6DDA9E6E5D3E87201A571E5C5F50432EC1033A8C
14E2B4F1E2BDB3B9E012E0581CE386CE1A7E6BEAA31D504769CEDBAF52584BA7
BB47B7730241AEB0CF50AC26B7AB6E49B83B5B27095B7D30F5855107EBB20483
387789141CFE6117875BA1AD14E87207F72984560C996B89DF1E65800A13C1DC
306EC92FA9101102BA430903CF22FDA08CADBFC60CD1274EC0856A858895B857
212AFBBA79257C6496F591F480770C0F7068DC8BBEAD8BA4394E65ABA1AAA561
FB9616EE8656AE5C8E4A3F4482EB2DC7CEFFD5D6387906672CF0FD18C289A4E6
5B9370C28879A15FB174EF57CC62EE33FCE5A278F0BF2BF053827025D7C1DD61
DB3F29B98860533FA4C2DB29F09218F9E07A50017EBD4937ABC52635C2087846
8FFA86E85C15FAB0959D8EAEC6044A9FEEF7CB21F19C97477110EC179ECE7884
CA77A76FE5DD2C0B685CBA31339B181ADB88A2F7B0EBDF013CCFFD1970FDA41C
F3DEBCA617BCDAFDAEA5055336EA2E3A5550E0FF80432D7B91A90BF7D61C580B
6C00AB7F16AB60BA139025402A231813E7FE1CFE5EF152061B0EE82ACF763177
0F8BE4B76DA859E741D241E8EBF20C87A96D52EE13D586184B8CF6EA512EB9B4
B111F5ACF898E9546F9F4C8AA5EB608A20D015E1A64A13DB5A8483B73E246B87
7C7A251B6941389E459E6FFDC7255BAE09B9DC1256645CD2AA3784697D66340B
2F5E305F2F8947A7C3DF1ECF85BC8517D54A0FB4B9EC66E3D71DCE12248300EB
BA1FA56454814D6D00FD1C1A9F252ACE951D37E340A445A4C9161827B3CA2A98
6A3005BB3755701F6EBFFD400F24117407A6F4AA51196FDEB16ADFB315B4C9B6
C936B35C68615F5615BCF4BE096546524C1F3C399ED666687A416DD7C1A4E691
A8FAB43790A9457BA8552AFB2F13B6A76CDB6D7AF476F8ADF4A5708FE8B4F1F1
CC22729585A45B4BE4AAB05A5685792642B9617F362327D6E434642F02D8ACD8
3618AA4225A04258FF2D4851A4A9880B66C3752DD0D3FF891FB1983B5D1BE826
3B7C4F80C23A6B2401EF9D881FD99716B60CC7E18341BADD152E644369BC7608
9B0953C8E68EB9B97FC24F21295BE03B13E907C6D05247CCACF8572ADDAC4883
F517B5D1B0E43F8E32A81970D6766AD892EEBBEEB1DAD06344AAFF0A056AB74C
9BC540293A353EEDDDA6C2510C331C148ADED6AB64A6556DB0F857C5E2DAA467
A35FFD738CA043E625221EBC005AFE8AD5F5C7D798885DE40071FC04174B8D8D
E3702AAFB838069B2921D5ED7E45F07774A60382E9140EAD0A3D5246F905E962
7969A8E956912FFC52B44C9BAB144AC48BBDCD5B32390CFC30FB615CA3A82F70
EE2D0B12732D7749F33B9547EEE2B94EBC03B2C53EB9F80BB4F154E1428CE233
AD0498821802D40E4D35C0C54DC242AB170D738B739EC6FD16A29A26EBB90A48
3D30E8FD3FED0A0378C915F83C4D5EF4BFFF35CCB3642D5642C06EB6751C135A
2B9A7EE8753C138A9CF039D55E1AB926E5F18314BC75823622CBF41796ED3003
F506835C39C5BFC8162F753A03C85AEC2E4C186236C0D8BA28EB259B7574818F
B510C453DA2B2E965BB7389D6091AF48974636D2C6007EC0903EFCF320C52AEE
3393AA49D30CE53A09E8FF5A51396C24BAC5F3E4FB7E3A4783F4490D6315AC70
5CAE5A635FCA5795C284F87A8F4F9D7A7150665468B779CAFB3221DA9B0A9C7C
975ECBC3F77D7A33B3DD2B06D394E6C78F7BB150E7AB82D07BD0AEB85B82197E
9D7090A7CA6B73B43069EC328C479B3DBAB29BC2020A6C805C92F6B9EE2BCAC4
16ABFE63737F07B72F9360173D814C0EC499AB117729209440A9DAA771AA8BC3
E1D35657EABF0C04362686D44733D9D886880B4F7CE5E2DF3911FEAD6F676794
98766AA409F9E9F938BBF81735391C7020BB83972D66BF80A5255D2EC4EEC1A8
52F92D4159F34967E95D444A41FEFFA7D6E6DA696DA3AA1D627EF7E87BDE5561
3052AA370E6FA29CB5B36B53672F050F5343A8863D71A6A8293A319109EA5F04
CA0B436A0920A67DD863D620BECAA4D50809EE4ED653A80B53F9A12262FD26D2
585343B7F51A9CE3A629043F67AE4F947F2E033E55988E1FF84B139CD109CBB6
58CFB8A9A78FF859B50E06DE32B58316BBD4D0C7CEAE57F84D3D62DBC0FE8083
F7D784D420B76DB355955F1523A9977400AF5047320A6187EBB5AD13E095ABCB
A84778709231E0731A56066FE116383E30F5699EC63D58E62CE959763D604330
B43AAFC6DDE8228212295FE6E2FB84D1014B39441A15A60093180BA5B8B1A13B
A0EF717288C1067D98F31DD3E81AA677B1C08079A3735C5475661290EFB97709
17A1BE42437F7D7900F91EDAC5A5DDFA1F124A6F7E3A1B38F3293972F49CA1E3
43CD0DDBE2891B4D79054417151FD2326D2CCB798680ACA66D4B68E57A35CC03
CA5A4844B0408F0FAEDD93B3EA89768F52B15AD8BAB34668B61D026FD827B3CC
04EE4DD40A49185B090E0CF1A3EF4D0C9562CBD44816F9E2E3C91BB03542B5ED
D5BB37DD9BCD939E8207965CF783EFCDFFE88A538326B5F7DE72C41544E6B6E5
DC04C0B5851F857E33784B77FBF8865D2F736DEF42B49D27665FD1D991910661
4871A93703E50C112531080B87B192C9A081FE7BA1043F6712E1CE8674717E87
E64817C9F4BD8D4B879466A3F86EBFA7ADAAACB51B3F77637003F6A1BBD0BE09
BA3B229EDA764AA8084F507BC4F987908521788AF1D30D1C1D928EA0F406BCE2
5E3246DA1FB48859C7C12C33F05DF1E75C4BF29BDEBE0B0FDE4931EEAA142CEE
541E2AB5A6F80A7662D4F231FD52D101E0FFB959312E1EC0DBA606E9DB8FDEC1
0DE741C4CDBEF0909FBB9FC6467D4BC9CEB3A92E6A7455E2602499896BAC066B
A925CC7E4411FFEA6BA2F6FC8F6793E32819C63D3C914A886262A5FF85E61B07
055FC7FBFEC89F42412BE605B74C3C3AB7B419D8B52C7C705B3011A614C717D1
14C750BCF82E36497AC0F134540444D13D6766A81ED7D82791E31B74CF9625D1
7EA0AF26F9061263BBE58EF766E7CDC90C78A14583829DF533C88356634D4D2E
67DF93FDE10746F5867F713E31D2F0021E3714E2AC7A7AF920F30B7D7F6B156D
282BB7BDFC55040CAAFD8D5580E51B2E7389F0860D96B08CE12A15AC695D536C
70CF084BDA1B7B4BEDAD7A2122A356DE174F6326EB777601DDDD49670D1E5C3A
78EA28954B7D59A9323FBD3D3CDC6BE99766D48BFCEE30AFEB8A005AD8A6932E
F60FAE13D85FD47C3240B0D4A30A9B2735D254D6822023560BBA53D7DC48D22A
B118F927B94363651231238AEBCEF601A532131CF7B3445EBF4604252867B580
7A2CCA18E0BD3DE1573C1C67FD9672AFFFC6BFBF6E15F2DD75E03B1CEAC76DCA
4976D8B825FC32FCC479AF32E3EDFB47D236F1DF4855633FB972180D0C399499
BE43E9C10CBB3E2BCF02C5A043D26C998981C5917BA59703A5D93AAD382C7BF9
EAC7674A13F3284E303109338A0EA5D5A2B5B1E141E44E8791BAE5A98CD0AF29
E9445CA93159A8478F76828CC9B0D6B7149AC9B1D84E8317A0E58805B9899AE7
F9A3ACE8854E09192087457F39C0A0CD7044DC743457A4508333EE28007E3966
2B605E78635E9CF24F45848FE15F389634652BAB110F5654E290528A3F4DD1CA
939766075140FA8934E6230852AA602BCB35E4EE5705B4EAAC117A91813231EC
FB23C46B3B6F86BB6FF89E16FA70EED965926BEBB90E3647268E779D1A6C6F8A
7C6244A7E8999A7AD6CCB1B46A933B9A223A0AA799A52CCBA9C5ED746B362D5E
B49BE2197714900034489890BA1DD2F7773E02BE5D11C800B65A0595D057966E
CF5C6CFFCA4F1E7EFEA1712AB0FAED34DCF3F08E761729F34DF22B935AFFC091
B8AFA0450BDFEC990BDBDD4FD5A6088E6EF1C70B717CC0374A0573FF12C97C4A
573576EB9EAEA29B290B1835D30B757A09045777F6AF96BBEB2A480F59C1C574
4E7FB772F42B14487C90EF83388F415E64D690D603312C204E6677A5F10B3D79
86638DD99426C39C32A9EFBC02AB2002A635213B34CAD6BDE8D827B0F08724C4
5490848F6D997E99F79BC9CAFD4724B72AA7C8CF7374F2DD33D3F5E5A721AAD5
7558C4EDECD7E9535DD3E4929ADF836F228B913721BC2FAA4719AB2D12F65086
13BEB33053A8A4C9233D479A1110EF1F5C07C8B3AB8599EA14FE874B911DB192
CEA6D6CB6A7CD3C298C42558FC5C3CBBC61863FBDB63B387A01085A6AD57C637
D19A9B5A45BAB2FF05804C3E86EF4C6460CE05C9E2FB0EF01744D679B9D1511C
FBA48C106BAAA3B6B4DE5B0562C361F000A74A081D1C91663D3AD43052831ED1
E8C0A5E0B91CCA23072E5B9C98E258B9BC5046B02CF2E0FE909FAD4780D9B422
D8AF6A336C7738C1773B9AD2B42B6642AD3DE4304749F794E490F206BF7F2AFB
2368AA1C7E291914C93A216F926F4987E6412008E5D26AA211314186FDCE91D3
060DE86B89049B98EAB03E80E68383B6A269D928DD3625659881AE8751E5F635
0A79A6F7553BD70697C5EC8A59D5ABEA556CA51B02F9CE106410F9F3B2AD0E99
F06D382AF5C789D2FFB3E85DE4B2B15B93B746D73660EAD6F1890A91C918F705
8F9486F77C7E3C8421AA1E946038699BCA9AA22965821A640594C80343FC862C
0561945F28F758841766B2A4A349DE72D8F10621CE72BDB800FD4EA02D40673D
5DCB1B9F028D11C60E99918A1BA406245A9D4B62A4EC4752B17C5C7E5B90
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (Assignment3.dvi)
@start /Fa 134[40 3[45 1[35 35 2[45 45 1[25 6[40 45 40
45 45 11[66 51 45 56 2[66 61 1[51 5[56 56 66 2[56 19[30
23 61 45 39[45 2[{ TeXBase1Encoding ReEncodeFont }28
90.9091 /NimbusRomNo9L-ReguItal rf /Fb 134[45 4[30 35
2[51 1[51 1[25 6[40 51 2[45 11[66 61 51 66 2[71 66 7[56
61 66 6[52 7[45 2[45 1[45 10[91 37[{ TeXBase1Encoding ReEncodeFont }23
90.9091 /NimbusRomNo9L-Medi rf /Fc 130[46 1[46 46 46
46 2[46 46 46 46 1[46 46 46 46 46 2[46 1[46 46 46 46
1[46 46 3[46 1[46 5[46 46 46 46 2[46 46 1[46 6[46 46
46 1[46 2[46 46 46 46 46 1[46 46 3[46 3[46 46 4[46 46
40[{ .85 ExtendFont TeXBase1Encoding ReEncodeFont }46
90.9091 /NimbusMonL-Regu rf /Fd 133[40 45 45 66 45 45
25 35 30 1[45 45 45 71 25 45 25 25 45 45 30 40 45 40
45 40 7[66 66 2[66 56 51 61 1[51 66 66 4[30 66 1[51 56
66 61 1[66 84 40 1[51 2[25 7[45 45 2[23 30 23 51 45 30
30 36[51 51 2[{ TeXBase1Encoding ReEncodeFont }56 90.9091
/NimbusRomNo9L-Regu rf /Ff 240[45 15[{}1 90.9091 /CMSY10
rf /Fg 138[66 40 47 53 1[66 60 66 100 33 2[33 1[60 2[66
53 66 60 13[66 86 1[73 6[47 2[73 80 1[86 1[86 14[60 60
49[{ TeXBase1Encoding ReEncodeFont }25 119.552 /NimbusRomNo9L-Medi
rf /Fh 138[50 28 39 33 2[50 6[50 2[44 50 44 1[44 19[89
4[72 3[72 9[28 50 3[50 50 50 50 50 50 3[25 44[{
 TeXBase1Encoding ReEncodeFont }22 99.6264 /NimbusRomNo9L-Regu
rf /Fi 139[40 56 4[72 112 3[40 1[72 1[64 17[80 15[96
1[104 6[40 1[72 72 3[72 15[72 35[{ TeXBase1Encoding ReEncodeFont }15
143.462 /NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 100 -136
a
SDict begin H.S end
 100 -136 a 100 -136 a
SDict begin H.R end
 100 -136 a 100 -136 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 100 -136
a 0 TeXcolorgray Black 0 TeXcolorgray 109 180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 109 180
a 109 180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 180 a 109 180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 109 180 a 109 180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109
180 a 109 180 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Constant Propagation and Folding)
/OUT pdfmark end
 109 180 a 109 180 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (SSA PRE) /OUT pdfmark
end
 109 180 a 109 180
a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 109 180 a 109 180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 109 180 a 109 180 a
SDict begin H.S end
 109 180 a 109
180 a
SDict begin 13.6 H.A end
 109 180 a 109 180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 109 180 a 0 TeXcolorgray 0
TeXcolorgray 1311 635 a Fi(CS738:)43 b(Assignment)33
b(#)j(3)1150 1092 y Fh(Due)25 b(date:)p 1 0 0 TeXcolorrgb
31 w(14)f(March)h(2012,)f(23:59:59)f(Hours)p 0 TeXcolorgray
109 1456 a
SDict begin H.S end
 109 1456 a 109 1456 a
SDict begin 18 H.A end
 109 1456 a 109 1456
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 109 1456 a Fg(Submission)30 b(Instructions)p 0 TeXcolorgray
245 1663 a Ff(\017)p 0 TeXcolorgray 46 w Fd(Create)24
b(a)f(single)i(pdf)f(\002le)f(named)55 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 5.4862 neg 169.6917 10.92291 .5
Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial Fc(assign3)p 1805 1663 28 4
v 36 w(<your)48 b(roll)g(number>.pdf)p 0 TeXcolorgray
245 1843 a Ff(\017)p 0 TeXcolorgray 46 w Fd(Send)23 b(it)h(by)f(email)h
(to)g(instructor)i(\(karkare@cse\))g(and)e(cop)o(y)h(to)e(both)i(T)-8
b(As)22 b(\(sbjoshi@cse,)k(pritesh@cse\))p 0 TeXcolorgray
245 2023 a Ff(\017)p 0 TeXcolorgray 46 w Fd(The)d(subject)i(of)f(the)g
(email)f(should)i(be)56 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 5.4862 neg 115.48946 10.92291
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
Fc([CS738])48 b(Assignment)i(3)p 0 TeXcolorgray 245 2202
a Ff(\017)p 0 TeXcolorgray 46 w Fd(There)28 b(will)f(be)g
Fb(20\045)g(penalty)h Fd(per)g(day)g(for)f(late)h(submission.)43
b(In)27 b(case)h(the)g(assignment)i(is)d(not)h(submitted)336
2315 y(within)c Fb(5)f(days)h Fd(of)f(deadline,)j(the)d(penalty)j(will)
d(be)h(carried)h(o)o(v)o(er)e(to)h(the)f(ne)o(xt)h(assignment.)109
2474 y
SDict begin H.S end
 109 2474 a 109 2474 a
SDict begin 13.6 H.A end
 109 2474 a 109 2474 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 109
2474 a 130 x Fg(1)119 b(Constant)30 b(Pr)n(opagation)g(and)g(F)m
(olding)109 2811 y Fd(F)o(or)g(a)g(programming)j(language)g(with)d
(only)i Fa(boolean)h Fd(type,)g(boolean)g(constants)g(\()p
Fa(TR)l(UE,)c(F)-10 b(ALSE)p Fd(\))28 b(and)j(boolean)109
2924 y(operations)i(\()p Fa(AND,)28 b(OR,)h(NO)l(T)p
Fd(\))g(design)j(a)e(data)h(\003o)n(w)e(frame)n(w)o(ork)i(for)g
(constant)h(propagation)i(and)d(folding.)51 b(The)109
3037 y(language,)37 b(ob)o(viously)-6 b(,)37 b(contains)d(basic)g
(constructs)h(lik)o(e)f(assignment)h(statements,)h(gotos)e(and)f
(conditionals)j(\(if-)109 3150 y(else\).)250 3263 y(In)23
b(the)h(frame)n(w)o(ork,)g(you)g(need)h(to:)p 0 TeXcolorgray
245 3430 a Ff(\017)p 0 TeXcolorgray 46 w Fd(Handle)f(the)g(distinction)
j(between)d(the)g Fa(unde\002ned)i Fd(v)n(alue,)e Fb(UNDEF)p
Fd(,)d(and)j(the)g Fa(unseen)h Fd(v)n(alue,)f Fb(UNSEEN)p
Fd(.)p 0 TeXcolorgray 245 3610 a Ff(\017)p 0 TeXcolorgray
46 w Fd(Optimize)i(e)o(xpressions)j(where)d Fb(ONE)d
Fd(ar)n(gument)28 b(determines)g(the)e(result)g(of)g(e)o(xpression)i
(\(e.g.)35 b Fb(TR)m(UE)24 b(OR)336 3723 y(any)f(=)g(any)g(OR)f(TR)m
(UE)f(=)i(TR)m(UE)p Fd(\).)f(Do)g(not)i(for)n(get)h(to)f(handle)h
Fb(UNDEF)c Fd(and)j Fb(UNSEEN)c Fd(appropriately)-6 b(.)109
3891 y(Sho)n(w)36 b(the)h(result)h(of)f Fa(your)h Fd(analysis)h(on)e
(the)g(follo)n(wing)i(program)f(when)f(at)g(the)g(Entry)g(node,)k(x,)f
(y)c(and)i(z)e(are)109 4004 y(initialized)26 b(to)d(\(a\))h(UNDEF)d
(\(b\))j(UNSEEN.)p 0 TeXcolorgray 0 TeXcolorgray 109
4172 a Fc(//)47 b(Entry:)248 4284 y(...)109 4397 y(L:)93
b(if)47 b(\(...\))h({)480 4510 y(x)e(=)h(y)g(AND)g(z;)294
4623 y(})g(else)h({)480 4736 y(x)e(=)h(TRUE;)294 4849
y(})294 5075 y(y)g(=)g(NOT)g(x;)294 5301 y(if)g(\(...\))h(goto)g(L;)109
5526 y(//)f(Exit)250 5694 y Fd(Is)23 b(your)i(frame)n(w)o(ork)f
(monotonic?)31 b(distrib)n(uti)n(v)o(e?)p 0 TeXcolorgray
1976 5943 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136
-136 a
SDict begin H.S end
 -136 -136 a -136 -136 a
SDict begin H.R end
 -136 -136 a -136 -136
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -136 -136 a 0 TeXcolorgray 0 TeXcolorgray 109 180 a
SDict begin H.S end

109 180 a 109 180 a
SDict begin 13.6 H.A end
 109 180 a 109 180 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 109 180 a 91
x Fg(2)119 b(SSA)31 b(PRE)109 478 y Fd(Sho)n(w)22 b(all)h(steps)i(in)e
(application)j(of)d(SSAPRE)d(algorithm)25 b(to)e(the)h(follo)n(wing)h
(\003o)n(w)d(graph)i(\(including)i(translation)g(to)109
591 y(SSA)21 b(form)j(for)f(v)n(ariables\).)31 b(The)23
b(e)o(xpressions)k(of)c(interest)j(are)e Fa(a+b)p Fd(,)f
Fa(c-a)h Fd(and)g Fa(b*d)p Fd(.)p 0 TeXcolorgray 0 TeXcolorgray
227 718 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 0.0 426.7891 -455.2417 .5 Frame 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 227
718 a
tx@Dict begin { 284.52606 -14.2263 } PutCoor PutBegin  end
 227 718 a 47 748 a
tx@Dict begin  tx@NodeDict begin {11.11458 3.92584 43.38448 21.69223
3.59436 } false /N@b0 16 {InitRnode } /NodeScale {} def NewNode end
 end
 47 748 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 39.58447 11.11458
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(ENTR)-6 b(Y)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 284.52606 -56.90521 } PutCoor PutBegin  end
 227 718 a 104 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 29.58737 14.79369
3.67096 } false /N@b10 16 {InitRnode } /NodeScale {} def NewNode end
 end
 104 749 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 25.78737 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(a)23 b(=)g(1)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 284.52606 -99.58412 } PutCoor PutBegin  end
 227 718 a 101 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 30.20064 15.10031
3.67096 } false /N@b11 16 {InitRnode } /NodeScale {} def NewNode end
 end
 101 749 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 26.40063 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(b)g(=)g(2)227 718 y
tx@Dict begin  PutEnd  end
 227 718
a 227 718 a
tx@Dict begin { 284.52606 -142.26303 } PutCoor PutBegin  end
 227 718 a 58 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 40.62477 20.31238
3.67096 } false /N@b20 16 {InitRnode } /NodeScale {} def NewNode end
 end
 58 749 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 36.82477 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(c)g(=)g(a+b)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 284.52606 -184.94194 } PutCoor PutBegin  end
 227 718 a 69 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 38.0954 19.0477
3.67096 } false /N@b21 16 {InitRnode } /NodeScale {} def NewNode end
 end
 69 749 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.2954 11.26778 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(d)g(=)g(c-a)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 213.39455 -227.62085 } PutCoor PutBegin  end
 227 718 a 56 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 41.15062 20.5753
3.67096 } false /N@b30 16 {InitRnode } /NodeScale {} def NewNode end
 end
 56 749 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 37.35062 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(d)g(=)g(b*d)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 142.26303 -270.29976 } PutCoor PutBegin  end
 227 718 a 56 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 41.23804 20.61902
3.67096 } false /N@b40 16 {InitRnode } /NodeScale {} def NewNode end
 end
 56 749 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 37.43803 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(d)g(=)g(a+b)227 718 y
tx@Dict begin  PutEnd  end
 227
718 a 227 718 a
tx@Dict begin { 142.26303 -312.97867 } PutCoor PutBegin  end
 227 718 a 72 739 a
tx@Dict begin  tx@NodeDict begin {8.78223 3.92584 37.2523 18.62614
2.42819 } false /N@b41 16 {InitRnode } /NodeScale {} def NewNode end
 end
 72 739 a 32 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 33.4523 8.78223 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(e)g(=)g(.)14 b(.)g(.)227
718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin { 284.52606 -270.29976 } PutCoor PutBegin  end
 227 718 a 56 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 41.23804 20.61902
3.67096 } false /N@b50 16 {InitRnode } /NodeScale {} def NewNode end
 end
 56 749 a
31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 37.43803 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(b)23 b(=)g(a+b)227
718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin { 284.52606 -312.97867 } PutCoor PutBegin  end
 227 718 a 71 739 a
tx@Dict begin  tx@NodeDict begin {8.78223 3.92584 37.48213 18.74106
2.42819 } false /N@b51 16 {InitRnode } /NodeScale {} def NewNode end
 end
 71 739 a
32 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 33.68213 8.78223 .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(e)g(=)g(c-a)227
718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin { 284.52606 -355.65758 } PutCoor PutBegin  end
 227 718 a 59 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 40.53735 20.26868
3.67096 } false /N@b60 16 {InitRnode } /NodeScale {} def NewNode end
 end
 59 749 a
31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 36.73735 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(a)g(=)g(b*d)227
718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin { 284.52606 -398.33649 } PutCoor PutBegin  end
 227 718 a 70 749 a
tx@Dict begin  tx@NodeDict begin {11.26778 3.92584 37.86557 18.93279
3.67096 } false /N@b61 16 {InitRnode } /NodeScale {} def NewNode end
 end
 70 749 a
31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.92584 neg 34.06557 11.26778
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fd(b)g(=)g(.)14
b(.)g(.)227 718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin { 284.52606 -441.0154 } PutCoor PutBegin  end
 227 718 a 92 749
a
tx@Dict begin  tx@NodeDict begin {11.11458 3.8 32.53302 16.26651 3.65729
} false /N@bx 16 {InitRnode } /NodeScale {} def NewNode end  end
 92 749 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 3.8 neg 28.73302 11.11458 .5 Frame
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
Fd(EXIT)227 718 y
tx@Dict begin  PutEnd  end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b0
/N@b10 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b11
/N@b20 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b21
/N@b30 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b30
/N@b40 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227
718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b30
/N@b50 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b51
/N@b60 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b61
/N@bx InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718
a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b10
/N@b11 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b20
/N@b21 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b40
/N@b41 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227
718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b50
/N@b51 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@b60
/N@b61 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg -0.56903 -0.56903
0 0 /N@b41 /N@b30 InitNC { /AngleA -135.  def /AngleB 135.  def 1.8
 1.8  NCCurve  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 227 718 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg -0.56903 -0.56903
0 0 /N@b51 /N@b20 InitNC { /AngleA -45.  def /AngleB 45.  def 1.3 
1.3  NCCurve  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 227 718 a 0 TeXcolorgray 1976 5943
a Fd(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
